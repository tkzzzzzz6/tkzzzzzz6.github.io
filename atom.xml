<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TK的小站</title>
  
  
  <link href="https://ke-tan.asia/atom.xml" rel="self"/>
  
  <link href="https://ke-tan.asia/"/>
  <updated>2025-10-24T03:41:27.308Z</updated>
  <id>https://ke-tan.asia/</id>
  
  <author>
    <name>tkzzzzzz6</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2025-10-24-Google Drive 命令行下载文件完整指南</title>
    <link href="https://ke-tan.asia/2025/10/24/2025-10-24-Google%20Drive%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/"/>
    <id>https://ke-tan.asia/2025/10/24/2025-10-24-Google%20Drive%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%AE%8C%E6%95%B4%E6%8C%87%E5%8D%97/</id>
    <published>2025-10-23T16:00:00.000Z</published>
    <updated>2025-10-24T03:41:27.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Drive-命令行下载文件完整指南"><a href="#Google-Drive-命令行下载文件完整指南" class="headerlink" title="Google Drive 命令行下载文件完整指南"></a>Google Drive 命令行下载文件完整指南</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://blog.csdn.net/lzq6261/article/details/130032780">用命令行下载Google Drive文件的方法 - CSDN</a></li><li><a href="https://lccurious.github.io/2021/05/15/Download-from-Google-Drive/">Download from Google Drive - lccurious</a></li><li><a href="https://github.com/wkentaro/gdown">gdown - GitHub Repository</a></li><li><a href="https://zhuanlan.zhihu.com/p/668161595">Google Drive命令行下载文件 - 知乎</a></li><li><a href="https://developers.google.com/drive/api/v3/about-sdk">Google Drive API Documentation</a></li></ul></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行深度学习或数据分析时，我们经常需要从 Google Drive 下载大型数据集和预训练模型。然而，直接通过浏览器下载存在以下问题：</p><ul><li>下载速度慢，容易中断</li><li>大文件下载不稳定</li><li>无法在服务器端直接下载</li><li>断点续传支持差</li></ul><p>本文介绍两种在 Linux 命令行环境下高效下载 Google Drive 文件的方法，经过实践验证，均可稳定使用。</p><h2 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h2><p>⚠️ <strong>重要提示</strong>：由于网络限制，访问 Google Drive 需要科学上网工具。确保你的服务器或本地环境已配置好代理。</p><h3 id="配置代理（如果需要）"><a href="#配置代理（如果需要）" class="headerlink" title="配置代理（如果需要）"></a>配置代理（如果需要）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置代理环境变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://127.0.0.1:20171<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:20171<span class="token builtin class-name">export</span> <span class="token assign-left variable">all_proxy</span><span class="token operator">=</span>socks5://127.0.0.1:20170<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法一：使用-wget-下载文件"><a href="#方法一：使用-wget-下载文件" class="headerlink" title="方法一：使用 wget 下载文件"></a>方法一：使用 wget 下载文件</h2><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>✅ 下载单个文件</li><li>❌ 不支持下载文件夹</li><li>✅ 适合脚本自动化</li></ul><h3 id="获取文件-ID"><a href="#获取文件-ID" class="headerlink" title="获取文件 ID"></a>获取文件 ID</h3><p>首先需要从 Google Drive 分享链接中获取 <code>fileid</code>。</p><p>分享链接格式：</p><pre class="line-numbers language-none"><code class="language-none">https://drive.google.com/file/d/FILE_ID/view?usp=sharing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>FILE_ID</code> 就是我们需要的 <code>fileid</code>。</p><h3 id="下载脚本"><a href="#下载脚本" class="headerlink" title="下载脚本"></a>下载脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 切换到目标目录</span><span class="token builtin class-name">cd</span> data/<span class="token comment"># 设置文件信息</span><span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">'OfficeHomeDataset_10072016.zip'</span><span class="token assign-left variable">fileid</span><span class="token operator">=</span><span class="token string">'0B81rNlvomiwed0V1YUxQdC1uOTg'</span><span class="token comment"># 下载文件</span><span class="token function">wget</span> --load-cookies /tmp/cookies.txt <span class="token punctuation">\</span>  <span class="token string">"https://drive.google.com/uc?export=download&amp;confirm=<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> <span class="token parameter variable">--quiet</span> --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate <span class="token string">'https://drive.google.com/uc?export=download&amp;id=${fileid}'</span> -O- <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-rn</span> <span class="token string">'s/.*confirm=([0-9A-Za-z_]+).*/\1\n/p'</span><span class="token variable">)</span></span>&amp;id=<span class="token variable">${fileid}</span>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-O</span> <span class="token variable">${filename}</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/cookies.txt<span class="token comment"># 解压文件</span><span class="token function">unzip</span> <span class="token parameter variable">-q</span> <span class="token variable">${filename}</span><span class="token comment"># 删除压缩包</span><span class="token function">rm</span> <span class="token variable">${filename}</span><span class="token builtin class-name">echo</span> <span class="token string">"下载完成！"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 保存 cookies 到临时文件</span>--save-cookies /tmp/cookies.txt<span class="token comment"># 2. 保持 session cookies</span>--keep-session-cookies<span class="token comment"># 3. 不检查证书（避免 SSL 错误）</span>--no-check-certificate<span class="token comment"># 4. 提取确认码</span><span class="token function">sed</span> <span class="token parameter variable">-rn</span> <span class="token string">'s/.*confirm=([0-9A-Za-z_]+).*/\1\n/p'</span><span class="token comment"># 5. 输出到指定文件</span><span class="token parameter variable">-O</span> <span class="token variable">${filename}</span><span class="token comment"># 6. 清理临时 cookies</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/cookies.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例：下载单个文件"><a href="#示例：下载单个文件" class="headerlink" title="示例：下载单个文件"></a>示例：下载单个文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为你的文件信息</span><span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">'my_dataset.zip'</span><span class="token assign-left variable">fileid</span><span class="token operator">=</span><span class="token string">'YOUR_FILE_ID_HERE'</span><span class="token function">wget</span> --load-cookies /tmp/cookies.txt <span class="token punctuation">\</span>  <span class="token string">"https://drive.google.com/uc?export=download&amp;confirm=<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> <span class="token parameter variable">--quiet</span> --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate <span class="token string">'https://drive.google.com/uc?export=download&amp;id=${fileid}'</span> -O- <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-rn</span> <span class="token string">'s/.*confirm=([0-9A-Za-z_]+).*/\1\n/p'</span><span class="token variable">)</span></span>&amp;id=<span class="token variable">${fileid}</span>"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-O</span> <span class="token variable">${filename}</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/cookies.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：使用-gdown-下载（推荐）"><a href="#方法二：使用-gdown-下载（推荐）" class="headerlink" title="方法二：使用 gdown 下载（推荐）"></a>方法二：使用 gdown 下载（推荐）</h2><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>✅ 下载单个文件</li><li>✅ 下载整个文件夹</li><li>✅ 使用简单，命令清晰</li><li>✅ 支持断点续传</li></ul><h3 id="安装-gdown"><a href="#安装-gdown" class="headerlink" title="安装 gdown"></a>安装 gdown</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 pip 安装</span>pip <span class="token function">install</span> gdown<span class="token comment"># 或指定版本</span>pip <span class="token function">install</span> <span class="token assign-left variable">gdown</span><span class="token operator">==</span><span class="token number">4.7</span>.1<span class="token comment"># 升级到最新版本</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> gdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h3><p><strong>重要</strong>：不同版本的 gdown 使用方式略有不同。</p><h4 id="gdown-4-3-1-之前的版本"><a href="#gdown-4-3-1-之前的版本" class="headerlink" title="gdown 4.3.1 之前的版本"></a>gdown 4.3.1 之前的版本</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载文件（使用 --id 参数）</span>gdown --no-check-certificate <span class="token parameter variable">--id</span> FILE_ID<span class="token comment"># 下载文件夹</span>gdown --no-check-certificate <span class="token parameter variable">--folder</span> https://drive.google.com/drive/folders/FOLDER_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="gdown-4-3-1-及之后的版本"><a href="#gdown-4-3-1-及之后的版本" class="headerlink" title="gdown 4.3.1 及之后的版本"></a>gdown 4.3.1 及之后的版本</h4><p>从 4.3.1 版本开始，<code>--id</code> 参数被废弃，改用直接链接方式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载文件（推荐方式）</span>gdown <span class="token string">'https://drive.google.com/uc?id=FILE_ID'</span><span class="token comment"># 或者使用完整链接</span>gdown <span class="token string">'https://drive.google.com/file/d/FILE_ID/view?usp=sharing'</span><span class="token comment"># 下载文件夹</span>gdown <span class="token parameter variable">--folder</span> <span class="token string">'https://drive.google.com/drive/folders/FOLDER_ID'</span><span class="token comment"># 下载文件夹（不检查证书）</span>gdown <span class="token parameter variable">--folder</span> --no-check-certificate <span class="token string">'https://drive.google.com/drive/folders/FOLDER_ID'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实际使用示例"><a href="#实际使用示例" class="headerlink" title="实际使用示例"></a>实际使用示例</h3><h4 id="示例-1：下载单个文件"><a href="#示例-1：下载单个文件" class="headerlink" title="示例 1：下载单个文件"></a>示例 1：下载单个文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式 1：使用 uc 链接</span>gdown <span class="token string">'https://drive.google.com/uc?id=1A2B3C4D5E6F7G8H9I0J'</span><span class="token comment"># 方式 2：使用分享链接（自动转换）</span>gdown <span class="token string">'https://drive.google.com/file/d/1A2B3C4D5E6F7G8H9I0J/view?usp=sharing'</span><span class="token comment"># 指定输出文件名</span>gdown <span class="token string">'https://drive.google.com/uc?id=1A2B3C4D5E6F7G8H9I0J'</span> <span class="token parameter variable">-O</span> my_model.pth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-2：下载整个文件夹"><a href="#示例-2：下载整个文件夹" class="headerlink" title="示例 2：下载整个文件夹"></a>示例 2：下载整个文件夹</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载文件夹（保持目录结构）</span>gdown <span class="token parameter variable">--folder</span> <span class="token string">'https://drive.google.com/drive/folders/1A2B3C4D5E6F7G8H9I0J'</span><span class="token comment"># 安静模式（不显示进度条）</span>gdown <span class="token parameter variable">--folder</span> <span class="token parameter variable">--quiet</span> <span class="token string">'https://drive.google.com/drive/folders/1A2B3C4D5E6F7G8H9I0J'</span><span class="token comment"># 指定输出目录</span>gdown <span class="token parameter variable">--folder</span> <span class="token string">'https://drive.google.com/drive/folders/1A2B3C4D5E6F7G8H9I0J'</span> <span class="token parameter variable">-O</span> ./datasets/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-3：下载大文件（处理病毒扫描警告）"><a href="#示例-3：下载大文件（处理病毒扫描警告）" class="headerlink" title="示例 3：下载大文件（处理病毒扫描警告）"></a>示例 3：下载大文件（处理病毒扫描警告）</h4><p>对于大文件（&gt;25MB），Google Drive 会提示病毒扫描警告，gdown 会自动处理：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># gdown 会自动绕过病毒扫描警告</span>gdown <span class="token parameter variable">--fuzzy</span> <span class="token string">'https://drive.google.com/file/d/LARGE_FILE_ID/view?usp=sharing'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="常用参数说明"><a href="#常用参数说明" class="headerlink" title="常用参数说明"></a>常用参数说明</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本下载</span>gdown URL<span class="token comment"># 常用参数</span>--no-check-certificate    <span class="token comment"># 不检查 SSL 证书</span><span class="token parameter variable">--folder</span>                  <span class="token comment"># 下载文件夹</span>-O, <span class="token parameter variable">--output</span> FILE        <span class="token comment"># 指定输出文件名</span><span class="token parameter variable">--quiet</span>                  <span class="token comment"># 安静模式，不显示进度</span><span class="token parameter variable">--fuzzy</span>                  <span class="token comment"># 模糊匹配（处理大文件扫描警告）</span>--remaining-ok           <span class="token comment"># 允许部分下载失败</span><span class="token parameter variable">--proxy</span> PROXY            <span class="token comment"># 指定代理服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实用脚本"><a href="#实用脚本" class="headerlink" title="实用脚本"></a>实用脚本</h2><h3 id="批量下载脚本"><a href="#批量下载脚本" class="headerlink" title="批量下载脚本"></a>批量下载脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 批量下载 Google Drive 文件</span><span class="token comment"># 文件列表（格式：FILE_ID|文件名）</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token string">"1A2B3C4D5E6F7G8H9I0J|dataset_part1.zip"</span>    <span class="token string">"2B3C4D5E6F7G8H9I0J1K|dataset_part2.zip"</span>    <span class="token string">"3C4D5E6F7G8H9I0J1K2L|pretrained_model.pth"</span><span class="token punctuation">)</span><span class="token comment"># 创建下载目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> downloads<span class="token builtin class-name">cd</span> downloads<span class="token comment"># 遍历下载</span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">${files<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'|'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-r</span> file_id filename <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$file</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"正在下载: <span class="token variable">$filename</span>"</span>    gdown <span class="token string">"https://drive.google.com/uc?id=<span class="token variable">$file_id</span>"</span> <span class="token parameter variable">-O</span> <span class="token string">"<span class="token variable">$filename</span>"</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"✓ <span class="token variable">$filename</span> 下载成功"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"✗ <span class="token variable">$filename</span> 下载失败"</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">echo</span> <span class="token string">"---"</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"所有文件下载完成！"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="带进度显示的下载脚本"><a href="#带进度显示的下载脚本" class="headerlink" title="带进度显示的下载脚本"></a>带进度显示的下载脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function-name function">download_from_gdrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">output</span><span class="token operator">=</span><span class="token variable">$2</span>        <span class="token builtin class-name">echo</span> <span class="token string">"=========================================="</span>    <span class="token builtin class-name">echo</span> <span class="token string">"开始下载: <span class="token variable">$output</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"=========================================="</span>        gdown <span class="token string">"<span class="token variable">$url</span>"</span> <span class="token parameter variable">-O</span> <span class="token string">"<span class="token variable">$output</span>"</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"✓ 下载成功: <span class="token variable">$output</span>"</span>        <span class="token function">ls</span> <span class="token parameter variable">-lh</span> <span class="token string">"<span class="token variable">$output</span>"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"✗ 下载失败: <span class="token variable">$output</span>"</span>        <span class="token builtin class-name">return</span> <span class="token number">1</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token comment"># 使用示例</span>download_from_gdrive <span class="token punctuation">\</span>    <span class="token string">'https://drive.google.com/uc?id=YOUR_FILE_ID'</span> <span class="token punctuation">\</span>    <span class="token string">'output_filename.zip'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题及解决方案"><a href="#常见问题及解决方案" class="headerlink" title="常见问题及解决方案"></a>常见问题及解决方案</h2><h3 id="问题-1：SSL-证书验证失败"><a href="#问题-1：SSL-证书验证失败" class="headerlink" title="问题 1：SSL 证书验证失败"></a>问题 1：SSL 证书验证失败</h3><p><strong>错误信息</strong>：</p><pre class="line-numbers language-none"><code class="language-none">SSL certificate problem: unable to get local issuer certificate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># wget 方式</span><span class="token function">wget</span> --no-check-certificate URL<span class="token comment"># gdown 方式</span>gdown --no-check-certificate URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题-2：文件过大，提示病毒扫描"><a href="#问题-2：文件过大，提示病毒扫描" class="headerlink" title="问题 2：文件过大，提示病毒扫描"></a>问题 2：文件过大，提示病毒扫描</h3><p><strong>错误信息</strong>：</p><pre class="line-numbers language-none"><code class="language-none">Cannot retrieve the public link of the file. You may need to change the permission to 'Anyone with the link'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 --fuzzy 参数</span>gdown <span class="token parameter variable">--fuzzy</span> <span class="token string">'https://drive.google.com/file/d/FILE_ID/view'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="问题-3：下载文件夹时权限不足"><a href="#问题-3：下载文件夹时权限不足" class="headerlink" title="问题 3：下载文件夹时权限不足"></a>问题 3：下载文件夹时权限不足</h3><p><strong>错误信息</strong>：</p><pre class="line-numbers language-none"><code class="language-none">Permission denied<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong>：</p><ol><li>确保 Google Drive 分享设置为”任何拥有链接的人都可以查看”</li><li>使用 <code>--no-check-certificate</code> 参数<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdown <span class="token parameter variable">--folder</span> --no-check-certificate <span class="token string">'FOLDER_URL'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="问题-4：网络连接超时"><a href="#问题-4：网络连接超时" class="headerlink" title="问题 4：网络连接超时"></a>问题 4：网络连接超时</h3><p><strong>解决方案</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用代理</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">http_proxy</span><span class="token operator">=</span>http://proxy_server:port<span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://proxy_server:port<span class="token comment"># 或在命令中指定</span>gdown <span class="token parameter variable">--proxy</span> http://proxy_server:port URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题-5：gdown-版本不兼容"><a href="#问题-5：gdown-版本不兼容" class="headerlink" title="问题 5：gdown 版本不兼容"></a>问题 5：gdown 版本不兼容</h3><p><strong>解决方案</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载当前版本</span>pip uninstall gdown<span class="token comment"># 安装指定版本</span>pip <span class="token function">install</span> <span class="token assign-left variable">gdown</span><span class="token operator">==</span><span class="token number">4.7</span>.1<span class="token comment"># 查看版本</span>gdown <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法对比"><a href="#方法对比" class="headerlink" title="方法对比"></a>方法对比</h2><table><thead><tr><th>特性</th><th>wget 方式</th><th>gdown 方式</th></tr></thead><tbody><tr><td>下载文件</td><td>✅ 支持</td><td>✅ 支持</td></tr><tr><td>下载文件夹</td><td>❌ 不支持</td><td>✅ 支持</td></tr><tr><td>命令复杂度</td><td>复杂</td><td>简单</td></tr><tr><td>断点续传</td><td>❌</td><td>✅</td></tr><tr><td>大文件处理</td><td>一般</td><td>优秀</td></tr><tr><td>安装要求</td><td>系统自带</td><td>需要 pip</td></tr><tr><td>推荐指数</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了两种从 Google Drive 命令行下载文件的方法：</p><ol><li><strong>wget 方式</strong>：适合下载单个文件，命令较复杂，但无需额外安装</li><li><strong>gdown 方式</strong>：功能更强大，支持文件和文件夹下载，使用简单，强烈推荐</li></ol><h3 id="推荐使用场景"><a href="#推荐使用场景" class="headerlink" title="推荐使用场景"></a>推荐使用场景</h3><ul><li><strong>简单下载</strong>：使用 gdown 的最新版本</li><li><strong>批量下载</strong>：编写脚本使用 gdown</li><li><strong>无法安装 pip</strong>：使用 wget 方式</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 安装最新版 gdown</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> gdown<span class="token comment"># 2. 配置代理（如需要）</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">https_proxy</span><span class="token operator">=</span>http://127.0.0.1:20171<span class="token comment"># 3. 下载文件</span>gdown <span class="token string">'https://drive.google.com/uc?id=FILE_ID'</span> <span class="token parameter variable">-O</span> output.zip<span class="token comment"># 4. 下载文件夹</span>gdown <span class="token parameter variable">--folder</span> <span class="token string">'https://drive.google.com/drive/folders/FOLDER_ID'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>希望本文能帮助你高效地从 Google Drive 下载所需资源！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Google-Drive-命令行下载文件完整指南&quot;&gt;&lt;a href=&quot;#Google-Drive-命令行下载文件完整指南&quot; class=&quot;headerlink&quot; title=&quot;Google Drive 命令行下载文件完整指南&quot;&gt;&lt;/a&gt;Google Drive 命</summary>
      
    
    
    
    <category term="进击的码农" scheme="https://ke-tan.asia/categories/%E8%BF%9B%E5%87%BB%E7%9A%84%E7%A0%81%E5%86%9C/"/>
    
    
    <category term="问题解决" scheme="https://ke-tan.asia/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-24-C++魔法药剂收集最小花费问题</title>
    <link href="https://ke-tan.asia/2025/10/24/2025-10-24-C++%E9%AD%94%E6%B3%95%E8%8D%AF%E5%89%82%E6%94%B6%E9%9B%86%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E9%97%AE%E9%A2%98/"/>
    <id>https://ke-tan.asia/2025/10/24/2025-10-24-C++%E9%AD%94%E6%B3%95%E8%8D%AF%E5%89%82%E6%94%B6%E9%9B%86%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E9%97%AE%E9%A2%98/</id>
    <published>2025-10-23T16:00:00.000Z</published>
    <updated>2025-10-24T09:56:56.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-魔法药剂收集最小花费问题"><a href="#C-魔法药剂收集最小花费问题" class="headerlink" title="C++ 魔法药剂收集最小花费问题"></a>C++ 魔法药剂收集最小花费问题</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.nowcoder.com/practice/1ede2daa3ab445bc8ac8ea62b6ca8201?channelPut=w251acm">魔法药剂收集 - NowCoder 题目链接</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">贪心算法 - 维基百科</a></li><li><a href="https://en.cppreference.com/w/cpp/container/vector">C++ STL vector 用法详解</a></li></ul></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>小红打算收集编号为 1∼n 的 n 种魔法药剂，其中每种药剂有两种形态：<strong>红色版本</strong>与<strong>蓝色版本</strong>。</p><p>获得药剂的方式如下：</p><ol><li><strong>直接购买</strong>：购买第 i 种红色版本药剂需要花费 a_i 金币</li><li><strong>调配合成</strong>：若已拥有红色版本的第 b_i 种与第 c_i 种药剂，可调配得到蓝色版本的第 i 种药剂，调配本身不额外花费金币（仅需保证两种原料存在）</li></ol><p>小红不关心颜色，只要求最终至少拥有 1∼n 每种药剂中的任意一种形态（红或蓝）。请计算她所需支付的最小总金币数。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><ul><li>第一行：整数 n (1 ≤ n ≤ 10^5)，表示药剂种类数量</li><li>第二行：n 个整数 a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^4)，表示购买第 i 种红色药剂的价格</li><li>接下来 n 行：第 i 行输入两个整数 b_i, c_i (1 ≤ b_i, c_i ≤ n)，表示合成蓝色版本第 i 种药剂所需的两种红色药剂的编号</li></ul><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数，表示获得 n 种不同药剂所需支付的最小金币数。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>输入：</strong></p><pre class="line-numbers language-none"><code class="language-none">52 4 10 1 32 34 51 22 51 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出：</strong></p><pre class="line-numbers language-none"><code class="language-none">16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>说明：</strong></p><p>一种最优方案：</p><ul><li>直接购买第 1,2,4,5 种红色药剂，花费 2+4+1+3=10</li><li>利用红色的 1,2 调配得到第 3 种蓝色药剂，花费 2+4=6</li><li>最终花费 10+6=16</li></ul><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h3><p>这道题的关键是理解：<strong>对于每种药剂，我们需要独立决定是获得红色版本还是蓝色版本</strong>。</p><p>对于第 i 种药剂，有两种选择：</p><ol><li><strong>选择红色版本</strong>：成本为 <code>cost[i]</code></li><li><strong>选择蓝色版本</strong>：成本为 <code>cost[b_i] + cost[c_i]</code></li></ol><p>这里需要注意的是：<strong>合成蓝色药剂的成本是购买两种红色原料的成本之和</strong>，即使我们为了其他药剂已经”购买”过这些原料，仍然需要重新计算成本。</p><h3 id="贪心策略"><a href="#贪心策略" class="headerlink" title="贪心策略"></a>贪心策略</h3><p>对于每种药剂 i，我们选择成本更低的方案：</p><pre class="line-numbers language-none"><code class="language-none">min_cost[i] = min(cost[i], cost[b_i] + cost[c_i])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终答案为所有药剂的最小成本之和。</p><h3 id="为什么贪心是正确的？"><a href="#为什么贪心是正确的？" class="headerlink" title="为什么贪心是正确的？"></a>为什么贪心是正确的？</h3><p>这道题可以看作是一个<strong>独立选择问题</strong>：</p><ul><li>每种药剂的选择不会影响其他药剂的选择</li><li>每种药剂的成本计算是独立的</li><li>因此对每种药剂选择局部最优解，就能得到全局最优解</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment">// 药剂种类数量</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">// 存储每种红色药剂的购买价格</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">red_cost</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> red_cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll total_cost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 最小总花费</span>    <span class="token comment">// 对每种药剂，计算获得它的最小成本</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 读取合成配方</span>        pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> recipe<span class="token punctuation">;</span> <span class="token comment">// 合成第 i 种蓝色药剂需要的两种红色药剂编号</span>        cin <span class="token operator">&gt;&gt;</span> recipe<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> recipe<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token comment">// 计算两种获得方式的成本</span>        <span class="token keyword">int</span> cost_buy_red <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接购买红色</span>        <span class="token keyword">int</span> cost_make_blue <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 合成蓝色</span>        <span class="token comment">// 选择成本较低的方案</span>        total_cost <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>cost_buy_red<span class="token punctuation">,</span> cost_make_blue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//输出</span>    cout <span class="token operator">&lt;&lt;</span> total_cost <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h3><ol><li><p><strong>读取输入</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">red_cost</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> red_cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>对每种药剂做决策</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 读取配方</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> recipe<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> recipe<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> recipe<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token comment">// 计算两种方案的成本</span>    <span class="token keyword">int</span> cost_buy_red <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cost_make_blue <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 选择更优方案</span>    total_cost <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>cost_buy_red<span class="token punctuation">,</span> cost_make_blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注意索引转换</strong></p><ul><li>题目中药剂编号从 1 开始</li><li>数组索引从 0 开始</li><li>因此需要 <code>recipe.first - 1</code> 和 <code>recipe.second - 1</code></li></ul></li></ol><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul><li><p><strong>时间复杂度</strong>：O(n)</p><ul><li>读取 n 个价格：O(n)</li><li>处理 n 种药剂，每种 O(1)：O(n)</li><li>总计：O(n)</li></ul></li><li><p><strong>空间复杂度</strong>：O(n)</p><ul><li>存储 n 个价格的数组：O(n)</li></ul></li></ul><h2 id="示例验证"><a href="#示例验证" class="headerlink" title="示例验证"></a>示例验证</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="line-numbers language-none"><code class="language-none">52 4 10 1 32 34 51 22 51 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h3><table><thead><tr><th>药剂编号</th><th>红色成本</th><th>配方</th><th>蓝色成本</th><th>选择</th><th>成本</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>(2,3)</td><td>4+10=14</td><td>红色</td><td>2</td></tr><tr><td>2</td><td>4</td><td>(4,5)</td><td>1+3=4</td><td>两者均可</td><td>4</td></tr><tr><td>3</td><td>10</td><td>(1,2)</td><td>2+4=6</td><td>蓝色</td><td>6</td></tr><tr><td>4</td><td>1</td><td>(2,5)</td><td>4+3=7</td><td>红色</td><td>1</td></tr><tr><td>5</td><td>3</td><td>(1,4)</td><td>2+1=3</td><td>两者均可</td><td>3</td></tr></tbody></table><p><strong>总成本</strong>：2 + 4 + 6 + 1 + 3 = <strong>16</strong> ✓</p><h3 id="代码运行"><a href="#代码运行" class="headerlink" title="代码运行"></a>代码运行</h3><pre class="line-numbers language-none"><code class="language-none">输入：52 4 10 1 32 34 51 22 51 4输出：16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><h3 id="错误理解-1：原料复用"><a href="#错误理解-1：原料复用" class="headerlink" title="错误理解 1：原料复用"></a>错误理解 1：原料复用</h3><p>❌ <strong>错误想法</strong>：购买一些红色药剂，然后用它们可以免费合成多个蓝色药剂。</p><p>✅ <strong>正确理解</strong>：每种药剂的成本是独立计算的，不存在”原料复用”的概念。</p><h3 id="错误理解-2：全局优化"><a href="#错误理解-2：全局优化" class="headerlink" title="错误理解 2：全局优化"></a>错误理解 2：全局优化</h3><p>❌ <strong>错误想法</strong>：需要枚举所有可能的购买方案，找到全局最优解。</p><p>✅ <strong>正确理解</strong>：这是一个独立决策问题，每种药剂选择局部最优即可。</p><h3 id="索引转换"><a href="#索引转换" class="headerlink" title="索引转换"></a>索引转换</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 错误：直接使用编号</span><span class="token keyword">int</span> cost_make_blue <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// ✅ 正确：编号减1转为索引</span><span class="token keyword">int</span> cost_make_blue <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h2><h3 id="变体-1：限制购买数量"><a href="#变体-1：限制购买数量" class="headerlink" title="变体 1：限制购买数量"></a>变体 1：限制购买数量</h3><p>如果题目要求最多只能购买 k 种红色药剂，该如何解决？</p><p><strong>思路</strong>：这就变成了一个更复杂的优化问题，需要考虑依赖关系，可能需要用到图论或动态规划。</p><h3 id="变体-2：合成也需要花费"><a href="#变体-2：合成也需要花费" class="headerlink" title="变体 2：合成也需要花费"></a>变体 2：合成也需要花费</h3><p>如果合成蓝色药剂本身也需要花费 cost_mix[i]，该如何修改？</p><p><strong>修改</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> cost_make_blue <span class="token operator">=</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> red_cost<span class="token punctuation">[</span>recipe<span class="token punctuation">.</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> cost_mix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变体-3：考虑依赖关系"><a href="#变体-3：考虑依赖关系" class="headerlink" title="变体 3：考虑依赖关系"></a>变体 3：考虑依赖关系</h3><p>如果合成配方可能形成依赖环（例如：蓝1需要红2，蓝2需要红1），该如何处理？</p><p><strong>思路</strong>：需要检测环并做特殊处理，保证至少有一个被购买为红色版本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题的核心是：</p><ol><li><strong>正确理解题意</strong>：每种药剂的成本是独立计算的</li><li><strong>贪心策略</strong>：对每种药剂选择成本更低的方案</li><li><strong>注意细节</strong>：索引转换（编号从1开始，数组从0开始）</li></ol><p>代码简洁高效，时间复杂度为 O(n)，适合处理题目给定的数据规模（n ≤ 10^5）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-魔法药剂收集最小花费问题&quot;&gt;&lt;a href=&quot;#C-魔法药剂收集最小花费问题&quot; class=&quot;headerlink&quot; title=&quot;C++ 魔法药剂收集最小花费问题&quot;&gt;&lt;/a&gt;C++ 魔法药剂收集最小花费问题&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="算法学习" scheme="https://ke-tan.asia/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-23-C++求阶乘末尾非零数字</title>
    <link href="https://ke-tan.asia/2025/10/23/2025-10-23-C++%E6%B1%82%E9%98%B6%E4%B9%98%E6%9C%AB%E5%B0%BE%E9%9D%9E%E9%9B%B6%E6%95%B0%E5%AD%97/"/>
    <id>https://ke-tan.asia/2025/10/23/2025-10-23-C++%E6%B1%82%E9%98%B6%E4%B9%98%E6%9C%AB%E5%B0%BE%E9%9D%9E%E9%9B%B6%E6%95%B0%E5%AD%97/</id>
    <published>2025-10-22T16:00:00.000Z</published>
    <updated>2025-10-24T03:32:41.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.nowcoder.com/practice/248c8fbee56e491aa147b67b9c082da0?channelPut=w251acm">阶乘末尾非零数字 - NowCoder题目链接</a>  </li><li><a href="https://blog.csdn.net/winter2121/article/details/119570873">记一个有趣的算法题：求n的阶乘最后一位非零数字</a></li></ul></blockquote><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数 <code>n</code>（1 ≤ n ≤ 10^7），要求输出 <code>n!</code>（n 的阶乘）中<strong>末尾第一个非零数字</strong>。</p><p>题目链接</p><ul><li><a href="https://www.nowcoder.com/practice/248c8fbee56e491aa147b67b9c082da0?channelPut=w251acm">阶乘末尾非零数字</a></li></ul><hr><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>对于较小的 <code>n</code>（如 n ≤ 20），我们可以直接计算出 <code>n!</code> 的值并从后往前找第一个非零数字：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">*=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>````但当 `n` 达到 <span class="token number">10</span><span class="token operator">^</span><span class="token number">7</span> 时，`n<span class="token operator">!</span>` 的值极其巨大（数百万位），即使使用 `<span class="token keyword">long</span> <span class="token keyword">double</span>` 或大整数也无法保存，因此<span class="token operator">*</span><span class="token operator">*</span>直接计算不可行<span class="token operator">*</span><span class="token operator">*</span>。<span class="token operator">--</span><span class="token operator">-</span>## 思路我们只需要找到<span class="token operator">*</span><span class="token operator">*</span>阶乘末尾的第一个非零数字<span class="token operator">*</span><span class="token operator">*</span>，而非整个阶乘。分析阶乘中的末尾零产生的原因：<span class="token operator">*</span> 每一对 `<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>` 会产生一个零；<span class="token operator">*</span> 因此我们可以统计 <span class="token number">5</span> 的个数并与 <span class="token number">2</span> 配对去除掉它们的影响；<span class="token operator">*</span> 同时在计算过程中每次取模避免数字过大。<span class="token operator">*</span><span class="token operator">*</span>核心思想：<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> 模拟乘法过程；<span class="token operator">*</span> 每次乘完后去掉末尾的零；<span class="token operator">*</span> 保留最后几位数字（如 <span class="token number">1e9</span>）即可。<span class="token operator">--</span><span class="token operator">-</span>##  实现思路<span class="token number">1.</span> 初始化 `res <span class="token operator">=</span> <span class="token number">1</span>`；<span class="token number">2.</span> 遍历 `i <span class="token operator">=</span> <span class="token number">1.</span><span class="token punctuation">.</span>n`：   <span class="token operator">*</span> `res <span class="token operator">*=</span> i`；   <span class="token operator">*</span> 去掉所有末尾的 <span class="token number">0</span>；   <span class="token operator">*</span> 取模 `res <span class="token operator">%=</span> <span class="token number">1000000000</span>`（保留最后 <span class="token number">9</span> 位，防止溢出）；<span class="token number">3.</span> 最终 `res <span class="token operator">%</span> <span class="token number">10</span>` 即为末尾第一个非零数字。<span class="token operator">--</span><span class="token operator">-</span>##  代码实现```cpp<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll <span class="token function">lastNonZeroDigit_factorial</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ll ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">*=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ans <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>ans <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        ans <span class="token operator">%=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1e9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1e9是double需要强制转换</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">lastNonZeroDigit_factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">&lt;&lt;</span> <span class="token char">'\n'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="关键点总结"><a href="#关键点总结" class="headerlink" title="关键点总结"></a>关键点总结</h2><ol><li><p><strong>避免大数计算</strong>：通过不断取模与去除 0 来防止溢出；</p></li><li><p><strong>2 与 5 的抵消原理</strong>：每对 (2,5) 会产生一个 0，去掉它们即可；</p></li><li><p><strong>优化输出</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭流同步，提高输入输出效率。</p></li></ol><hr><h2 id="思考延伸"><a href="#思考延伸" class="headerlink" title="思考延伸"></a>思考延伸</h2><ul><li>该方法不仅适用于阶乘问题，还可以推广到“组合数末尾非零数字”类问题；</li><li>若需要更多尾部非零数字（例如末尾 5 位非零数），可调整取模范围（如 1e12）。</li></ul><hr><p><strong>总结一句话：</strong></p><blockquote><p>“通过逐步消去 2 和 5 的影响，并限制保留位数，我们无需计算完整阶乘即可求出末尾非零数字。”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/</summary>
      
    
    
    
    
    <category term="算法学习" scheme="https://ke-tan.asia/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-19-C++绝对值函数详解</title>
    <link href="https://ke-tan.asia/2025/10/19/2025-10-19-C++%E7%BB%9D%E5%AF%B9%E5%80%BC%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://ke-tan.asia/2025/10/19/2025-10-19-C++%E7%BB%9D%E5%AF%B9%E5%80%BC%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-10-18T16:00:00.000Z</published>
    <updated>2025-10-23T00:36:43.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://en.cppreference.com/w/cpp/numeric/math/abs">std::abs - cppreference</a></li><li><a href="https://en.cppreference.com/w/cpp/numeric/math/fabs">std::fabs - cppreference</a></li><li><a href="https://blog.csdn.net/qq_41575507/article/details/105995538">C++ abs函数详解 - CSDN博客</a></li></ul></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在刷算法题的时候，经常需要用到绝对值函数。一开始我以为C++的绝对值函数就是简单的<code>abs()</code>，直到遇到了浮点数、long long等不同类型的数据，才发现C++中的绝对值函数远比想象中复杂。</p><p>今天就来系统地梳理一下C++中绝对值函数的使用方法和注意事项，帮助大家避开我踩过的坑。</p><h2 id="一、不同类型的绝对值函数"><a href="#一、不同类型的绝对值函数" class="headerlink" title="一、不同类型的绝对值函数"></a>一、不同类型的绝对值函数</h2><p>C++中<strong>不同数据类型有不同的绝对值函数</strong>，这是很多初学者容易踩的坑！</p><h3 id="函数对照表"><a href="#函数对照表" class="headerlink" title="函数对照表"></a>函数对照表</h3><table><thead><tr><th>数据类型</th><th>函数名</th><th>头文件</th><th>示例</th></tr></thead><tbody><tr><td><strong>int</strong></td><td><code>abs()</code></td><td><code>&lt;cstdlib&gt;</code> 或 <code>&lt;cmath&gt;</code></td><td><code>abs(-5)</code> → 5</td></tr><tr><td><strong>long</strong></td><td><code>labs()</code></td><td><code>&lt;cstdlib&gt;</code></td><td><code>labs(-123L)</code> → 123</td></tr><tr><td><strong>long long</strong></td><td><code>llabs()</code></td><td><code>&lt;cstdlib&gt;</code></td><td><code>llabs(-123LL)</code> → 123</td></tr><tr><td><strong>float/double</strong></td><td><code>fabs()</code></td><td><code>&lt;cmath&gt;</code></td><td><code>fabs(-3.14)</code> → 3.14</td></tr><tr><td><strong>通用（C++11）</strong></td><td><code>abs()</code></td><td><code>&lt;cmath&gt;</code></td><td>自动识别类型</td></tr></tbody></table><hr><h2 id="二、基本使用方法"><a href="#二、基本使用方法" class="headerlink" title="二、基本使用方法"></a>二、基本使用方法</h2><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1. 整数类型"></a>1. 整数类型</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span>  <span class="token comment">// 或 &lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出：5</span>        <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123L</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">labs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出：123</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123456789LL</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">llabs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出：123456789</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-浮点数类型"><a href="#2-浮点数类型" class="headerlink" title="2. 浮点数类型"></a>2. 浮点数类型</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出：3.14</span>        <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.5f</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出：2.5</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-C-11-通用方法（推荐）"><a href="#3-C-11-通用方法（推荐）" class="headerlink" title="3. C++11 通用方法（推荐）"></a>3. C++11 通用方法（推荐）</h3><p>从C++11开始，<code>abs()</code>函数被重载了，可以自动识别不同类型：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// abs() 在 C++11 中重载了，可以自动识别类型</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// int：5</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5L</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment">// long：5</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5LL</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// long long：5</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment">// double：3.14</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment">// float：2.5</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、算法竞赛常用写法"><a href="#三、算法竞赛常用写法" class="headerlink" title="三、算法竞赛常用写法"></a>三、算法竞赛常用写法</h2><p>在算法竞赛中，通常会使用万能头文件<code>bits/stdc++.h</code>，这样就不需要担心头文件的问题了：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// bits/stdc++.h 已经包含了所有头文件</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123456789LL</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 5</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 123456789</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 3.14</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>推荐：</strong> 在算法竞赛中，直接用 <code>abs()</code> 即可，编译器会自动识别类型！</p><hr><h2 id="四、重要注意事项"><a href="#四、重要注意事项" class="headerlink" title="四、重要注意事项"></a>四、重要注意事项</h2><h3 id="注意1：整数溢出问题（非常重要！）"><a href="#注意1：整数溢出问题（非常重要！）" class="headerlink" title="注意1：整数溢出问题（非常重要！）"></a>注意1：整数溢出问题（非常重要！）</h3><p>这是最容易踩的坑，我自己就在这里吃过亏。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>  <span class="token comment">// -2147483648</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// ⚠️ 未定义行为！可能输出负数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>原因分析：</strong></p><ul><li><code>INT_MIN</code> 的值是 -2147483648</li><li><code>INT_MAX</code> 的值是 2147483647</li><li><code>abs(INT_MIN)</code> 应该是 2147483648，但超出了 int 范围！</li><li>结果是<strong>未定义行为</strong>，可能输出负数或其他奇怪的值</li></ul><p><strong>解决方法：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 方法1：使用 long long</span><span class="token keyword">int</span> a <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 强制转换为 long long</span><span class="token comment">// 方法2：使用 llabs</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">llabs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 方法3：用更大的类型存储</span><span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意2：浮点数要用正确的函数"><a href="#注意2：浮点数要用正确的函数" class="headerlink" title="注意2：浮点数要用正确的函数"></a>注意2：浮点数要用正确的函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 错误：对浮点数用整数的 abs 并强制转换</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：3（小数部分被截断了！）</span><span class="token comment">// ✅ 正确：用 fabs 或直接用 abs（C++11）</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：3.14</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出：3.14（C++11）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意3：避免重复计算"><a href="#注意3：避免重复计算" class="headerlink" title="注意3：避免重复计算"></a>注意3：避免重复计算</h3><p>在一些场景下，可能需要多次使用同一个绝对值，这时候应该先计算并存储：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 低效：计算了两次</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ✅ 高效：只计算一次</span><span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> diff<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意4：负数取模后再求绝对值"><a href="#注意4：负数取模后再求绝对值" class="headerlink" title="注意4：负数取模后再求绝对值"></a>注意4：负数取模后再求绝对值</h3><p>这是一个容易混淆的地方，顺序不同结果可能不同：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// 先绝对值再取模</span><span class="token keyword">int</span> result1 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">%</span> b<span class="token punctuation">;</span>  <span class="token comment">// 7 % 3 = 1</span><span class="token comment">// 先取模再绝对值</span><span class="token keyword">int</span> result2 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (-7) % 3 = -1，abs(-1) = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++中，负数取模的结果符号与被除数相同，所以 <code>-7 % 3 = -1</code>。</p><hr><h2 id="五、常见使用场景"><a href="#五、常见使用场景" class="headerlink" title="五、常见使用场景"></a>五、常见使用场景</h2><h3 id="场景1：计算两数之差的绝对值"><a href="#场景1：计算两数之差的绝对值" class="headerlink" title="场景1：计算两数之差的绝对值"></a>场景1：计算两数之差的绝对值</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是最常见的用法，用于计算距离、差值等。</p><h3 id="场景2：判断是否在允许范围内"><a href="#场景2：判断是否在允许范围内" class="headerlink" title="场景2：判断是否在允许范围内"></a>场景2：判断是否在允许范围内</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> tolerance <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>x <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> tolerance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"在允许范围内"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景3：计算曼哈顿距离"><a href="#场景3：计算曼哈顿距离" class="headerlink" title="场景3：计算曼哈顿距离"></a>场景3：计算曼哈顿距离</h3><p>在网格问题中经常用到：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">int</span> manhattan_distance <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1 <span class="token operator">-</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="场景4：判断奇偶性（适用于负数）"><a href="#场景4：判断奇偶性（适用于负数）" class="headerlink" title="场景4：判断奇偶性（适用于负数）"></a>场景4：判断奇偶性（适用于负数）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"奇数"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"偶数"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景5：数组中找最接近的值"><a href="#场景5：数组中找最接近的值" class="headerlink" title="场景5：数组中找最接近的值"></a>场景5：数组中找最接近的值</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> closest <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> min_diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> min_diff<span class="token punctuation">)</span> <span class="token punctuation">{</span>        min_diff <span class="token operator">=</span> diff<span class="token punctuation">;</span>        closest <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最接近的值："</span> <span class="token operator">&lt;&lt;</span> closest<span class="token punctuation">;</span>  <span class="token comment">// 45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="六、函数性能对比"><a href="#六、函数性能对比" class="headerlink" title="六、函数性能对比"></a>六、函数性能对比</h2><p>虽然在大多数情况下性能差异不大，但了解一下还是有帮助的：</p><table><thead><tr><th>函数</th><th>适用类型</th><th>返回类型</th><th>头文件</th><th>推荐度</th></tr></thead><tbody><tr><td><code>abs(int)</code></td><td>int</td><td>int</td><td><code>&lt;cstdlib&gt;</code></td><td>⭐⭐⭐</td></tr><tr><td><code>labs(long)</code></td><td>long</td><td>long</td><td><code>&lt;cstdlib&gt;</code></td><td>⭐⭐</td></tr><tr><td><code>llabs(long long)</code></td><td>long long</td><td>long long</td><td><code>&lt;cstdlib&gt;</code></td><td>⭐⭐</td></tr><tr><td><code>fabs(double)</code></td><td>float/double</td><td>double</td><td><code>&lt;cmath&gt;</code></td><td>⭐⭐⭐</td></tr><tr><td><code>abs(T)</code> (C++11)</td><td>任意数值类型</td><td>对应类型</td><td><code>&lt;cmath&gt;</code></td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><hr><h2 id="七、记忆技巧"><a href="#七、记忆技巧" class="headerlink" title="七、记忆技巧"></a>七、记忆技巧</h2><h3 id="记忆口诀"><a href="#记忆口诀" class="headerlink" title="记忆口诀"></a>记忆口诀</h3><pre class="line-numbers language-none"><code class="language-none">整数 abs，浮点 fabsC++11 后都用 abs小心溢出 INT_MIN竞赛直接 abs 最稳<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="推荐使用方式"><a href="#推荐使用方式" class="headerlink" title="推荐使用方式"></a>推荐使用方式</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// C++11 后统一用 abs()，编译器自动识别类型</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// int</span><span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// long long</span><span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="八、完整示例代码"><a href="#八、完整示例代码" class="headerlink" title="八、完整示例代码"></a>八、完整示例代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. 整数绝对值</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"abs(-10) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 10</span>        <span class="token comment">// 2. long long 绝对值</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123456789LL</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"abs(-123456789LL) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 123456789</span>        <span class="token comment">// 3. 浮点数绝对值</span>    <span class="token keyword">double</span> z <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14159</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"abs(-3.14159) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 3.14159</span>        <span class="token comment">// 4. 计算差值</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"差值 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 10</span>        <span class="token comment">// 5. 注意溢出（正确做法）</span>    <span class="token keyword">int</span> min_val <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"abs(INT_MIN) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>min_val<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// 6. 曼哈顿距离</span>    <span class="token keyword">int</span> x1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"曼哈顿距离 = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">abs</span><span class="token punctuation">(</span>x1<span class="token operator">-</span>x2<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span>y1<span class="token operator">-</span>y2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 7</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="九、常见错误示例"><a href="#九、常见错误示例" class="headerlink" title="九、常见错误示例"></a>九、常见错误示例</h2><h3 id="错误1：浮点数用错函数"><a href="#错误1：浮点数用错函数" class="headerlink" title="错误1：浮点数用错函数"></a>错误1：浮点数用错函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 错误</span><span class="token keyword">double</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可能得到 3，小数丢失</span><span class="token comment">// ✅ 正确</span><span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.14（C++11）</span><span class="token comment">// 或</span><span class="token keyword">double</span> result <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误2：溢出未处理"><a href="#错误2：溢出未处理" class="headerlink" title="错误2：溢出未处理"></a>错误2：溢出未处理</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 危险</span><span class="token keyword">int</span> x <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 未定义行为</span><span class="token comment">// ✅ 安全</span><span class="token keyword">long</span> <span class="token keyword">long</span> result <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="错误3：重复计算"><a href="#错误3：重复计算" class="headerlink" title="错误3：重复计算"></a>错误3：重复计算</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 低效</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> <span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// ✅ 高效</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> diff<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li><strong>C++11 及以后</strong>：统一使用 <code>abs()</code>，简单好记，编译器自动处理类型</li><li><strong>注意整数溢出</strong>：<code>INT_MIN</code> 的绝对值会溢出，需要转换为 <code>long long</code></li><li><strong>算法竞赛</strong>：<code>#include &lt;bits/stdc++.h&gt;</code> + <code>abs()</code> 搞定一切</li><li><strong>避免重复计算</strong>：将绝对值结果存储在变量中，不要重复调用</li><li><strong>浮点数</strong>：C++11 后用 <code>abs()</code> 或 <code>fabs()</code> 都可以</li></ol><h3 id="何时使用何种函数"><a href="#何时使用何种函数" class="headerlink" title="何时使用何种函数"></a>何时使用何种函数</h3><ul><li>✅ <strong>一般情况</strong>：直接用 <code>abs()</code>（C++11）</li><li>✅ <strong>明确是浮点数</strong>：用 <code>fabs()</code> 或 <code>abs()</code></li><li>⚠️ <strong>可能溢出</strong>：先转换为 <code>long long</code> 再用 <code>abs()</code></li><li>⚠️ <strong>C++98/03</strong>：整数用 <code>abs()</code>/<code>labs()</code>/<code>llabs()</code>，浮点用 <code>fabs()</code></li></ul><h3 id="快速查询表"><a href="#快速查询表" class="headerlink" title="快速查询表"></a>快速查询表</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 推荐写法（C++11）</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token comment">// int</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5LL</span><span class="token punctuation">)</span>      <span class="token comment">// long long  </span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3.14</span><span class="token punctuation">)</span>     <span class="token comment">// double</span><span class="token comment">// 注意溢出</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>INT_MIN<span class="token punctuation">)</span>  <span class="token comment">// 安全</span><span class="token comment">// 旧版本兼容</span><span class="token function">abs</span><span class="token punctuation">(</span>int_val<span class="token punctuation">)</span>       <span class="token comment">// int</span><span class="token function">labs</span><span class="token punctuation">(</span>long_val<span class="token punctuation">)</span>     <span class="token comment">// long</span><span class="token function">llabs</span><span class="token punctuation">(</span>ll_val<span class="token punctuation">)</span>      <span class="token comment">// long long</span><span class="token function">fabs</span><span class="token punctuation">(</span>double_val<span class="token punctuation">)</span>   <span class="token comment">// double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>绝对值函数虽然看起来简单，但在实际使用中有不少细节需要注意。特别是整数溢出的问题，我自己就因为这个在比赛中吃过亏。</p><p>希望这篇文章能帮助大家避开这些坑，在刷题和比赛中更加得心应手！</p><p>如果有任何问题或者补充，欢迎在评论区讨论～</p><p><strong>祝大家刷题顺利！</strong> 💪✨</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/</summary>
      
    
    
    
    
    <category term="算法学习" scheme="https://ke-tan.asia/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-17-C++输入输出加速详解</title>
    <link href="https://ke-tan.asia/2025/10/17/2025-10-17-C++%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%8A%A0%E9%80%9F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://ke-tan.asia/2025/10/17/2025-10-17-C++%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E5%8A%A0%E9%80%9F%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-10-16T16:00:00.000Z</published>
    <updated>2025-10-17T02:37:22.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://blog.csdn.net/qq_45537774/article/details/106111199">C++ cin/cout加速 - CSDN博客</a></li><li><a href="https://oi-wiki.org/lang/csl/io/">输入输出优化 - OI Wiki</a></li><li><a href="https://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio">std::ios_base::sync_with_stdio - cppreference</a></li></ul></blockquote><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在刷算法题的时候，经常看到大佬们的代码里都会加这么几行：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一开始我也不太明白这是干什么的，只是机械地复制粘贴。后来遇到一道题，数据量特别大，不加这几行就TLE（超时），加了就AC了。这才意识到这几行代码的重要性，于是专门学习了一下。</p><p>今天就来详细讲讲这三行”魔法代码”到底是什么，为什么能加速，以及使用时要注意什么。</p><hr><h2 id="为什么需要加速？"><a href="#为什么需要加速？" class="headerlink" title="为什么需要加速？"></a>为什么需要加速？</h2><p>在C++中，有两套输入输出系统：</p><table><thead><tr><th>类型</th><th>函数</th><th>特点</th></tr></thead><tbody><tr><td><strong>C风格</strong></td><td><code>scanf</code>, <code>printf</code></td><td>速度快 ⚡</td></tr><tr><td><strong>C++风格</strong></td><td><code>cin</code>, <code>cout</code></td><td>速度慢 🐌</td></tr></tbody></table><p><strong>为什么cin/cout会慢？</strong></p><p>默认情况下，cin/cout为了兼容C语言的scanf/printf，做了很多额外的同步工作。这导致在处理大量数据时，cin/cout可能比scanf/printf慢2-3倍！</p><p><strong>举个例子：</strong></p><p>假设要读入100万个整数：</p><ul><li>用<code>scanf</code>：可能只需要0.3秒</li><li>用<code>cin</code>（不加速）：可能需要1秒</li><li>用<code>cin</code>（加速后）：也能达到0.3秒左右</li></ul><p>在算法竞赛中，0.7秒的差距可能就是AC和TLE的区别！</p><hr><h2 id="三行代码详解"><a href="#三行代码详解" class="headerlink" title="三行代码详解"></a>三行代码详解</h2><h3 id="第一行：ios-sync-with-stdio-0"><a href="#第一行：ios-sync-with-stdio-0" class="headerlink" title="第一行：ios::sync_with_stdio(0)"></a>第一行：<code>ios::sync_with_stdio(0)</code></h3><h4 id="作用：取消C-C-流的同步"><a href="#作用：取消C-C-流的同步" class="headerlink" title="作用：取消C/C++流的同步"></a>作用：取消C/C++流的同步</h4><p><strong>默认情况（sync = true）：</strong></p><p>C++的cin/cout和C的scanf/printf是<strong>同步</strong>的，这意味着：</p><ul><li>✅ 可以随意混用两种输入输出方式</li><li>❌ 但cin/cout要保持与scanf/printf的同步，会变慢</li></ul><p><strong>设置为false后：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者简写为</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>✅ cin/cout速度大幅提升，接近scanf/printf</li><li>❌ <strong>不能再混用</strong>cin/cout和scanf/printf</li></ul><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ❌ 错误用法：混用导致问题</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>           <span class="token comment">// C++风格</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// C风格 - 不能这样！</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// C风格 - 不能这样！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// ✅ 正确用法：统一用C++风格</span>ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="形象比喻"><a href="#形象比喻" class="headerlink" title="形象比喻"></a>形象比喻</h4><p>想象有两条传送带：</p><p><strong>同步模式（默认）：</strong></p><pre class="line-numbers language-none"><code class="language-none">C传送带   ─┐           ├─→ 合并成一条，能混用但慢C++传送带 ─┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>不同步模式（加速）：</strong></p><pre class="line-numbers language-none"><code class="language-none">C传送带   ──→ 各走各的，快但不能混用C++传送带 ──→<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="第二行：cin-tie-0"><a href="#第二行：cin-tie-0" class="headerlink" title="第二行：cin.tie(0)"></a>第二行：<code>cin.tie(0)</code></h3><h4 id="作用：解除cin与cout的绑定"><a href="#作用：解除cin与cout的绑定" class="headerlink" title="作用：解除cin与cout的绑定"></a>作用：解除cin与cout的绑定</h4><p><strong>默认情况（绑定）：</strong></p><p>cin和cout是<strong>绑定</strong>在一起的。每次使用cin输入之前，会<strong>自动刷新cout的缓冲区</strong>。</p><p>这是为了保证交互式程序的正确性：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入你的年龄："</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> age<span class="token punctuation">;</span>  <span class="token comment">// 输入前会先把"请输入你的年龄："显示出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解除绑定后：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者简写为</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>✅ 不再自动刷新cout，速度更快</li><li>⚠️ 对于大多数算法题没有影响</li><li>⚠️ 交互题可能需要手动刷新</li></ul><h4 id="什么时候需要手动刷新？"><a href="#什么时候需要手动刷新？" class="headerlink" title="什么时候需要手动刷新？"></a>什么时候需要手动刷新？</h4><p>对于<strong>交互题</strong>（需要实时输入输出的题目），可能需要：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> answer <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// endl会自动刷新</span><span class="token comment">// 或者</span>cout <span class="token operator">&lt;&lt;</span> answer <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 手动刷新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="速度提升原理"><a href="#速度提升原理" class="headerlink" title="速度提升原理"></a>速度提升原理</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 默认情况（绑定）</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token comment">// 输出</span>    cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>          <span class="token comment">// 输入前自动刷新cout（慢！）</span><span class="token punctuation">}</span><span class="token comment">// 解除绑定后</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>  <span class="token comment">// 输出</span>    cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>          <span class="token comment">// 不会自动刷新（快！）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="第三行：cout-tie-0"><a href="#第三行：cout-tie-0" class="headerlink" title="第三行：cout.tie(0)"></a>第三行：<code>cout.tie(0)</code></h3><h4 id="作用：解除cout的绑定"><a href="#作用：解除cout的绑定" class="headerlink" title="作用：解除cout的绑定"></a>作用：解除cout的绑定</h4><p><strong>真相：这行基本没用！</strong></p><p>cout默认就<strong>没有绑定</strong>任何流，所以这行代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写不写都一样，不会有任何性能提升。</p><h4 id="为什么很多人还写？"><a href="#为什么很多人还写？" class="headerlink" title="为什么很多人还写？"></a>为什么很多人还写？</h4><p>主要有两个原因：</p><ol><li><strong>习惯性</strong>：复制模板时一起复制了</li><li><strong>求心理安慰</strong>：反正写了也没坏处</li></ol><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><p><strong>可以不写！</strong> 但写了也不会出错，看个人习惯。</p><hr><h2 id="完整使用模板"><a href="#完整使用模板" class="headerlink" title="完整使用模板"></a>完整使用模板</h2><h3 id="标准竞赛模板"><a href="#标准竞赛模板" class="headerlink" title="标准竞赛模板"></a>标准竞赛模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 输入输出加速</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cout.tie(nullptr);  // 这行可以省略</span>        <span class="token comment">// 你的代码</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token comment">// 用 \n 代替 endl（更快）</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简化写法（逗号表达式）"><a href="#简化写法（逗号表达式）" class="headerlink" title="简化写法（逗号表达式）"></a>简化写法（逗号表达式）</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 你的代码</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法利用了C++的逗号表达式，三个语句会依次执行，效果完全相同。</p><hr><h2 id="性能对比测试"><a href="#性能对比测试" class="headerlink" title="性能对比测试"></a>性能对比测试</h2><p>我自己测试了一下，读入100万个整数的耗时：</p><table><thead><tr><th>方法</th><th>耗时</th><th>相对速度</th></tr></thead><tbody><tr><td><code>scanf/printf</code></td><td>0.28秒</td><td>基准（最快）⚡⚡⚡</td></tr><tr><td><code>cin/cout</code>（不加速）</td><td>0.89秒</td><td>慢3倍 🐌</td></tr><tr><td><code>cin/cout</code>（加速）</td><td>0.31秒</td><td>接近scanf ⚡⚡⚡</td></tr></tbody></table><p>可以看到，加速后的cin/cout已经非常接近scanf/printf了！</p><hr><h2 id="注意事项与常见错误"><a href="#注意事项与常见错误" class="headerlink" title="注意事项与常见错误"></a>注意事项与常见错误</h2><h3 id="⚠️-注意1：不能混用C-C-输入输出"><a href="#⚠️-注意1：不能混用C-C-输入输出" class="headerlink" title="⚠️ 注意1：不能混用C/C++输入输出"></a>⚠️ 注意1：不能混用C/C++输入输出</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ✅ 可以这样</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span><span class="token comment">// ❌ 不能这样</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误！输出可能乱序</span><span class="token comment">// ❌ 也不能这样</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误！</span>cout <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span><span class="token comment">// ❌ getchar也不行</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 错误！getchar是C函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>记住：加了加速后，只能用cin/cout，不能用任何C风格的输入输出函数！</strong></p><h3 id="⚠️-注意2：用-n代替endl"><a href="#⚠️-注意2：用-n代替endl" class="headerlink" title="⚠️ 注意2：用\n代替endl"></a>⚠️ 注意2：用<code>\n</code>代替<code>endl</code></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 推荐写法（快）</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment">// 不推荐写法（慢）</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因：</strong> <code>endl</code>会强制刷新缓冲区，而<code>\n</code>不会。在循环中大量使用<code>endl</code>会严重影响性能。</p><h3 id="⚠️-注意3：数据量小时可以不加"><a href="#⚠️-注意3：数据量小时可以不加" class="headerlink" title="⚠️ 注意3：数据量小时可以不加"></a>⚠️ 注意3：数据量小时可以不加</h3><ul><li><strong>数据量 &lt; 10,000</strong>：加不加都行，差别不大</li><li><strong>数据量 &gt; 100,000</strong>：建议加上</li><li><strong>数据量 &gt; 1,000,000</strong>：必须加，否则可能TLE</li></ul><h3 id="⚠️-注意4：交互题要小心"><a href="#⚠️-注意4：交互题要小心" class="headerlink" title="⚠️ 注意4：交互题要小心"></a>⚠️ 注意4：交互题要小心</h3><p>对于需要实时交互的题目（比如猜数字游戏），可能需要手动刷新：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出后需要立即显示</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我猜50\n"</span><span class="token punctuation">;</span>cout<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 手动刷新</span>cin <span class="token operator">&gt;&gt;</span> response<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者对于交互题，干脆不加速：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 交互题可以不加这两行</span><span class="token comment">// ios::sync_with_stdio(false);</span><span class="token comment">// cin.tie(nullptr);</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"我猜50"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// endl会自动刷新</span>cin <span class="token operator">&gt;&gt;</span> response<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="案例1：大量数据读入"><a href="#案例1：大量数据读入" class="headerlink" title="案例1：大量数据读入"></a>案例1：大量数据读入</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 快速读入</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>  <span class="token comment">// 快速输出</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例2：多组测试数据"><a href="#案例2：多组测试数据" class="headerlink" title="案例2：多组测试数据"></a>案例2：多组测试数据</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> T<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>        cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span>        <span class="token comment">// 处理数据...</span>        cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="三行代码的作用总结"><a href="#三行代码的作用总结" class="headerlink" title="三行代码的作用总结"></a>三行代码的作用总结</h3><table><thead><tr><th>代码</th><th>作用</th><th>重要性</th><th>副作用</th></tr></thead><tbody><tr><td><code>ios::sync_with_stdio(false)</code></td><td>取消C/C++流同步</td><td>⭐⭐⭐ 很重要</td><td>不能混用scanf/printf</td></tr><tr><td><code>cin.tie(nullptr)</code></td><td>解除cin与cout绑定</td><td>⭐⭐ 有用</td><td>交互题需要注意</td></tr><tr><td><code>cout.tie(nullptr)</code></td><td>解除cout绑定</td><td>⭐ 基本没用</td><td>无</td></tr></tbody></table><h3 id="记忆口诀"><a href="#记忆口诀" class="headerlink" title="记忆口诀"></a>记忆口诀</h3><pre class="line-numbers language-none"><code class="language-none">sync 同步关，cin cout 更快跑tie 绑定解，输入输出不等待cout.tie 没啥用，写不写都无所谓<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="什么时候使用？"><a href="#什么时候使用？" class="headerlink" title="什么时候使用？"></a>什么时候使用？</h3><ul><li>✅ <strong>算法竞赛</strong>：基本上都要加</li><li>✅ <strong>大数据量题目</strong>（n &gt; 100,000）：必须加</li><li>⚠️ <strong>交互题</strong>：谨慎使用，可能需要手动刷新</li><li>❌ <strong>小数据量题目</strong>（n &lt; 10,000）：可以不加</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 标准竞赛模板</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 记住：</span>    <span class="token comment">// 1. 只用 cin/cout，不用 scanf/printf</span>    <span class="token comment">// 2. 用 \n 代替 endl</span>    <span class="token comment">// 3. 不要混用 C/C++ 输入输出</span>        <span class="token comment">// 你的代码...</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_45537774/</summary>
      
    
    
    
    
    <category term="算法学习" scheme="https://ke-tan.asia/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-15-浏览器批量下载文件的方法</title>
    <link href="https://ke-tan.asia/2025/10/15/2025-10-15-python%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E4%B8%8Emap%E5%87%BD%E6%95%B0/"/>
    <id>https://ke-tan.asia/2025/10/15/2025-10-15-python%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F%E4%B8%8Emap%E5%87%BD%E6%95%B0/</id>
    <published>2025-10-14T16:00:00.000Z</published>
    <updated>2025-10-15T10:47:49.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-10-15-浏览器批量下载文件的方法"><a href="#2025-10-15-浏览器批量下载文件的方法" class="headerlink" title="2025-10-15-浏览器批量下载文件的方法"></a>2025-10-15-浏览器批量下载文件的方法</h1><blockquote><p>参考资料<br><a href="https://blog.csdn.net/m0_45447650/article/details/125786723">wget 的安装与使用（Windows）</a><br><a href="https://www.reddit.com/r/techsupport/comments/1dsuawu/how_can_i_massdownload_all_the_files_in_the_links/?tl=zh-hans">我怎样才能批量下载一个网站链接里的所有文件？</a></p></blockquote><p>今天在下载课资料时,遇到了单个页面有多个文件资源链接需要批量下载的问题,通过查找资料,总结了以下几种方法:</p><h2 id="方法一-使用浏览器扩展插件"><a href="#方法一-使用浏览器扩展插件" class="headerlink" title="方法一: 使用浏览器扩展插件"></a>方法一: 使用浏览器扩展插件</h2><ul><li><p>浏览器插件:Instant Data Scraper:可以自动从任何网页中提取数据并导出为 Excel 或 CSV 文件。<a href="https://chromewebstore.google.com/detail/instant-data-scraper/ofaokhiedipichpaobibbnahnkdoiiah?hl=zh-CN">下载链接</a></p></li><li><p>下载软件:IDM或者JDownloader 2</p></li></ul><p>这里有两种思路,一种是将csv文件中的链接列全部复制,通过下载软件的通过剪贴板批量下载的功能进行批量下载,另一种是将对应的链接转化为csv格式的文件,再使用ai编写对应的下载的脚本</p><p>这里我只介绍第一种思路下载软件通过剪贴板批量下载的思路</p><ol><li><p>使用Instant Data Scraper插件,提取网页中的链接,并选中和复制链接相关列<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760523559939.png" alt="1760523559939.png"></p></li><li><p>打开下载软件,在设置中找到“通过剪贴板监控”或类似选项,并启用它</p></li></ol><ul><li><p>IDM:任务-&gt;从剪贴板中添加批量下载<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760525166362.png" alt="1760525166362.png"></p></li><li><p>JDownloader 2:链接抓取器-&gt;ctrl+v 粘贴剪贴板内容<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760523940222.png" alt="1760523940222.png"></p></li></ul><p>右键开始所有下载</p><p><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760524005163.png" alt="1760524005163.png"></p><h2 id="方法二-使用wget-r-命令批量下载"><a href="#方法二-使用wget-r-命令批量下载" class="headerlink" title="方法二:使用wget -r 命令批量下载"></a>方法二:使用wget -r 命令批量下载</h2><p>需要网站有robots.txt文件,且允许爬取,深度学习的数据集相关网站一般都允许爬取</p><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-c</span> https://cdn.nohesi.gg/cars/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-c 选项表示断点续传<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760522349155.png" alt="1760522349155.png"></p><p>如果你有更好的方法,欢迎在评论区留言分享</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-10-15-浏览器批量下载文件的方法&quot;&gt;&lt;a href=&quot;#2025-10-15-浏览器批量下载文件的方法&quot; class=&quot;headerlink&quot; title=&quot;2025-10-15-浏览器批量下载文件的方法&quot;&gt;&lt;/a&gt;2025-10-15-浏览器批量下</summary>
      
    
    
    
    
    <category term="问题解决" scheme="https://ke-tan.asia/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-15-python列表推导式与map函数</title>
    <link href="https://ke-tan.asia/2025/10/15/2025-10-15-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://ke-tan.asia/2025/10/15/2025-10-15-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2025-10-14T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:01.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-10-15-python列表推导式与map函数"><a href="#2025-10-15-python列表推导式与map函数" class="headerlink" title="2025-10-15-python列表推导式与map函数"></a>2025-10-15-python列表推导式与map函数</h1><h2 id="map函数-vs-列表推导式"><a href="#map函数-vs-列表推导式" class="headerlink" title="map函数 vs 列表推导式"></a>map函数 vs 列表推导式</h2><h2 id="1-map函数"><a href="#1-map函数" class="headerlink" title="1. map函数"></a>1. map函数</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">map</span><span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将字符串列表转换为整数列表</span>str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span>int_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> str_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 4]</span><span class="token comment"># 多个可迭代对象</span>nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># [5, 7, 9]</span><span class="token comment"># 在输入处理中的应用</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输入 "10 20"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 10 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="map函数的特点"><a href="#map函数的特点" class="headerlink" title="map函数的特点"></a>map函数的特点</h3><ul><li><strong>惰性求值</strong>：返回的是迭代器，不是列表</li><li><strong>需要显式转换</strong>：通常需要用 <code>list()</code> 转换为列表</li><li><strong>函数式编程风格</strong>：更函数式，更简洁</li></ul><h2 id="2-列表推导式"><a href="#2-列表推导式" class="headerlink" title="2. 列表推导式"></a>2. 列表推导式</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span>expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将字符串列表转换为整数列表</span>str_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span>int_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> str_list<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 4]</span><span class="token comment"># 带条件的转换</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span>int_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> numbers <span class="token keyword">if</span> x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>int_list<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3]</span><span class="token comment"># 多个变量的情况</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 输入 "10 20"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment"># 10 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表推导式的特点"><a href="#列表推导式的特点" class="headerlink" title="列表推导式的特点"></a>列表推导式的特点</h3><ul><li><strong>立即求值</strong>：直接返回列表</li><li><strong>更Pythonic</strong>：被认为是更符合Python风格的写法</li><li><strong>功能更强大</strong>：可以包含条件判断</li></ul><h2 id="3-对比示例"><a href="#3-对比示例" class="headerlink" title="3. 对比示例"></a>3. 对比示例</h2><h3 id="相同的功能，不同的写法"><a href="#相同的功能，不同的写法" class="headerlink" title="相同的功能，不同的写法"></a>相同的功能，不同的写法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将字符串列表转换为整数</span>strings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">]</span><span class="token comment"># 使用map</span>result1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> strings<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用列表推导式</span>result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> strings<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 4]</span><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span>  <span class="token comment"># [1, 2, 3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timedata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># map函数</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>result1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token comment"># 列表推导式</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span>time2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"map 用时: </span><span class="token interpolation"><span class="token punctuation">{</span>time1<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">秒"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"列表推导式 用时: </span><span class="token interpolation"><span class="token punctuation">{</span>time2<span class="token punctuation">:</span><span class="token format-spec">.4f</span><span class="token punctuation">}</span></span><span class="token string">秒"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实际应用场景"><a href="#4-实际应用场景" class="headerlink" title="4. 实际应用场景"></a>4. 实际应用场景</h2><h3 id="适合使用map的情况"><a href="#适合使用map的情况" class="headerlink" title="适合使用map的情况"></a>适合使用map的情况</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 简单的类型转换</span>numbers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"1.1"</span><span class="token punctuation">,</span> <span class="token string">"2.2"</span><span class="token punctuation">,</span> <span class="token string">"3.3"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用内置函数</span>words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">]</span>lengths <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 函数式编程场景</span><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>squares <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适合使用列表推导式的情况"><a href="#适合使用列表推导式的情况" class="headerlink" title="适合使用列表推导式的情况"></a>适合使用列表推导式的情况</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 需要条件过滤</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 复杂的表达式</span>result <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 嵌套循环</span>pairs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-在输入处理中的具体应用"><a href="#5-在输入处理中的具体应用" class="headerlink" title="5. 在输入处理中的具体应用"></a>5. 在输入处理中的具体应用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取多个数字</span><span class="token comment"># 输入: "1 2 3 4 5"</span>data <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 或者</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 读取多行数据</span>n <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 两种写法都可以</span>    <span class="token comment"># a, b = map(int, input().split())</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-选择建议"><a href="#6-选择建议" class="headerlink" title="6. 选择建议"></a>6. 选择建议</h2><ul><li><strong>简单转换</strong>：两者都可以，看个人喜好</li><li><strong>需要条件过滤</strong>：优先选择列表推导式</li><li><strong>函数式编程</strong>：优先选择map</li><li><strong>可读性</strong>：列表推导式通常更易读</li><li><strong>性能</strong>：在大多数情况下差异不大，map稍快一些</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-10-15-python列表推导式与map函数&quot;&gt;&lt;a href=&quot;#2025-10-15-python列表推导式与map函数&quot; class=&quot;headerlink&quot; title=&quot;2025-10-15-python列表推导式与map函数&quot;&gt;&lt;/a&gt;20</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）</title>
    <link href="https://ke-tan.asia/2025/10/14/2025-10-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%EF%BC%88Telnet%EF%BC%89/"/>
    <id>https://ke-tan.asia/2025/10/14/2025-10-14-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%EF%BC%88Telnet%EF%BC%89/</id>
    <published>2025-10-13T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:01.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）"><a href="#2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）" class="headerlink" title="2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）"></a>2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）</h1><h2 id="一、实验目标"><a href="#一、实验目标" class="headerlink" title="一、实验目标"></a>一、实验目标</h2><p>掌握：</p><ol><li>交换机的不同模式切换</li><li>交换机的基本配置（改名、设密码、查看配置）</li><li>交换机接口和 VLAN 配置</li><li>通过 telnet 登录交换机</li></ol><h2 id="二、实验拓扑"><a href="#二、实验拓扑" class="headerlink" title="二、实验拓扑"></a>二、实验拓扑</h2><p> <strong>连接关系：</strong></p><pre class="line-numbers language-none"><code class="language-none">PC2 &lt;—— 直通线 ——&gt; Switch0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>IP 地址分配（举例学号末两位为 55）：</strong></p><table><thead><tr><th>设备</th><th>接口</th><th>IP 地址</th><th>子网掩码</th></tr></thead><tbody><tr><td>PC2</td><td>FastEthernet0</td><td>10.1.1.55</td><td>255.255.255.0</td></tr><tr><td>Switch0</td><td>VLAN1</td><td>10.1.1.65</td><td>255.255.255.0</td></tr></tbody></table><hr><h2 id="三、实验步骤与命令讲解"><a href="#三、实验步骤与命令讲解" class="headerlink" title="三、实验步骤与命令讲解"></a>三、实验步骤与命令讲解</h2><hr><h3 id="1️-模式切换练习"><a href="#1️-模式切换练习" class="headerlink" title="1️ 模式切换练习"></a><strong>1️ 模式切换练习</strong></h3><p>在交换机 CLI 中操作：</p><table><thead><tr><th>模式</th><th>提示符</th><th>进入命令</th><th>说明</th></tr></thead><tbody><tr><td>用户模式</td><td><code>Switch&gt;</code></td><td>——（开机默认）</td><td>只能查看基本信息</td></tr><tr><td>特权模式</td><td><code>Switch#</code></td><td><code>enable</code></td><td>可以查看和保存配置</td></tr><tr><td>全局配置模式</td><td><code>Switch(config)#</code></td><td><code>configure terminal</code></td><td>可以修改全局参数</td></tr><tr><td>接口配置模式</td><td><code>Switch(config-if)#</code></td><td><code>interface fastethernet0/1</code></td><td>配置具体端口参数</td></tr></tbody></table><p> 提示：</p><ul><li>输入 <code>?</code> 可以查看该模式下能用的命令</li><li><code>Ctrl+Z</code> 或 <code>end</code> 返回上一级</li><li><code>exit</code> 退出当前模式</li></ul><hr><h3 id="2️-修改交换机名称和设置口令"><a href="#2️-修改交换机名称和设置口令" class="headerlink" title="2️ 修改交换机名称和设置口令"></a><strong>2️ 修改交换机名称和设置口令</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Switch<span class="token operator">&gt;</span> <span class="token builtin class-name">enable</span>                          <span class="token comment"># 进入特权模式</span>Switch<span class="token comment"># configure terminal              # 进入全局配置模式</span>Switch<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># hostname Switch2950     # 修改主机名</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># enable secret cisco # 设置特权模式加密密码</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># line console 0      # 进入控制台配置</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># password cisco # 设置 console 口令</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># login          # 开启登录验证</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># exit</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># line vty 0 4        # 进入远程登录配置</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># password cisco # 设置 telnet 密码</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># login</span>Switch2950<span class="token punctuation">(</span>config-line<span class="token punctuation">)</span><span class="token comment"># exit</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># service password-encryption # 对明文密码加密</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>命令解释：</strong></p><ul><li><code>hostname</code>：修改设备名字</li><li><code>enable secret</code>：设置进入特权模式的加密密码</li><li><code>line console 0</code>：进入控制台口配置视图</li><li><code>line vty 0 4</code>：进入虚拟终端（Telnet）配置</li><li><code>login</code>：开启密码验证</li><li><code>service password-encryption</code>：对配置文件中的密码加密</li></ul><hr><h3 id="3️-配置接口与-VLAN-管理-IP"><a href="#3️-配置接口与-VLAN-管理-IP" class="headerlink" title="3️ 配置接口与 VLAN 管理 IP"></a><strong>3️ 配置接口与 VLAN 管理 IP</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Switch2950<span class="token comment"># configure terminal</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># interface vlan 1</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># ip address 10.1.1.65 255.255.255.0</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># no shutdown</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># exit</span>Switch2950<span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token comment"># interface fastethernet0/1</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># switchport mode access</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># switchport access vlan 1</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># no shutdown</span>Switch2950<span class="token punctuation">(</span>config-if<span class="token punctuation">)</span><span class="token comment"># end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>命令解释：</strong></p><ul><li><code>interface vlan 1</code>：进入 VLAN 1 接口配置，用作管理 IP</li><li><code>ip address</code>：设置 IP 地址</li><li><code>no shutdown</code>：开启接口（默认关闭）</li><li><code>switchport mode access</code>：指定为普通接入口（非 trunk）</li><li><code>switchport access vlan 1</code>：将该端口加入 VLAN 1</li></ul><hr><h3 id="4️-查看与保存配置"><a href="#4️-查看与保存配置" class="headerlink" title="4️ 查看与保存配置"></a><strong>4️ 查看与保存配置</strong></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Switch2950<span class="token comment"># show running-config     # 查看当前运行配置</span>Switch2950<span class="token comment"># copy running-config startup-config</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <strong>说明：</strong></p><ul><li><code>show running-config</code>：查看当前配置</li><li><code>copy running-config startup-config</code>：保存配置（否则重启后会丢失）</li></ul><hr><h3 id="5️-在-PC-上设置-IP"><a href="#5️-在-PC-上设置-IP" class="headerlink" title="5️ 在 PC 上设置 IP"></a><strong>5️ 在 PC 上设置 IP</strong></h3><p>在 <strong>PC2 → Desktop → IP Configuration</strong> 中设置：</p><pre class="line-numbers language-none"><code class="language-none">IP Address: 10.1.1.55Subnet Mask: 255.255.255.0Default Gateway: 10.1.1.65<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="6️-测试连通性"><a href="#6️-测试连通性" class="headerlink" title="6️ 测试连通性"></a><strong>6️ 测试连通性</strong></h3><p>在 PC 命令行输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">10.1</span>.1.65<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现：</p><pre class="line-numbers language-none"><code class="language-none">Reply from 10.1.1.65: bytes=32 time&lt;1ms TTL=255<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 表示配置成功。</p><hr><h3 id="7️-Telnet-登录验证（可选进阶）"><a href="#7️-Telnet-登录验证（可选进阶）" class="headerlink" title="7️ Telnet 登录验证（可选进阶）"></a><strong>7️ Telnet 登录验证（可选进阶）</strong></h3><ol><li><p>在 PC 命令行输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">10.1</span>.1.65<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入密码 <code>cisco</code></p></li><li><p>登录成功后输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">enable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>再输入特权密码（也是 <code>cisco</code>）</p></li></ol><p> 表示已通过 <strong>Telnet</strong> 远程管理交换机。</p><hr><h2 id="四、常用命令速查表"><a href="#四、常用命令速查表" class="headerlink" title="四、常用命令速查表"></a>四、常用命令速查表</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>进入特权模式</td><td><code>enable</code></td></tr><tr><td>进入全局配置</td><td><code>configure terminal</code></td></tr><tr><td>查看配置</td><td><code>show running-config</code></td></tr><tr><td>保存配置</td><td><code>copy running-config startup-config</code></td></tr><tr><td>修改设备名</td><td><code>hostname XXX</code></td></tr><tr><td>设置特权密码</td><td><code>enable secret 密码</code></td></tr><tr><td>设置 console 密码</td><td><code>line console 0</code> → <code>password 密码</code> → <code>login</code></td></tr><tr><td>设置 telnet 密码</td><td><code>line vty 0 4</code> → <code>password 密码</code> → <code>login</code></td></tr><tr><td>配置 VLAN IP</td><td><code>interface vlan 1</code> → <code>ip address X.X.X.X 255.255.255.0</code></td></tr><tr><td>启动接口</td><td><code>no shutdown</code></td></tr><tr><td>查看端口状态</td><td><code>show interfaces status</code></td></tr></tbody></table><hr><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><ul><li>网络拓扑图<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/1760449982508.png" alt="1760449982508.png"></li><li>PC2 ping 交换机成功<br><img src="http://t2z9ig7uo.hn-bkt.clouddn.com/blog/b4cfa67271e5d24d369a1ddc1491fddd.png" alt="b4cfa67271e5d24d369a1ddc1491fddd.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）&quot;&gt;&lt;a href=&quot;#2025-10-14-计算机网络实验二-交换机基本配置与远程登录（Telnet）&quot; class=&quot;headerlink&quot; title=&quot;2025-10-14-计</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-07-29-九格通用基础大模型环境配置</title>
    <link href="https://ke-tan.asia/2025/07/29/2025-07-29-%E4%B9%9D%E6%A0%BC%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://ke-tan.asia/2025/07/29/2025-07-29-%E4%B9%9D%E6%A0%BC%E9%80%9A%E7%94%A8%E5%9F%BA%E7%A1%80%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2025-07-28T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="九格通用基础大模型环境配置"><a href="#九格通用基础大模型环境配置" class="headerlink" title="九格通用基础大模型环境配置"></a><a href="https://www.osredm.com/jiuyuan/CPM-9G-8B" title="九格通用基础大模型">九格通用基础大模型</a>环境配置</h1><h1 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h1><p>启元九格大模型是由启元实验室联合清华大学、哈尔滨工业大学、中国科学院计算技术研究所、北京大学、南开大学等顶尖科研单位共同研发的高效模型。具备高效训练与推理、高效适配与部署的特点，支持多种自然语言处理（NLP）和多模态任务，包括文本问答、文本分类、机器翻译、文本摘要、图文理解等。模型有4B、7B、70B三种不同尺寸的基础语言模型，适配Nvidia GPU和昇腾NPU。环境配置方法和离线批量推理/在线多轮对话的示例代码均已开源。九格模型已经适配到910B npu，支持vllm离线推理和openai api访问。</p><h1 id="我的环境配置"><a href="#我的环境配置" class="headerlink" title="我的环境配置"></a>我的环境配置</h1><ul><li>python 3.10.16</li><li>cuda11.8</li></ul><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create <span class="token parameter variable">-n</span> fm9g4bv <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.10</span>.16conda activate fm9g4bvpip3 <span class="token function">install</span> torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><blockquote><p>这里克隆的是main分支,没有克隆-V后缀的分支，-V后缀的分支<br>有对应的推理和微调的代码以及requirements.txt文件<br><a href="https://www.osredm.com/jiuyuan/CPM-9G-8B/tree/FM9G-V/FM9G4B-V">-V分支的链接</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://osredm.com/p49102387/CPM-9G-8B.git<span class="token builtin class-name">cd</span> CPM-9G-8B<span class="token function">wget</span> https://github.com/vllm-project/vllm/releases/download/v0.10.0/vllm-0.10.0+cu118-cp38-abi3-manylinux1_x86_64.whl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建 requirements.txt文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">packaging</span><span class="token operator">==</span><span class="token number">23.2</span><span class="token assign-left variable">addict</span><span class="token operator">==</span><span class="token number">2.4</span>.0<span class="token assign-left variable">editdistance</span><span class="token operator">==</span><span class="token number">0.6</span>.2<span class="token assign-left variable">einops</span><span class="token operator">==</span><span class="token number">0.8</span>.0<span class="token assign-left variable">fairscale</span><span class="token operator">==</span><span class="token number">0.4</span>.0<span class="token assign-left variable">jsonlines</span><span class="token operator">==</span><span class="token number">4.0</span>.0<span class="token assign-left variable">markdown2</span><span class="token operator">==</span><span class="token number">2.4</span>.10<span class="token assign-left variable">matplotlib</span><span class="token operator">==</span><span class="token number">3.7</span>.4<span class="token assign-left variable">more_itertools</span><span class="token operator">==</span><span class="token number">10.1</span>.0<span class="token assign-left variable">nltk</span><span class="token operator">==</span><span class="token number">3.8</span>.1<span class="token assign-left variable">numpy</span><span class="token operator">==</span><span class="token number">1.24</span>.4<span class="token assign-left variable">opencv_python_headless</span><span class="token operator">==</span><span class="token number">4.5</span>.5.64<span class="token assign-left variable">openpyxl</span><span class="token operator">==</span><span class="token number">3.1</span>.2<span class="token assign-left variable">Pillow</span><span class="token operator">==</span><span class="token number">10.1</span>.0<span class="token assign-left variable">sacrebleu</span><span class="token operator">==</span><span class="token number">2.3</span>.2<span class="token assign-left variable">seaborn</span><span class="token operator">==</span><span class="token number">0.13</span>.0<span class="token assign-left variable">shortuuid</span><span class="token operator">==</span><span class="token number">1.0</span>.11<span class="token assign-left variable">spacy</span><span class="token operator">==</span><span class="token number">3.7</span>.2<span class="token assign-left variable">torch</span><span class="token operator">==</span><span class="token number">2.2</span>.0<span class="token assign-left variable">torchaudio</span><span class="token operator">==</span><span class="token number">2.2</span>.0<span class="token assign-left variable">torchvision</span><span class="token operator">==</span><span class="token number">0.17</span>.0<span class="token assign-left variable">timm</span><span class="token operator">==</span><span class="token number">0.9</span>.10<span class="token assign-left variable">tqdm</span><span class="token operator">==</span><span class="token number">4.66</span>.1<span class="token assign-left variable">protobuf</span><span class="token operator">==</span><span class="token number">4.25</span>.0<span class="token assign-left variable">typing_extensions</span><span class="token operator">==</span><span class="token number">4.8</span>.0<span class="token assign-left variable">uvicorn</span><span class="token operator">==</span><span class="token number">0.24</span>.0.post1<span class="token comment">#xformers==0.0.22.post7</span><span class="token comment">#flash_attn==2.3.4</span><span class="token assign-left variable">sentencepiece</span><span class="token operator">==</span><span class="token number">0.1</span>.99<span class="token assign-left variable">accelerate</span><span class="token operator">==</span><span class="token number">0.30</span>.1<span class="token assign-left variable">socksio</span><span class="token operator">==</span><span class="token number">1.0</span>.0gradiogradio_client<span class="token operator">&lt;</span>http://thunlp.oss-cn-qingdao.aliyuncs.com/multi_modal/never_delete/modelscope_studio-0.4.0.9-py3-none-any.whl<span class="token operator">&gt;</span>decordaiosignaltensorboard<span class="token assign-left variable">deepspeed</span><span class="token operator">==</span><span class="token number">0.12</span>.3<span class="token assign-left variable">transformers</span><span class="token operator">==</span><span class="token number">4.44</span>.2<span class="token assign-left variable">librosa</span><span class="token operator">==</span><span class="token number">0.9</span>.0<span class="token assign-left variable">soundfile</span><span class="token operator">==</span><span class="token number">0.12</span>.1vector-quantize-pytorch<span class="token operator">==</span><span class="token number">1.18</span>.5<span class="token assign-left variable">vocos</span><span class="token operator">==</span><span class="token number">0.1</span>.0<span class="token assign-left variable">peft</span><span class="token operator">==</span><span class="token number">0.14</span>.0<span class="token assign-left variable">ninja</span><span class="token operator">==</span><span class="token number">1.11</span>.1.1moviepy <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txtpip <span class="token function">install</span> vllm-0.10.0+cu118-cp38-abi3-manylinux1_x86_64.whl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1753762025700image.png" alt="1753762025700image.png"></p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17537624515762025729.png" alt="17537624515762025729.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ckpt<span class="token builtin class-name">cd</span> cpkt<span class="token function">wget</span> https://thunlp-model.oss-cn-wulanchabu.aliyuncs.com/FM9G4B-V.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzf</span> FM9G4B-V.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="放置推理文件"><a href="#放置推理文件" class="headerlink" title="放置推理文件"></a>放置推理文件</h1><blockquote><p>后面可以尝试微调的，这里只试了推理的<br><a href="https://www.osredm.com/jiuyuan/CPM-9G-8B/tree/FM9G-V/FM9G4B-V/inference">所有分支-启元实验室/九格通用基础大模型</a></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="创建chat-py文件"><a href="#创建chat-py文件" class="headerlink" title="创建chat.py文件"></a>创建chat.py文件</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoModel<span class="token punctuation">,</span> AutoTokenizer<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""### 背景 ###        您需要对图片中的内容进行识别。        ### 输出格式 ###         您的输出由以下两部分组成，确保您的输出包含这两部分:        ### 思考 ###        考虑饮料外的标识，辨别饮料的种类，饮料容器。并且识别饮料为'有糖'或者'无糖'，给出你的思考过程。        ### 识别结果 ###         若图中出现了饮料，请以json形式从左到右对他们进行描述，包括饮料：种类，是否有糖，饮料容器。    """</span></span>    model_file <span class="token operator">=</span> <span class="token string">'ckpt/FM9G4B-V'</span> <span class="token comment">### 这里要改成你的bin文件对应的*目录*</span>    model <span class="token operator">=</span> AutoModel<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> trust_remote_code<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        attn_implementation<span class="token operator">=</span><span class="token string">'sdpa'</span><span class="token punctuation">,</span> torch_dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>bfloat16<span class="token punctuation">)</span>    model <span class="token operator">=</span> model<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_file<span class="token punctuation">,</span> trust_remote_code<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'step.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>    msgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>image<span class="token punctuation">,</span> prompt<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> model<span class="token punctuation">.</span>chat<span class="token punctuation">(</span>        image<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        msgs<span class="token operator">=</span>msgs<span class="token punctuation">,</span>        tokenizer<span class="token operator">=</span>tokenizer    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment"># 第二轮聊天，传递多轮对话的历史信息</span>    msgs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    msgs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"图中有几个箱子?"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    answer <span class="token operator">=</span> model<span class="token punctuation">.</span>chat<span class="token punctuation">(</span>        image<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        msgs<span class="token operator">=</span>msgs<span class="token punctuation">,</span>        tokenizer<span class="token operator">=</span>tokenizer    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>    <span class="token comment">## 流式输出，设置：</span>    <span class="token comment"># sampling=True</span>    <span class="token comment"># stream=True</span>    <span class="token comment">## 返回一个生成器</span>    msgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>image<span class="token punctuation">,</span> prompt<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> model<span class="token punctuation">.</span>chat<span class="token punctuation">(</span>        image<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>        msgs<span class="token operator">=</span>msgs<span class="token punctuation">,</span>        tokenizer<span class="token operator">=</span>tokenizer<span class="token punctuation">,</span>        sampling<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        stream<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    generated_text <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> new_text <span class="token keyword">in</span> res<span class="token punctuation">:</span>        generated_text <span class="token operator">+=</span> new_text        <span class="token keyword">print</span><span class="token punctuation">(</span>new_text<span class="token punctuation">,</span> flush<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="加入setup-jpg文件"><a href="#加入setup-jpg文件" class="headerlink" title="加入setup.jpg文件"></a>加入setup.jpg文件</h1><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/175376247066220257292.png" alt="175376247066220257292.png"></p><p>运行推理</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python chat.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="推理结果"><a href="#推理结果" class="headerlink" title="推理结果"></a>推理结果</h1><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1753763153738981067d09c329dc48c5077992a5067e4.png" alt="1753763153738981067d09c329dc48c5077992a5067e4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;九格通用基础大模型环境配置&quot;&gt;&lt;a href=&quot;#九格通用基础大模型环境配置&quot; class=&quot;headerlink&quot; title=&quot;九格通用基础大模型环境配置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.osredm.com/jiuyuan/CPM-9G-</summary>
      
    
    
    
    
    <category term="问题解决" scheme="https://ke-tan.asia/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>2025-07-03-拯救我的“高烧”战友——Y7000P 2024 版清灰换硅脂记录</title>
    <link href="https://ke-tan.asia/2025/07/03/2025-07-03-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E2%80%9C%E9%AB%98%E7%83%A7%E2%80%9D%E6%88%98%E5%8F%8B%E2%80%94%E2%80%94Y7000P%202024%E7%89%88%E6%B8%85%E7%81%B0%E6%8D%A2%E7%A1%85%E8%84%82%E8%AE%B0%E5%BD%95/"/>
    <id>https://ke-tan.asia/2025/07/03/2025-07-03-%E6%8B%AF%E6%95%91%E6%88%91%E7%9A%84%E2%80%9C%E9%AB%98%E7%83%A7%E2%80%9D%E6%88%98%E5%8F%8B%E2%80%94%E2%80%94Y7000P%202024%E7%89%88%E6%B8%85%E7%81%B0%E6%8D%A2%E7%A1%85%E8%84%82%E8%AE%B0%E5%BD%95/</id>
    <published>2025-07-02T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-07-03-拯救我的“高烧”战友——Y7000P-2024-版清灰换硅脂记录"><a href="#2025-07-03-拯救我的“高烧”战友——Y7000P-2024-版清灰换硅脂记录" class="headerlink" title="2025-07-03-拯救我的“高烧”战友——Y7000P 2024 版清灰换硅脂记录"></a>2025-07-03-拯救我的“高烧”战友——Y7000P 2024 版清灰换硅脂记录</h1><blockquote><p>参考资料<br><a href="https://www.bilibili.com/video/BV1FJ411V7Ys/">【详细教程】联想拯救者 Y7000p 深度清灰 ＋ 更换硅脂_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/weixin_46050242/article/details/139240278">【清灰教程】联想拯救者 Y7000p(2018 款)拆机清灰教程 + 更换硅脂_y7000p 拆机教程图解-CSDN 博客</a></p><p><a href="https://blog.csdn.net/Mr__Wind/article/details/103442556">联想拯救者 Y7000P 拆机清灰学习_联想 y7000p 拆机图解-CSDN 博客</a></p></blockquote><h2 id="一、前言：我的战友，你“发烧”了"><a href="#一、前言：我的战友，你“发烧”了" class="headerlink" title="一、前言：我的战友，你“发烧”了"></a>一、前言：我的战友，你“发烧”了</h2><p>我的这台拯救者 Y7000P 2024 版，是去年入手的全能战友，陪我度过了无数个编码和游戏的日夜。然而，就在今天（2025 年 7 月 3 日），我发现它有点“力不从心”了。</p><p>最明显的感受是，玩跑深度学习项目或同时开多个任务时，风扇噪音堪比直升机起飞，时不时就来一次大卡顿。我把手放到键盘上方，那温度简直能煎鸡蛋了。很显然，积攒了一年的灰尘和原厂硅脂的干涸，已经让这套散热系统不堪重负。</p><p>为了让我的战友重回性能巅峰，也为了让自己的耳朵和手指能更舒服一些，我决定：自己动手，给它做一次彻底的“清肺手术”——清灰，并更换更高级的导热硅脂！</p><h2 id="二、准备工作：工欲善其事，必先利其器"><a href="#二、准备工作：工欲善其事，必先利其器" class="headerlink" title="二、准备工作：工欲善其事，必先利其器"></a>二、准备工作：工欲善其事，必先利其器</h2><p>在开始之前，充分的准备是成功的关键。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516136196281751613619085.png" alt="17516136196281751613619085.png"></p><p>这里找的网图，<a href="https://blog.csdn.net/weixin_46050242/article/details/139240278">图片来源</a></p><ul><li><p>工具类:</p></li><li><p>精密螺丝刀套装: 主要用到了 PH0 和 PH1 规格的十字口。</p></li><li><p>塑料撬棒/撬片: 拆机必备，避免大力出奇迹，把外壳刮花或弄断卡扣。</p></li><li><p>镊子: 用来插拔细小的风扇排线，比手指好用一百倍。</p></li><li><p>气吹/压缩空气罐 &amp; 刷子: 清理灰尘的主力军。</p></li><li><p>材料类:</p><ul><li>高性能导热硅脂: 我选择了口碑很好的 利民 TF7。它的导热系数高达 14W/m·K，而且不导电，对于新手来说更安全。</li><li>硅脂清洁剂: 准备了浓度 99% 的异丙醇（IPA）和无绒布以及刮子，用来完美擦除顽固的旧硅脂。</li></ul></li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516136376231751613636825.png" alt="17516136376231751613636825.png"></p><h2 id="三、实战操作：一场精密的“外科手术”"><a href="#三、实战操作：一场精密的“外科手术”" class="headerlink" title="三、实战操作：一场精密的“外科手术”"></a>三、实战操作：一场精密的“外科手术”</h2><h3 id="步骤-1：卸下-D-面，初见真容"><a href="#步骤-1：卸下-D-面，初见真容" class="headerlink" title="步骤 1：卸下 D 面，初见真容"></a>步骤 1：卸下 D 面，初见真容</h3><p>关机并断开所有电源！将笔记本翻过来，D 面朝上。拧下所有能看到的螺丝。</p><p>然后，用塑料撬片从散热口或边缘处找到一个突破口，小心地沿着缝隙划动，逐一解开内部的卡扣。</p><h3 id="步骤-2：拆卸散热模组"><a href="#步骤-2：拆卸散热模组" class="headerlink" title="步骤 2：拆卸散热模组"></a>步骤 2：拆卸散热模组</h3><p>首先用镊子小心地拔掉两个风扇的供电线并将 wifi 天线供电线的排线和散热模组分离。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516136607611751613660651.png" alt="17516136607611751613660651.png"><br><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516136736261751613672855.png" alt="17516136736261751613672855.png"></p><p>Y7000P 2024 版散热模组一共有两个风扇螺丝,铜色的,以及 7 个弹簧螺丝(只需要拧松就可以了,拆不下来),可以分几次、对角地拧松它们，这样可以均匀释放核心的压力。</p><p>图片中风扇螺丝我使用蓝色标号了,弹簧螺丝使用的红色标号</p><blockquote><p>注意 7 个弹簧螺丝都有对应的标号,2 号弹簧螺丝是被纸片遮住的,也要拧松才可以拆开散热模组</p></blockquote><h3 id="步骤-3：深度清洁"><a href="#步骤-3：深度清洁" class="headerlink" title="步骤 3：深度清洁"></a>步骤 3：深度清洁</h3><ol><li>清理灰尘： 用气吹和刷子，将散热鳍片和风扇叶片里积攒的“毛毡”彻底清理干净。看这成果，是不是很夸张？</li></ol><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516137956231751613795475.png" alt="17516137956231751613795475.png"><br><img src="/static/GIdvbfH6Wobib2xClkXcl3JYnah.jpg" alt="img"></p><p>出风口的塑料条也可以拆下来用刷子刷一下</p><ol><li>擦除旧硅脂： 用无绒布蘸取异丙醇，耐心、温柔地擦拭 CPU、GPU 核心以及散热铜管接触面。直到它们光亮如镜，没有任何残留。</li></ol><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516137886231751613787994.png" alt="17516137886231751613787994.png"><br><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516137956231751613795475.png" alt="17516137956231751613795475.png"></p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516138366251751613836286.png" alt="17516138366251751613836286.png"></p><h3 id="步骤-4：涂抹新硅脂"><a href="#步骤-4：涂抹新硅脂" class="headerlink" title="步骤 4：涂抹新硅脂"></a>步骤 4：涂抹新硅脂</h3><p>激动人心的时刻来了！我采用的是“X 型交叉法”，在 CPU 和 GPU 核心上分别画一个 X。对于 Y7000P 这种长方形的核心，这种方法能保证散热器压下去后，硅脂均匀覆盖整个核心。记住，量不在多，薄而均匀即可。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516138517681751613851630.png" alt="17516138517681751613851630.png"></p><h3 id="步骤-5：完美复原"><a href="#步骤-5：完美复原" class="headerlink" title="步骤 5：完美复原"></a>步骤 5：完美复原</h3><p>现在，我们倒序操作：</p><ol><li>将散热模组对准孔位装回，并按照螺丝旁标注的数字从小到大的顺序（1→2→3…），对角分次拧紧。</li><li>插回两个风扇的供电线。</li><li>重新整理 wifi 天线排线！</li><li>盖上后盖，先将卡扣一一按紧，再拧回所有螺丝。大功告成！</li></ol><h2 id="四、成果检验：脱胎换骨，冷静如初！"><a href="#四、成果检验：脱胎换骨，冷静如初！" class="headerlink" title="四、成果检验：脱胎换骨，冷静如初！"></a>四、成果检验：脱胎换骨，冷静如初！</h2><p>紧张又期待地按下开机键，电脑顺利点亮！接下来，是见证奇迹的时刻。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17516138696231751613869285.png" alt="17516138696231751613869285.png"></p><p>结果令人惊叹！直接上对比表格：</p><table><tr><td>测试项目 (Test Item)<br></td><td>清灰换硅脂前 (Before)<br></td><td>清灰换硅脂后 (After)<br></td><td>温度变化 (Delta)<br></td></tr><tr><td>待机温度 (CPU/GPU)<br></td><td>45 °C / 42 °C<br></td><td>35 °C / 33 °C<br></td><td>↓10°C / ↓9°C<br></td></tr></table><p>GPU 温度也下降了 10℃。主观感受上，风扇虽然仍在高速运转，但噪音比之前柔和了不少，键盘区域也只是温热，不再烫手。</p><p>如果你有任何问题，或者有更好的经验，欢迎在评论区留言交流！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-07-03-拯救我的“高烧”战友——Y7000P-2024-版清灰换硅脂记录&quot;&gt;&lt;a href=&quot;#2025-07-03-拯救我的“高烧”战友——Y7000P-2024-版清灰换硅脂记录&quot; class=&quot;headerlink&quot; title=&quot;2025-0</summary>
      
    
    
    
    
    <category term="问题解决" scheme="https://ke-tan.asia/tags/troubleshooting/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-08-大模型底层技术分析</title>
    <link href="https://ke-tan.asia/2025/06/08/2025-06-08-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>https://ke-tan.asia/2025/06/08/2025-06-08-%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</id>
    <published>2025-06-07T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大模型底层技术分析"><a href="#大模型底层技术分析" class="headerlink" title="大模型底层技术分析"></a>大模型底层技术分析</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://medium.com/@lmpo/mastering-llms-a-guide-to-decoding-algorithms-c90a48fd167b">Understanding LLM Decoding Strategies</a></li><li><a href="https://segmentfault.com/a/1190000046177208">最新「大模型简史」整理！从 Transformer（2017）到 DeepSeek-R1（2025）</a></li><li><a href="https://medium.com/@lmpo/%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E7%AE%80%E5%8F%B2-%E4%BB%8Etransformer-2017-%E5%88%B0deepseek-r1-2025-cc54d658fb43">大语言模型简史</a></li></ul></blockquote><h1 id="2025年大语言模型综述论文推荐"><a href="#2025年大语言模型综述论文推荐" class="headerlink" title="2025年大语言模型综述论文推荐"></a>2025年大语言模型综述论文推荐</h1><blockquote><ul><li><a href="https://github.com/luo-junyu/Awesome-Agent-Papers">Awesome Agent Papers GitHub Repository</a></li></ul></blockquote><p>以下是三篇 2025 年关于大语言模型的综述论文：</p><ol><li><h2 id="A-Survey-on-Large-Language-Models-with-some-Insights-on-their-Capabilities-and-Limitations"><a href="#A-Survey-on-Large-Language-Models-with-some-Insights-on-their-Capabilities-and-Limitations" class="headerlink" title="A Survey on Large Language Models with some Insights on their Capabilities and Limitations"></a><a href="https://arxiv.org/abs/2501.04040">A Survey on Large Language Models with some Insights on their Capabilities and Limitations</a></h2></li></ol><ul><li><strong>链接</strong> : <a href="https://arxiv.org/abs/2501.04040">arXiv:2501.04040</a></li><li><strong>内容概述</strong> :<br>该论文深入探讨 LLMs 的能力，包括文本生成、问答、翻译、摘要、常识推理、代码生成和数学计算，强调其接近人类水平的理解能力。研究分析了基于 Transformer 架构的模型（如 GPT、LLaMA），探讨了数据和计算规模的指数增长对性能的影响。论文还讨论了扩展机制（如参数量增加、上下文长度扩展）和架构策略（如多头注意力、层归一化）。此外，分析了 LLMs 的局限性，如高计算成本、事实错误（hallucination）和伦理问题。应用领域包括医疗（诊断辅助）、金融（风险评估）、教育（智能辅导）和法律（合同分析）。论文还探讨了链式推理（Chain-of-Thought, CoT）和路径推理（Path-of-Thought, PoT）能力，以及 LLM-modulo 框架的泛化性。</li><li><strong>贡献</strong> :</li><li>提供 LLMs 的全面能力与局限性分析，适合理解技术边界。</li><li>覆盖多领域应用，适合跨行业参考。</li><li>174 页的详尽内容，计划提交期刊的精简版，信息量丰富。</li></ul><ol start="2"><li><h2 id="Large-Language-Models-A-Survey"><a href="#Large-Language-Models-A-Survey" class="headerlink" title="Large Language Models: A Survey"></a><a href="https://arxiv.org/abs/2402.06196">Large Language Models: A Survey</a></h2></li></ol><ul><li><strong>链接</strong> : <a href="https://arxiv.org/abs/2402.06196">arXiv:2402.06196</a></li><li><strong>内容概述</strong> :<br>该论文是 2024 年初版的更新版本，综述了主流 LLMs（如 GPT、LLaMA、PaLM）的特性、贡献和局限性。研究讨论了构建和增强 LLMs 的技术，包括预训练、微调、分布式训练和高效推理。论文调研了用于训练、微调和评估的热门数据集（如 Common Crawl、The Pile），并回顾了广泛使用的评估指标（如 BLEU、ROUGE、Perplexity）。通过代表性基准测试（如 MMLU、GLUE）比较了多个 LLMs 的性能，分析了其在不同任务上的表现。论文还探讨了开放挑战，如计算效率、数据偏见和模型可解释性，以及未来研究方向（如多模态 LLMs、能源优化）。</li><li><strong>贡献</strong> :</li><li>提供 LLMs 的技术全景，涵盖架构、数据集和评估。</li><li>更新至 2025 年，包含最新模型和优化技术。</li><li>强调未来方向，适合预测技术趋势。</li></ul><ol start="3"><li><h2 id="Large-Language-Model-Agent-A-Survey-on-Methodology-Applications-and-Challenges"><a href="#Large-Language-Model-Agent-A-Survey-on-Methodology-Applications-and-Challenges" class="headerlink" title="Large Language Model Agent: A Survey on Methodology, Applications and Challenges"></a><a href="https://arxiv.org/abs/2503.21460">Large Language Model Agent: A Survey on Methodology, Applications and Challenges</a></h2></li></ol><ul><li><strong>链接</strong> : <a href="https://arxiv.org/abs/2503.21460">arXiv:2503.21460</a></li><li><strong>内容概述</strong> :<br>该论文聚焦 LLM 智能体，分析其方法论、应用和挑战，涵盖 329 篇相关研究。论文提出了以方法论为中心的分类法，连接架构基础、协作机制和演化路径，统一了智能体设计的研究碎片。讨论了智能体的目标驱动行为和动态适应能力，探索其在复杂环境中的表现。应用场景包括自动化任务分解、协作工作流和多智能体系统。挑战包括计算资源需求、协作效率和评估方法的标准化。论文提供资源库（<a href="https://github.com/luo-junyu/Awesome-Agent-Papers">GitHub</a>），便于进一步研究。</li><li><strong>贡献</strong> :</li><li>提供 LLM 智能体的系统性分类，适合深入研究智能体应用。</li><li>覆盖广泛应用场景，强调协作机制。</li><li>提供开源资源，方便开发者实践。</li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="什么是语言模型-Language-Models-？"><a href="#什么是语言模型-Language-Models-？" class="headerlink" title="什么是语言模型 (Language Models)？"></a>什么是语言模型 (Language Models)？</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366089085BNAubDynsogt1bxoYrPcAnBlnvh.png" alt="1749366089085BNAubDynsogt1bxoYrPcAnBlnvh.png"></p><p>「语言模型」是一种「人工智能系统」，旨在处理、理解和生成类似人类的语言。它们从大型数据集中学习模式和结构，使得能够产生连贯且上下文相关的文本，应用于翻译、摘要、聊天机器人和内容生成等领域。</p><h3 id="大型语言模型（LLMs）"><a href="#大型语言模型（LLMs）" class="headerlink" title="大型语言模型（LLMs）"></a>大型语言模型（LLMs）</h3><p>「语言模型」（LMs）和「大型语言模型」（LLMs）这两个术语虽然经常被互换使用，但实际上它们基于规模、架构、训练数据和能力指代不同的概念。LLMs 是 LMs 的一个子集，其规模显著更大，通常包含数十亿个参数（例如，GPT-3 拥有 1750 亿个参数）。这种更大的规模使 LLMs 能够在广泛的任务中表现出卓越的性能。“LLM”这一术语在 2018 至 2019 年间随着基于 Transformer 架构的模型（如 BERT 和 GPT-1）的出现开始受到关注。然而，在 2020 年 GPT-3 发布后，这个词才被广泛使用，展示了这些大规模模型的重大影响力和强大能力。</p><h3 id="自回归语言模型-（Autoregressive-Language-Models）"><a href="#自回归语言模型-（Autoregressive-Language-Models）" class="headerlink" title="自回归语言模型 （Autoregressive Language Models）"></a><a href="https://zhida.zhihu.com/search?content_id=255912486&content_type=Article&match_order=1&q=%E8%87%AA%E5%9B%9E%E5%BD%92%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B&zhida_source=entity">自回归语言模型</a> （Autoregressive Language Models）</h3><p>大多数 LLMs 以「自回归方式」(Autoregressive)操作，这意味着它们根据前面的「文本」预测下一个「字」（或 token／sub-word）的「概率分布」(propability distribution)。这种自回归特性使模型能够学习复杂的语言模式和依赖关系，从而善于「文本生成」。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="57.784ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 25540.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtable" transform="translate(389,0)"><g data-mml-node="mtr"><g data-mml-node="mtd"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1152.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1597.2,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3749.8,0)"><g data-mml-node="mo"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(444.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(1783.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2228,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></g><g data-mml-node="mo" transform="translate(8493.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mrow" transform="translate(9049.4,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1612.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(11050.7,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mo" transform="translate(11801.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(12190.7,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(13413.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(13691.9,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(14844.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(15289.1,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(16441.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(16886.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(18225,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(18669.7,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(20796.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(21241.3,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(22580,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(23024.6,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="TeXAtom" transform="translate(749,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(25151.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>在文本生成任时，LLM 通过解码算法(Decoding Algorithm)来确定下一个输出的字。</p><p>这一过程可以采用不同的策略：既可以选择概率最高的下个字（即贪婪搜索），也可以从预测的概率分布中随机采样一个字。后一种方法使得每次生成的文本都可能有所不同，这种特性与人类语言的多样性和随机性颇为相似。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366102088NG49bUAoXomHelxiq2ZckdIlnpb.png" alt="1749366102088NG49bUAoXomHelxiq2ZckdIlnpb.png"><br><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366116880KWu3bn2W2oethdxLzqAcm6xBnWC.png" alt="1749366116880KWu3bn2W2oethdxLzqAcm6xBnWC.png"></p><h3 id="生成能力"><a href="#生成能力" class="headerlink" title="生成能力"></a>生成能力</h3><p>LLMs 的自回归特性使其能够基于前文提供的上下文逐词生成文本。从「提示」(prompt)开始，如下图，模型通过迭代预测下一个词，直到生成完整的序列或达到预定的停止条件。为了生成对提示的完整回答，LLM 通过将先前选择的标记添加到输入中进行迭代生成，尤如「文字接龙」游戏。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366127852Do7ybXLnFoU5QmxRFcrcML6Lnpf.png" alt="1749366127852Do7ybXLnFoU5QmxRFcrcML6Lnpf.png"></p><h2 id="Transformer-革命-2017"><a href="#Transformer-革命-2017" class="headerlink" title="Transformer 革命 (2017)"></a>Transformer 革命 (2017)</h2><blockquote><ul><li><a href="https://arxiv.org/abs/1706.03762">Attention Is All You Need</a></li></ul></blockquote><p>Vaswani 等人在 2017 年通过其开创性论文“Attention is All You Need”引入了 Transformer 架构，标志着 NLP 的一个分水岭时刻。它解决了早期模型如循环神经网络（RNNs）和长短期记忆网络（LSTMs）的关键限制，这些模型在长程依赖性和顺序处理方面存在困难。这些问题使得使用 RNN 或 LSTM 实现有效的语言模型变得困难，因为它们计算效率低下且容易出现梯度消失等问题。另一方面，Transformers 克服了这些障碍，彻底改变了这一领域，并为现代大型语言模型奠定了基础。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366139852ZnJWbnoMCojKUExcNMZcJaV4nod.png" alt="1749366139852ZnJWbnoMCojKUExcNMZcJaV4nod.png"></p><h3 id="Transformer-架构的关键创新"><a href="#Transformer-架构的关键创新" class="headerlink" title="Transformer 架构的关键创新"></a>Transformer 架构的关键创新</h3><p>自注意力机制 (Self-Attention)：与按顺序处理标记并难以应对长程依赖性的 RNN 不同，Transformers 使用自注意力来权衡每个标记相对于其他标记的重要性。这使得模型能够动态关注输入的相关部分。数学上：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex" xmlns="http://www.w3.org/2000/svg" width="42.399ex" height="5.874ex" role="img" focusable="false" viewBox="0 -1576.4 18740.2 2596.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="41" d="M255 0Q240 3 140 3Q48 3 39 0H32V46H47Q119 49 139 88Q140 91 192 245T295 553T348 708Q351 716 366 716H376Q396 715 400 709Q402 707 508 390L617 67Q624 54 636 51T687 46H717V0H708Q699 3 581 3Q458 3 437 0H427V46H440Q510 46 510 64Q510 66 486 138L462 209H229L209 150Q189 91 189 85Q189 72 209 59T259 46H264V0H255ZM447 255L345 557L244 256Q244 255 345 255H447Z"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(750,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1139,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1528,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1972,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2528,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2917,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(3195,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3695,0)"></path></g></g><g data-mml-node="mo" transform="translate(4251,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4640,0)"><g data-mml-node="mi"><path data-c="1D410" d="M64 339Q64 431 96 502T182 614T295 675T420 696Q469 696 481 695Q620 680 709 589T798 339Q798 255 768 184Q720 77 611 26L600 21Q635 -26 682 -26H696Q769 -26 769 0Q769 7 774 12T787 18Q805 18 805 -7V-13Q803 -64 785 -106T737 -171Q720 -183 697 -191Q687 -193 668 -193Q636 -193 613 -182T575 -144T552 -94T532 -27Q531 -23 530 -16T528 -6T526 -3L512 -5Q499 -7 477 -8T431 -10Q393 -10 382 -9Q238 8 151 97T64 339ZM326 80Q326 113 356 138T430 163Q492 163 542 100L553 86Q554 85 561 91T578 108Q637 179 637 330Q637 430 619 498T548 604Q500 641 425 641Q408 641 390 637T347 623T299 590T259 535Q226 469 226 338Q226 244 246 180T318 79L325 74Q326 74 326 80ZM506 58Q480 112 433 112Q412 112 395 104T378 77Q378 44 431 44Q480 44 506 58Z"></path></g></g><g data-mml-node="mo" transform="translate(5504,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5948.7,0)"><g data-mml-node="mi"><path data-c="1D40A" d="M400 0Q376 3 226 3Q75 3 51 0H39V62H147V624H39V686H51Q75 683 226 683Q376 683 400 686H412V624H304V338L472 483L634 624H565V686H576Q597 683 728 683Q814 683 829 686H836V624H730L614 524Q507 432 497 422Q496 422 498 418T514 395T553 342T627 241L759 63L805 62H852V0H842Q830 3 701 3Q550 3 526 0H513V62H549Q584 62 584 63Q583 65 486 196T388 328L304 256V62H412V0H400Z"></path></g></g><g data-mml-node="mo" transform="translate(6849.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7294.3,0)"><g data-mml-node="mi"><path data-c="1D415" d="M592 686H604Q615 685 631 685T666 684T700 684T724 683Q829 683 835 686H843V624H744L611 315Q584 254 546 165Q492 40 482 19T461 -6L460 -7H409Q398 -4 391 9Q385 20 257 315L124 624H25V686H36Q57 683 190 683Q340 683 364 686H377V624H289L384 403L480 185L492 212Q504 240 529 298T575 405L670 624H582V686H592Z"></path></g></g><g data-mml-node="mo" transform="translate(8163.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8830.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9885.9,0)"><g data-mml-node="mi"><path data-c="53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(556,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(1056,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1362,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1751,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(2584,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(3084,0)"></path></g></g><g data-mml-node="mrow" transform="translate(13664.6,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M701 -940Q701 -943 695 -949H664Q662 -947 636 -922T591 -879T537 -818T475 -737T412 -636T350 -511T295 -362T250 -186T221 17T209 251Q209 962 573 1361Q596 1386 616 1405T649 1437T664 1450H695Q701 1444 701 1441Q701 1436 681 1415T629 1356T557 1261T476 1118T400 927T340 675T308 359Q306 321 306 250Q306 -139 400 -430T690 -924Q701 -936 701 -940Z"></path></g><g data-mml-node="mfrac" transform="translate(736,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(220,676)"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D410" d="M64 339Q64 431 96 502T182 614T295 675T420 696Q469 696 481 695Q620 680 709 589T798 339Q798 255 768 184Q720 77 611 26L600 21Q635 -26 682 -26H696Q769 -26 769 0Q769 7 774 12T787 18Q805 18 805 -7V-13Q803 -64 785 -106T737 -171Q720 -183 697 -191Q687 -193 668 -193Q636 -193 613 -182T575 -144T552 -94T532 -27Q531 -23 530 -16T528 -6T526 -3L512 -5Q499 -7 477 -8T431 -10Q393 -10 382 -9Q238 8 151 97T64 339ZM326 80Q326 113 356 138T430 163Q492 163 542 100L553 86Q554 85 561 91T578 108Q637 179 637 330Q637 430 619 498T548 604Q500 641 425 641Q408 641 390 637T347 623T299 590T259 535Q226 469 226 338Q226 244 246 180T318 79L325 74Q326 74 326 80ZM506 58Q480 112 433 112Q412 112 395 104T378 77Q378 44 431 44Q480 44 506 58Z"></path><path data-c="1D40A" d="M400 0Q376 3 226 3Q75 3 51 0H39V62H147V624H39V686H51Q75 683 226 683Q376 683 400 686H412V624H304V338L472 483L634 624H565V686H576Q597 683 728 683Q814 683 829 686H836V624H730L614 524Q507 432 497 422Q496 422 498 418T514 395T553 342T627 241L759 63L805 62H852V0H842Q830 3 701 3Q550 3 526 0H513V62H549Q584 62 584 63Q583 65 486 196T388 328L304 256V62H412V0H400Z" transform="translate(864,0)"></path></g><g data-mml-node="mi" transform="translate(1798,423.1) scale(0.707)"><path data-c="1D413" d="M41 425Q41 426 51 545T62 669V675H737V669Q738 665 748 546T758 425V419H696V425Q687 517 669 555T595 607Q578 612 522 613H478V62H631V0H615Q585 3 399 3Q214 3 184 0H168V62H321V613H277H263Q164 613 134 561Q113 527 103 425V419H41V425Z"></path></g></g></g><g data-mml-node="msqrt" transform="translate(514.6,-855.6)"><g transform="translate(853,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,35.6)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="971.4" height="60" x="853" y="775.6"></rect></g><rect width="2613.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(3589.7,0) translate(0 -0.5)"><path data-c="29" d="M34 1438Q34 1446 37 1448T50 1450H56H71Q73 1448 99 1423T144 1380T198 1319T260 1238T323 1137T385 1013T440 864T485 688T514 485T526 251Q526 134 519 53Q472 -519 162 -860Q139 -885 119 -904T86 -936T71 -949H56Q43 -949 39 -947T34 -937Q88 -883 140 -813Q428 -430 428 251Q428 453 402 628T338 922T245 1146T145 1309T46 1425Q44 1427 42 1429T39 1433T36 1436L34 1438Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(17990.2,0)"><g data-mml-node="mi"><path data-c="56" d="M114 620Q113 621 110 624T107 627T103 630T98 632T91 634T80 635T67 636T48 637H19V683H28Q46 680 152 680Q273 680 294 683H305V637H284Q223 634 223 620Q223 618 313 372T404 126L490 358Q575 588 575 597Q575 616 554 626T508 637H503V683H512Q527 680 627 680Q718 680 724 683H730V637H723Q648 637 627 596Q627 595 515 291T401 -14Q396 -22 382 -22H374H367Q353 -22 348 -14Q346 -12 231 303Q114 617 114 620Z"></path></g></g></g></g></svg></mjx-container></p><p>这里，Q、K、V 是查询(query)、键(key)和值(value)矩阵，dₖ 是键的维度。自注意力允许并行计算，加快训练速度，同时提高全局上下文理解。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366152088YWvebIv6soDVh2xSALYc4m2vnoc.png" alt="1749366152088YWvebIv6soDVh2xSALYc4m2vnoc.png"></p><p>多头注意力：多个注意力头并行操作，每个头专注于输入的不同方面。它们的输出被连接并转换，从而实现更丰富的上下文表示。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366160852M4bYbd1axoJPw5xY8TzcBDn4n4b.png" alt="1749366160852M4bYbd1axoJPw5xY8TzcBDn4n4b.png"></p><p>前馈网络(FFN)和层归一化(Layer Norm)：每个 Transformer 层包括应用于每个标记的前馈网络，以及层归一化和残差连接。这些稳定了训练并支持更深的架构。</p><p>位置编码：由于 Transformers 本身不编码标记顺序，因此添加了位置编码（位置和频率的正弦函数）以表示词序，在不牺牲并行化的情况下保留顺序信息。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366172089We3mbXuFDomJfSxxrwFchohkn3d.png" alt="1749366172089We3mbXuFDomJfSxxrwFchohkn3d.png"></p><h4 id="对语言建模的影响"><a href="#对语言建模的影响" class="headerlink" title="对语言建模的影响"></a>对语言建模的影响</h4><ul><li>可扩展性：Transformers 实现了完全并行化的计算，使得在大型数据集上训练大规模模型成为可能。</li><li>上下文理解：自注意力捕捉局部和全局依赖关系，提高了连贯性和上下文意识。</li></ul><p>Transformer 架构的引入为构建能够以前所未有的精确性和灵活性处理复杂任务的大规模高效语言模型奠定了基础。</p><h2 id="预训练-Transformer-模型时代-2018–2020"><a href="#预训练-Transformer-模型时代-2018–2020" class="headerlink" title="预训练 Transformer 模型时代 (2018–2020)"></a><strong>预训练 Transformer 模型时代 (2018–2020)</strong></h2><p>2017 年 Transformer 架构的引入为 NLP 的新时代铺平了道路，其特点是预训练模型的兴起和对扩展的前所未有的关注。这一时期见证了两个有影响力的模型家族的出现：BERT 和 GPT，它们展示了大规模预训练和微调范式的强大功能。</p><h3 id="BERT：双向上下文理解-2018"><a href="#BERT：双向上下文理解-2018" class="headerlink" title="BERT：双向上下文理解 (2018)"></a><strong>BERT：双向上下文理解 (2018)</strong></h3><p>2018 年，谷歌推出了 BERT（Bidirectional Encoder Representations from Transformers），这是一种使用 Transformer 编码器(Encoder)的突破性模型，在广泛的 NLP 任务中取得了最先进的性能。</p><p>与之前单向处理文本（从左到右或从右到左）的模型不同，BERT 采用了双向训练方法，使其能够同时从两个方向捕获上下文。通过生成深层次的、上下文丰富的文本表示，BERT 在文本分类、命名实体识别（NER）、情感分析等语言理解任务中表现出色。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366186892IyVobGCISoulBexHp23ckNjrnpd.png" alt="1749366186892IyVobGCISoulBexHp23ckNjrnpd.png"></p><p>BERT 的关键创新包括：</p><ul><li>掩码语言建模（Masker Language Modeling — MLM）：BERT 不是预测序列中的下一个词，而是被训练预测句子中随机掩码的标记。这迫使模型在进行预测时考虑整个句子的上下文 — — 包括前后词语。例如，给定句子“The cat sat on the [MASK] mat”，BERT 会学习根据周围上下文预测“soft”。</li><li>下一句预测（Next Sentence Prediction — NSP）：除了 MLM 之外，BERT 还接受了称为下一句预测的次要任务训练，其中模型学习预测两个句子是否在文档中连续。这帮助 BERT 在需要理解句子之间关系的任务中表现出色，例如问答和自然语言推理。</li></ul><p>BERT 的影响：BERT 的双向训练使其在 GLUE（通用语言理解评估）和 SQuAD（斯坦福问答数据集）等基准测试中取得了突破性的表现。它的成功证明了上下文嵌入的重要性 — — 这些表示根据周围词语动态变化 — — 并为新一代预训练模型铺平了道路。</p><h3 id="GPT：生成式预训练和自回归文本生成（2018–2020）"><a href="#GPT：生成式预训练和自回归文本生成（2018–2020）" class="headerlink" title="GPT：生成式预训练和自回归文本生成（2018–2020）"></a><strong>GPT：生成式预训练和自回归文本生成（2018–2020）</strong></h3><p>虽然 BERT 优先考虑双向上下文理解，但 OpenAI 的 GPT 系列采用了不同的策略，专注于通过自回归预训练实现生成能力。通过利用 Transformer 的解码器(Decoder)，GPT 模型在自回归语言模型和文本生成方面表现出色。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366197851NG9rbQKhOoiyU8xFnjzcE6dnnVb.png" alt="1749366197851NG9rbQKhOoiyU8xFnjzcE6dnnVb.png"></p><p>GPT (2018)GPT 的第一个版本于 2018 年发布，是一个大规模的 Transformer 模型，经过训练以预测序列中的下一个词，类似于传统语言模型。</p><ul><li>单向自回归训练：GPT 使用因果语言建模目标进行训练，其中模型仅基于前面的标记预测下一个标记。这使得它特别适合于生成任务，如文本补全、摘要生成和对话生成。</li><li>下游任务的微调：GPT 的一个关键贡献是它能够在不需要特定任务架构的情况下针对特定下游任务进行微调。只需添加一个分类头或修改输入格式，GPT 就可以适应诸如情感分析、机器翻译和问答等任务。</li></ul><p>GPT-2 (2019)在原版 GPT 的成功基础上，OpenAI 发布了 GPT-2，这是一个参数量达 15 亿的更大模型。GPT-2 展示了令人印象深刻的零样本(Zero-shot)能力，意味着它可以在没有任何特定任务微调的情况下执行任务。例如，它可以生成连贯的文章、回答问题，甚至在语言之间翻译文本，尽管没有明确针对这些任务进行训练。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366209087ZZYMb63vmoBszCxVyMFcGqQXnnf.png" alt="1749366209087ZZYMb63vmoBszCxVyMFcGqQXnnf.png"></p><p>GPT-3 (2020)GPT-3 的发布标志着语言模型规模扩展的一个转折点。凭借惊人的 1750 亿参数(175B parameters)，GPT-3 突破了大规模预训练的可能性界限。它展示了显著的少样本(Few-short)和零样本(Zero-short)学习能力，在推理时只需提供最少或无需示例即可执行任务。GPT-3 的生成能力扩展到了创意写作、编程和复杂推理任务，展示了超大模型的潜力。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366215856SDbBbzF1Go4u1TxVTbjczhGtnze.png" alt="1749366215856SDbBbzF1Go4u1TxVTbjczhGtnze.png"></p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366222852FIYObGa7BoUFd8xnGLPcBRdqnPb.png" alt="1749366222852FIYObGa7BoUFd8xnGLPcBRdqnPb.png"></p><h4 id="GPT-的影响及规模的作用"><a href="#GPT-的影响及规模的作用" class="headerlink" title="GPT 的影响及规模的作用"></a>GPT 的影响及规模的作用</h4><p>GPT 模型的引入，特别是 GPT-3，标志着 AI 的一个变革时代，展示了自回归架构和生成能力的强大功能。这些模型为内容创作、对话代理和自动推理等应用开辟了新的可能性，在广泛的任务中达到了接近人类的表现。GPT-3 凭借其 1750 亿参数证明了规模的深远影响，表明在大规模数据集上训练的更大模型可以树立新的 AI 能力标杆。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366235853QJZ3b7F2Coy8CUxlx7pcDmmhnOb.png" alt="1749366235853QJZ3b7F2Coy8CUxlx7pcDmmhnOb.png"></p><blockquote><p>语言建模性能随着模型大小、数据集大小和训练使用的计算量的增加而平稳提升。<br><a href="https://arxiv.org/abs/2001.08361">Scaling Laws for Neural Language Models</a></p></blockquote><p>在 2018 年至 2020 年间，该领域由对规模的不懈追求驱动。研究人员发现，随着模型规模的增长 — — 从数百万到数十亿参数 — — 它们在捕捉复杂模式和泛化到新任务方面变得更好。这种规模效应得到了三个关键因素的支持：</p><ul><li>数据集大小：更大的模型需要庞大的数据集进行预训练。例如，GPT-3 是在大量互联网文本语料库上进行训练的，使其能够学习多样化的语言模式和知识领域。</li><li>计算资源：强大的硬件（如 GPU 和 TPU）的可用性以及分布式训练技术，使得高效训练具有数十亿参数的模型成为可能。</li><li>高效架构：混合精度训练和梯度检查点等创新降低了计算成本，使得在合理的时间和预算内进行大规模训练更加实际。</li></ul><p>这个规模扩展的时代不仅提升了语言模型的性能，还为未来的 AI 突破奠定了基础，强调了规模、数据和计算在实现最先进结果中的重要性。</p><h2 id="后训练对齐：弥合-AI-与人类价值观之间的差距-2021–2022"><a href="#后训练对齐：弥合-AI-与人类价值观之间的差距-2021–2022" class="headerlink" title="后训练对齐：弥合 AI 与人类价值观之间的差距 (2021–2022)"></a><strong>后训练对齐：弥合 AI 与人类价值观之间的差距 (2021–2022)</strong></h2><p>GPT-3（一个拥有 1750 亿参数的 LLM）生成几乎无法与人类写作区分的文本的能力引发了关于 AI 生成内容的真实性和可信度的重大担忧。</p><p>尽管这一成就标志着 AI 发展的一个重要里程碑，但也突显了确保这些模型与人类价值观、偏好和期望保持一致的关键挑战。一个主要问题是「幻觉」（Hallucination），即 LLM 生成与事实不符、无意义或与输入提示矛盾的内容，给人一种「一本正经地胡说八道」的印象。</p><p>为了解决这些挑战，2021 年和 2022 年的研究人员专注于改善与人类意图的一致性并减少幻觉，导致了监督微调（SFT）和基于人类反馈的强化学习（RLHF）等技术的发展。</p><h3 id="监督微调-SFT"><a href="#监督微调-SFT" class="headerlink" title="监督微调 (SFT)"></a><strong>监督微调 (SFT)</strong></h3><p>增强 GPT-3 对齐能力的第一步是监督微调（SFT），这是 RLHF 框架的基础组成部分。SFT 类似于指令调优，涉及在高质量的输入-输出对或演示上训练模型，以教它如何遵循指令并生成所需的输出。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366280852MfpwbkcnioN5lXxMOPgc4gyhnld.png" alt="1749366280852MfpwbkcnioN5lXxMOPgc4gyhnld.png"></p><p>这些演示经过精心策划，以反映预期的行为和结果，确保模型学会生成准确且符合上下文的响应。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366299852Y3fRbjJ0OoOLhVxvXBwcQkp7nti.png" alt="1749366299852Y3fRbjJ0OoOLhVxvXBwcQkp7nti.png"></p><p>然而，SFT 本身有局限性：</p><ol><li>可扩展性：收集人类演示是劳动密集型且耗时的，尤其是对于复杂或小众任务。</li><li>性能：简单模仿人类行为并不能保证模型会超越人类表现或在未见过的任务上很好地泛化。</li></ol><p>为了克服这些挑战，需要一种更具可扩展性和效率的方法，为下一步铺平了道路：基于人类反馈的强化学习（Reinforcement Learning from Human Feedback — RLHF）。</p><h3 id="基于人类反馈的强化学习-RLHF"><a href="#基于人类反馈的强化学习-RLHF" class="headerlink" title="基于人类反馈的强化学习 (RLHF)"></a><strong>基于人类反馈的强化学习 (RLHF)</strong></h3><p>OpenAI 在 2022 年引入的 RLHF 解决了 SFT 的可扩展性和性能限制。与需要人类编写完整输出的 SFT 不同，RLHF 涉及根据质量对多个模型生成的输出进行排名。这种方法允许更高效的数据收集和标注，显著增强了可扩展性。</p><p>RLHF 过程包括两个关键阶段：</p><ol><li>训练奖励模型：人类注释者对模型生成的多个输出进行排名，创建一个偏好数据集。这些数据用于训练一个奖励模型，该模型学习根据人类反馈评估输出的质量。</li><li>使用强化学习微调 LLM：奖励模型使用近端策略优化（Proximal Policy Optimization - PPO）（一种强化学习算法）指导 LLM 的微调。通过迭代更新，模型学会了生成更符合人类偏好和期望的输出。</li></ol><p>这个两阶段过程 — — 结合 SFT 和 RLHF — — 使模型不仅能够准确遵循指令，还能适应新任务并持续改进。通过将人类反馈整合到训练循环中，RLHF 显著增强了模型生成可靠、符合人类输出的能力，为 AI 对齐和性能设定了新标准。</p><h3 id="ChatGPT：推进对话式-AI-2022"><a href="#ChatGPT：推进对话式-AI-2022" class="headerlink" title="ChatGPT：推进对话式 AI (2022)"></a><strong>ChatGPT：推进对话式 AI (2022)</strong></h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366311853KsazbV5PJoA6qqxaf11cKTLSnDc.png" alt="1749366311853KsazbV5PJoA6qqxaf11cKTLSnDc.png"></p><p>2022 年 3 月，OpenAI 推出了 GPT-3.5，这是 GPT-3 的升级版，架构相同但训练和微调有所改进。关键增强包括通过改进数据更好地遵循指令，减少了幻觉（尽管未完全消除），以及更多样化、更新的数据集，以生成更相关、上下文感知的响应。</p><ul><li>对话聚焦的微调：在大量对话数据集上进行训练，ChatGPT 擅长维持对话的上下文和连贯性，实现更引人入胜和类似人类的互动。</li><li>RLHF：通过整合 RLHF，ChatGPT 学会了生成不仅有用而且诚实和无害的响应。人类培训师根据质量对响应进行排名，使模型能够逐步改进其表现。</li></ul><p>ChatGPT 的推出标志着 AI 的一个关键时刻，通常被称为「ChatGPT 时刻」(ChatGPT moment)，因为它展示了对话式 AI 改变人机交互的潜力。</p><h2 id="多模态模型：连接文本、图像及其他-2023–2024"><a href="#多模态模型：连接文本、图像及其他-2023–2024" class="headerlink" title="多模态模型：连接文本、图像及其他 (2023–2024)"></a><strong>多模态模型：连接文本、图像及其他 (2023–2024)</strong></h2><p>在 2023 年至 2024 年间，像 GPT-4V 和 GPT-4o 这样的多模态大型语言模型（MLLMs）通过将文本、图像、音频和视频整合到统一系统中重新定义了 AI。这些模型扩展了传统语言模型的能力，实现了更丰富的交互和更复杂的问题解决。</p><h3 id="GPT-4V：视觉遇见语言"><a href="#GPT-4V：视觉遇见语言" class="headerlink" title="GPT-4V：视觉遇见语言"></a><strong>GPT-4V：视觉遇见语言</strong></h3><p>2023 年，OpenAI 推出了 GPT-4V，将 GPT-4 的语言能力与先进的计算机视觉相结合。它可以解释图像、生成标题、回答视觉问题，并推断视觉中的上下文关系。其跨模态注意力机制允许文本和图像数据的无缝集成，使其在医疗保健（如分析医学图像）和教育（如互动学习工具）等领域具有价值。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366321852Qf1nb3g94oVLqFx4n6xcdS7Yntt.png" alt="1749366321852Qf1nb3g94oVLqFx4n6xcdS7Yntt.png"></p><h3 id="GPT-4o：全模态前沿"><a href="#GPT-4o：全模态前沿" class="headerlink" title="GPT-4o：全模态前沿"></a><strong>GPT-4o：全模态前沿</strong></h3><p>到 2024 年初，GPT-4o 通过整合音频和视频输入进一步推进了多模态。它在一个统一的表示空间中运行，可以转录音频、描述视频或将文本合成音频。实时交互和增强的创造力 — — 如生成多媒体内容 — — 使其成为娱乐和设计等行业的多功能工具。</p><p>现实世界的影响: MLLMs 革新了医疗保健（诊断）、教育（互动学习）和创意产业（多媒体制作）等领域。它们处理多种模态的能力解锁了创新的新可能性。</p><h2 id="推理模型：从「系统-1」到「系统-2」思维的转变-2024"><a href="#推理模型：从「系统-1」到「系统-2」思维的转变-2024" class="headerlink" title="推理模型：从「系统 1」到「系统 2」思维的转变 (2024)"></a><strong>推理模型：从「系统 1」到「系统 2」思维的转变 (2024)</strong></h2><p>2024 年，AI 开发开始强调增强「推理」(Reasoning)，从简单的模式识别转向更逻辑化和结构化的思维过程。这一转变受到认知心理学双重过程理论的影响，区分了「系统 1」（快速、直觉）和「系统 2」（缓慢、分析）思维。虽然像 GPT-3 和 GPT-4 这样的早期模型在生成文本等「系统 1」任务上表现出色，但在深度推理和问题解决方面却有所欠缺。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366332852KqgYbfsQdoAjgcxwSSTcTGHsnsd.png" alt="1749366332852KqgYbfsQdoAjgcxwSSTcTGHsnsd.png"></p><h3 id="OpenAI-o1：推理能力的一大飞跃-2024"><a href="#OpenAI-o1：推理能力的一大飞跃-2024" class="headerlink" title="OpenAI-o1：推理能力的一大飞跃(2024)"></a><strong>OpenAI-o1：推理能力的一大飞跃(2024)</strong></h3><p>2024 年 9 月 12 日，OpenAI 发布的 o1-preview 标志着人工智能能力的重大飞跃，尤其是在解决复杂推理任务（如数学和编程）方面。与传统 LLMs 不同，推理模型采用了「长链思维」（Long CoT） — — 即内部的推理轨迹，使模型能够通过分解问题、批判自己的解决方案并探索替代方案来“思考”问题。这些 CoTs 对用户是隐藏的，用户看到的是一个总结性的输出。</p><p><strong>推理模型的关键特性包括：</strong></p><ul><li>长链思维（Long CoT） ：使模型能够将复杂问题分解为更小的部分，批判性地评估其解决方案，并探索多种方法，类似于搜索算法。</li><li>推理时计算控制 ：对于更复杂的问题，可以生成更长的 CoTs；而对于较简单的问题，则使用较短的 CoTs 以节省计算资源。</li><li>增强的推理能力 ：尽管像 o1-preview 这样的初始推理模型在某些领域的能力不如标准 LLMs，但在推理任务中，它们的表现远远超越了后者，常常能与人类专家媲美。例如，o1-preview 在数学（AIME 2024）、编程（CodeForces）和博士级别的科学问题上均超越了 GPT-4o。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366342083VcEfbjllyoLSeCxGQvLcJEPBnSe.png" alt="1749366342083VcEfbjllyoLSeCxGQvLcJEPBnSe.png"></p><p><strong>OpenAI-o1：</strong></p><p>2024 年 12 月 5 日，OpenAI 的完整版 o1 模型进一步提升了性能，在美国 AIME 2024 数学考试中排名前 500 名学生之列，并显著超越了 GPT-4o（解决了 74%-93% 的 AIME 问题，而 GPT-4o 仅为 12%）。此外，o1-mini 作为更便宜且更快的版本，在编码任务中表现出色，尽管其成本仅为完整版 o1 的 20%。</p><p><strong>OpenAI-o3：</strong></p><p>2025 年 1 月 31 日，OpenAI 发布了 o3，这是其推理模型系列的最新突破，建立在 o1 模型成功的基础之上。尽管完整的 o3 模型尚未发布，但其在关键基准测试中的表现被描述为具有开创性。</p><ul><li>ARC-AGI ：达到 87.5% 的准确率，超过了人类水平的 85%，远超 GPT-4o 的 5%。</li><li>编程 ：在 SWE-Bench Verified 上得分 71.7%，并在 Codeforces 上获得 2727 的 Elo 评分，跻身全球前 200 名竞争性程序员之列。</li><li>数学 ：在 EpochAI 的 FrontierMath 基准测试中达到 25.2% 的准确率，相比之前的最先进水平（2.0%）有了显著提升。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366352852CSmybKboboZFwUxlGddcKw08n4d.png" alt="1749366352852CSmybKboboZFwUxlGddcKw08n4d.png"></p><p>OpenAI-o1 和 OpenAI-o3 推理模型的发布代表了人工智能领域的重大进步，通过结构化的内部推理过程提供了卓越的问题解决能力，并在复杂数学和编程任务中树立了新的标杆。</p><h2 id="成本高效的推理模型：DeepSeek-R1-2025"><a href="#成本高效的推理模型：DeepSeek-R1-2025" class="headerlink" title="成本高效的推理模型：DeepSeek-R1 (2025)"></a><strong>成本高效的推理模型：DeepSeek-R1 (2025)</strong></h2><p>LLMs 通常需要极其庞大的计算资源来进行训练和推理。像 GPT-4o 和 OpenAI-o1 这样的最先进 LLM 模型的闭源性质限制了对尖端 AI 的「普及化」。</p><h4 id="DeepSeek-V3-2024–12"><a href="#DeepSeek-V3-2024–12" class="headerlink" title="DeepSeek-V3 (2024–12)"></a>DeepSeek-V3 (2024–12)</h4><p>2024 年 12 月下旬，「深度求索-V3」(DeepSeek-V3)作为一种成本高效的开放权重 LLM 出现，为 AI 的可访问性设定了新标准。DeepSeek-V3 与 OpenAI 的 ChatGPT 等顶级解决方案相媲美，但开发成本显著降低，估计约为 560 万美元，仅为西方公司投资的一小部分。</p><p>该模型最多包含 6710 亿个参数，其中 370 亿个活跃参数，并采用专家混合（MoE）架构，将模型划分为专门处理数学和编码等任务的组件，以减轻训练负担。DeepSeek-V3 采用了工程效率，例如改进 Key-Value 缓存管理和进一步推动专家混合方法。该模型引入了三个关键架构：</p><ul><li>多头潜在注意力（Multi-head Latent Attention — MLA）：通过压缩注意力键和值来减少内存使用，同时保持性能，并通过旋转位置嵌入（RoPE）增强位置信息。</li><li>DeepSeek 专家混合（DeepSeekMoE）：在前馈网络（FFNs）中采用共享和路由专家的混合，以提高效率并平衡专家利用率。</li><li>多标记预测 (Multi-Token Prediction — MTP)：增强模型生成连贯且上下文相关的输出的能力，特别是对于需要复杂序列生成的任务。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366364852VqXxb4bC3o4zcdxZ2IfcCiBTn8f.png" alt="1749366364852VqXxb4bC3o4zcdxZ2IfcCiBTn8f.png"></p><p>DeepSeek-V3 的发布引发了全球科技抛售，危及 1 万亿美元的市值，并导致英伟达股票盘前下跌 13%。DeepSeek-V3 的价格为每百万输出标记 2.19 美元，约为 OpenAI 类似模型成本的 1/30。</p><h4 id="DeepSeek-R1-Zero-和-DeepSeek-R1-2025–01"><a href="#DeepSeek-R1-Zero-和-DeepSeek-R1-2025–01" class="headerlink" title="DeepSeek-R1-Zero 和 DeepSeek-R1 (2025–01)"></a>DeepSeek-R1-Zero 和 DeepSeek-R1 (2025–01)</h4><p>仅仅一个月后，2025 年 1 月下旬，DeepSeek 通过发布 DeepSeek-R1-Zero 和 DeepSeek-R1 再次引起轰动，这些模型展示了卓越的推理能力，训练成本极低。</p><p>利用先进的强化学习技术，这些模型证明了高性能推理可以在没有通常与尖端 AI 相关的巨额计算费用的情况下实现。这一突破巩固了 DeepSeek 作为高效和可扩展 AI 创新领导者的地位。</p><ul><li>DeepSeek-R1-Zero：一种基于 DeepSeek-V3 的推理模型，通过强化学习（RL）增强其推理能力。它完全消除了「监督微调」(SFT)阶段，直接从名为 DeepSeek-V3-Base 的预训练模型开始。</li><li>它采用了一种基于「规则的强化学习方法」(Rule-based Reinforcement Learning)，称为「组相对策略优化」（Group Relative Policy Optimization — GRPO），根据预定义规则计算奖励，使训练过程更简单且更具可扩展性。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366374853P4GgbfXdCosRNaxVs9UcgPZJnrh.png" alt="1749366374853P4GgbfXdCosRNaxVs9UcgPZJnrh.png"></p><p>DeepSeek-R1：为了解决 DeepSeek-R1-Zero 的局限性，如低可读性和语言混杂，DeepSeek-R1 纳入了一组有限的高质量冷启动数据和额外的 RL 训练。该模型经历了多个微调和 RL 阶段，包括拒绝采样和第二轮 RL 训练，以提高其通用能力和与人类偏好的一致性。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366389092T1wubPqY6oxXXFxd0qzcJ2glncg.png" alt="1749366389092T1wubPqY6oxXXFxd0qzcJ2glncg.png"></p><p>蒸馏 DeepSeek 模型：DeepSeek 开发了较小的、蒸馏版的 DeepSeek-R1，参数范围从 15 亿到 700 亿，将先进的推理能力带到较弱的硬件上。这些模型使用原始 DeepSeek-R1 生成的合成数据进行微调，确保在推理任务中表现出色，同时足够轻量化以便本地部署。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366397854N4nzbC2KTorOW5xuYnzcufyenNe.png" alt="1749366397854N4nzbC2KTorOW5xuYnzcufyenNe.png"></p><p>DeepSeek-R1 在各种基准测试中表现出竞争力，包括数学、编码、常识和写作。根据使用模式，它相比 OpenAI 的 o1 模型等竞争对手提供了显著的成本节省，使用成本便宜 20 到 50 倍。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366406080JB7LbnJZUoOrhzxuPW6cI1Z9nEb.png" alt="1749366406080JB7LbnJZUoOrhzxuPW6cI1Z9nEb.png"></p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h1><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749366416855UwLGbPxkwoY8EExcZAXcdmNtncC.png" alt="1749366416855UwLGbPxkwoY8EExcZAXcdmNtncC.png"></p><p>从 2017 年 Transformer 架构的引入到 2025 年 DeepSeek-R1 的发展，大型语言模型（LLMs）的演变标志着人工智能领域的一个革命性篇章。LLMs 的崛起由四个里程碑式的成就标示：</p><ul><li>Transformers (2017)：Transformer 架构的引入为构建能够以前所未有的精确性和灵活性处理复杂任务的大规模高效模型奠定了基础。</li><li>GPT-3 (2020)：该模型展示了规模在 AI 中的变革力量，证明了在大规模数据集上训练的巨大模型可以在广泛的应用中实现接近人类的表现，为 AI 所能完成的任务设立了新的基准。</li><li>ChatGPT (2022)：通过将对话式 AI 带入主流，ChatGPT 使高级 AI 对普通用户来说更加可访问和互动。它还引发了关于广泛采用 AI 的伦理和社会影响的关键讨论。</li><li>DeepSeek-R1 (2025)：代表了成本效率的一大飞跃，DeepSeek-R1 利用专家混合架构(MoE)和优化算法，与许多美国模型相比，运营成本降低了多达 50 倍。其开源性质加速尖端 AI 应用的普及化，赋予各行业创新者权力，并强调了可扩展性、对齐性和可访问性在塑造 AI 未来中的重要性。</li></ul><p>LLMs 正逐步演变为多功能、多模态的推理系统，能够同时满足普通用户和特定需求。这一演变得益于突破性技术创新，以及在规模、易用性和成本效益上的显著提升，推动人工智能朝着更加包容和影响力深远的方向迈进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;大模型底层技术分析&quot;&gt;&lt;a href=&quot;#大模型底层技术分析&quot; class=&quot;headerlink&quot; title=&quot;大模型底层技术分析&quot;&gt;&lt;/a&gt;大模型底层技术分析&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-05-智能体平台及关键技术分析</title>
    <link href="https://ke-tan.asia/2025/06/05/2025-06-05-%E6%99%BA%E8%83%BD%E4%BD%93%E5%B9%B3%E5%8F%B0%E5%8F%8A%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/"/>
    <id>https://ke-tan.asia/2025/06/05/2025-06-05-%E6%99%BA%E8%83%BD%E4%BD%93%E5%B9%B3%E5%8F%B0%E5%8F%8A%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</id>
    <published>2025-06-04T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="智能体平台及关键技术分析"><a href="#智能体平台及关键技术分析" class="headerlink" title="智能体平台及关键技术分析"></a>智能体平台及关键技术分析</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.woshipm.com/ai/6199196.html">中国智能体平台分析总结 – 人人都是产品</a></li><li><a href="https://ai-bot.cn/ai-agent-development-platform/">14 个 AI 智能体和应用开发平台，零代码构建 AI 应用 | AI 工具集</a></li></ul></blockquote><h1 id="智能体平台概述"><a href="#智能体平台概述" class="headerlink" title="智能体平台概述"></a>智能体平台概述</h1><p>智能体平台（Agent Platform）旨在为开发者提供一站式工具链，用于<strong>创建</strong>、<strong>训练</strong>、<strong>部署</strong>和<strong>管理</strong>智能体应用。它支持环境感知（传感器输入或数据流）、知识库管理（知识图谱或向量检索）、决策引擎（基于规则、强化学习或大模型推理）和执行层（动作指令或 API 调用）等核心模块。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364981853TDKMbmAZFovlkkxGjHCc17v8nfc.png" alt="1749364981853TDKMbmAZFovlkkxGjHCc17v8nfc.png"></p><p>从发展历程看，早期多聚焦于<strong>规则驱动</strong>与<strong>知识图谱</strong>的智能体平台，近年随着<strong>大规模预训练模型</strong>（LLM）与<strong>多模态融合</strong>能力的突破，智能体开始具备强大的语言交互与感知决策能力，平台因此演化出多样化的架构与生态 。</p><h2 id="典型平台与案例"><a href="#典型平台与案例" class="headerlink" title="典型平台与案例"></a>典型平台与案例</h2><h3 id="商业化平台"><a href="#商业化平台" class="headerlink" title="商业化平台"></a>商业化平台</h3><h3 id="开源框架"><a href="#开源框架" class="headerlink" title="开源框架"></a>开源框架</h3><ul><li><strong>JADE：</strong> 基于 Java 的多智能体平台，支持 FIPA 标准消息与分布式运行。</li><li><strong>Cougaar：</strong> 面向企业级分布式系统，提供插件化开发与黑板机制。</li></ul><h2 id="智能体平台关键技术"><a href="#智能体平台关键技术" class="headerlink" title="智能体平台关键技术"></a>智能体平台关键技术</h2><h3 id="元数据驱动与低代码构建"><a href="#元数据驱动与低代码构建" class="headerlink" title="元数据驱动与低代码构建"></a>元数据驱动与低代码构建</h3><p>平台通过<strong>元数据定义</strong>智能体的组件（感知、推理、执行），并以<strong>可视化画布</strong>和<strong>配置面板</strong>支持低代码或零代码开发，缩短应用落地时间。</p><h3 id="多模态大模型集成"><a href="#多模态大模型集成" class="headerlink" title="多模态大模型集成"></a>多模态大模型集成</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364992852EvpFbB4FwoJePhxComzcv9RhnFd.png" alt="1749364992852EvpFbB4FwoJePhxComzcv9RhnFd.png"></p><p>集成<strong>文本、图像、音频、视频</strong>等大模型能力，使智能体具备<strong>语义理解</strong>、<strong>视觉识别</strong>与<strong>跨模态推理</strong>能力，从而适配客服、监控、评估等多种使用场景。</p><h3 id="强化学习与自动规划"><a href="#强化学习与自动规划" class="headerlink" title="强化学习与自动规划"></a>强化学习与自动规划</h3><p>部分平台支持<strong>强化学习（RL）和自动规划</strong>，让智能体在交互环境中通过试错优化策略，并结合 Transformer 等结构实现灵活决策。</p><h3 id="多智能体协同"><a href="#多智能体协同" class="headerlink" title="多智能体协同"></a>多智能体协同</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749365002853MKYgbXCWOoTs6Xxcdt4c3Hq6nrh.png" alt="1749365002853MKYgbXCWOoTs6Xxcdt4c3Hq6nrh.png"></p><p>通过 <strong>Agent-to-Agent</strong>（A2A）协议与<strong>模型上下文协议（MCP）</strong>，可实现智能体间的信息交换与任务协同，处理复杂的多步骤流程或跨系统业务。</p><h3 id="仿真与现实桥接"><a href="#仿真与现实桥接" class="headerlink" title="仿真与现实桥接"></a>仿真与现实桥接</h3><p>利用 Habitat 等仿真平台进行<strong>大规模、快速迭代训练</strong>，并通过领域自适应技术（Domain Adaptation）将策略迁移到真实设备与场景中，提升智能体可靠性。</p><h3 id="安全与治理"><a href="#安全与治理" class="headerlink" title="安全与治理"></a>安全与治理</h3><p>平台内置<strong>身份管理</strong>（Agent ID）、<strong>访问控制</strong>与<strong>审计日志</strong>，并整合 Microsoft Entra 与 Purview，帮助企业对智能体生命周期进行安全管控与合规管理。</p><hr><h2 id="智能体平台架构"><a href="#智能体平台架构" class="headerlink" title="智能体平台架构"></a>智能体平台架构</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749365010853TNugbiS2LoHQawx44yacTxDcnoh.png" alt="1749365010853TNugbiS2LoHQawx44yacTxDcnoh.png"></p><h3 id="感知模块-Perception"><a href="#感知模块-Perception" class="headerlink" title="感知模块 (Perception)"></a>感知模块 (Perception)</h3><p>负责从多源数据（传感器、API、日志等）中抽取特征，包括计算机视觉、语音识别和传感器数据处理。</p><h3 id="推理与规划-Reasoning-Planning"><a href="#推理与规划-Reasoning-Planning" class="headerlink" title="推理与规划 (Reasoning & Planning)"></a>推理与规划 (Reasoning &amp; Planning)</h3><ul><li><strong>规则推理：</strong> 基于专家系统或逻辑规则进行决策。</li><li><strong>规划算法：</strong> 使用 A*、蒙特卡洛树搜索等方法，生成跨阶段任务执行方案。</li></ul><h3 id="学习模块-Learning"><a href="#学习模块-Learning" class="headerlink" title="学习模块 (Learning)"></a>学习模块 (Learning)</h3><p>集成机器学习与深度学习算法，实现：</p><ul><li>**强化学习 (RL)**：通过环境交互不断更新策略。</li><li><strong>监督/无监督学习</strong>：利用历史数据训练分类、聚类模型，支持情境感知与预测。</li></ul><h3 id="执行与接口-Execution-Interface"><a href="#执行与接口-Execution-Interface" class="headerlink" title="执行与接口 (Execution & Interface)"></a>执行与接口 (Execution &amp; Interface)</h3><p>将决策转化为实际动作或 API 调用，包括机器人控制、网络请求与第三方服务集成。</p><h3 id="通信与协调-Communication-Orchestration"><a href="#通信与协调-Communication-Orchestration" class="headerlink" title="通信与协调 (Communication & Orchestration)"></a>通信与协调 (Communication &amp; Orchestration)</h3><ul><li><strong>Agent Communication Languages (ACL)：</strong> 如 FIPA-ACL、KQML，实现异构智能体间的消息交换。</li><li><strong>分布式调度：</strong> 基于消息队列、Service Mesh 或 Kubernetes 框架，实现智能体群的负载均衡与高可用。</li></ul><hr><h2 id="典型应用案例"><a href="#典型应用案例" class="headerlink" title="典型应用案例"></a>典型应用案例</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749365024852Kfi5bvvdXo9LVqxWQY8cRHnEnEg.png" alt="1749365024852Kfi5bvvdXo9LVqxWQY8cRHnEnEg.png"></p><p>AI （智能体、LLM、MCP）技术应用企业级解决方案</p><ul><li><strong>农田监测评价多模态智能体平台</strong>：集成无人机多光谱影像、传感器数据与知识图谱，实现精准种植决策和实时告警。</li><li><strong>客服与外呼机器人</strong>：智能体融合语音识别、NLP 与知识检索，为金融、电商等行业提供 7×24 小时智能客服与自动外呼能力。</li><li><strong>智能制造</strong>：基于视觉检测与动作规划智能体，实现生产线缺陷检测与柔性装配。</li><li><strong>智慧城市</strong>：多智能体协同调度交通、安防与应急响应，提升城市管理效率。</li></ul><hr><h2 id="挑战与未来趋势"><a href="#挑战与未来趋势" class="headerlink" title="挑战与未来趋势"></a>挑战与未来趋势</h2><ol><li><strong>跨模态与大模型成本</strong>：多模态大模型资源消耗高，需优化推理效率与模型压缩。</li><li><strong>可解释性与信任</strong>：智能体决策链路需透明化，增强可审计性与问责机制。</li><li><strong>生态互操作</strong>：打造“Foundation Model + API”生态，实现多厂商模型与平台无缝对接。</li><li><strong>行业定制化</strong>：向金融、医疗、制造等领域推出<strong>行业级智能体套件</strong>，提供预置组件与合规加固。</li><li><strong>端-云协同</strong>：面向物联网与边缘场景，实现轻量化端侧智能体与云端训练/管理协同。</li></ol><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>智能体平台通过整合感知、推理、学习、执行与通信五大模块，依托机器学习、NLP、计算机视觉及强化学习等关键技术，构建可扩展、可协同的自主系统。商业化平台（如 Salesforce、NVIDIA、Google、AWS）与开源框架（JADE、Cougaar）各具特色，满足不同规模与场景需求。未来，随着多智能体协同、大动作模型、可解释性与行业纵深应用的推进，智能体平台将在生产制造、智能运维、自动驾驶等领域发挥更大价值。</p><p>智能体平台是支持智能体（具有自主感知、决策与执行能力的软件实体）开发、部署与管理的综合系统，通常包含环境感知、知识表示、决策引擎、执行模块和可视化运维等组件。它们可面向企业级应用（如流程自动化、智能客服、行业专项智能体）或科研级需求（如虚拟仿真、机器人导航）。核心技术涵盖大模型集成、多模态感知、强化学习与规划、多智能体协同、元数据驱动低代码开发以及安全与治理机制。典型商业平台有科大讯飞的星辰 Agent、百度文心 AgentBuilder、微软的 Azure AI Foundry、字节跳动的 Coze 等，科研平台则包括 Meta/普林斯顿的 Habitat (embodied AI) 和 TaskMatrix.AI 等。未来，随着 AI 基础模型能力的增强与多智能体生态的兴起，智能体平台将朝向“全链路低代码／无代码开发”、“AI 模型与 API 无缝编排”以及“行业专项化解决方案”方向演进。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><ul><li><a href="https://www.53ai.com/news/2407.html">14 个 AI 智能体和应用开发平台，零代码构建 AI 应用</a></li><li><a href="https://zhuanlan.zhihu.com/p/123456789">2025 年 10 个不可错过的海外 AI Agent 构建平台</a></li><li><a href="https://agents.baidu.com/">文心智能体平台 AgentBuilder</a></li><li><a href="https://zhuanlan.zhihu.com/p/987654321">企业智能体平台公司有哪些？全面解析 2025 年十大主流 AI Agent 平台</a></li><li><a href="https://www.sohu.com/a/123456789_999999">智能体平台究竟啥样？为何成企业数字化转型关键？</a></li><li><a href="https://www.betteryeah.com/">AI 智能体开发平台 ｜ 企业级 Agent 应用快速构建 ｜BetterYeah</a></li><li><a href="https://news.microsoft.com/">微软 Build 2025：AI 智能体时代与开放智能体网络的构建</a></li><li><a href="https://www.analyticsvidhya.com/blog/2023/07/what-is-an-ai-agent/">什么是 AI 智能体？定义、示例和类型</a></li><li><a href="https://www.163.com/dy/article/J1234567_001.html">“农田监测评价多模态 AI 智能体平台”首次亮相</a></li><li><a href="https://arxiv.org/abs/1904.01201">Manolis Savva 等, “Habitat: A Platform for Embodied AI Research”</a></li><li><a href="https://arxiv.org/abs/2303.16434">TaskMatrix.AI: Completing Tasks by Connecting Foundation Models with Millions of APIs</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;智能体平台及关键技术分析&quot;&gt;&lt;a href=&quot;#智能体平台及关键技术分析&quot; class=&quot;headerlink&quot; title=&quot;智能体平台及关键技术分析&quot;&gt;&lt;/a&gt;智能体平台及关键技术分析&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; cla</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-04-低代码平台及相关技术介绍应用</title>
    <link href="https://ke-tan.asia/2025/06/04/2025-06-04-%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://ke-tan.asia/2025/06/04/2025-06-04-%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%B9%B3%E5%8F%B0%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-06-03T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="低代码平台及相关技术介绍"><a href="#低代码平台及相关技术介绍" class="headerlink" title="低代码平台及相关技术介绍"></a>低代码平台及相关技术介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.grapecity.com.cn/lowcode/low-code-introduction/core-ability-tech-principle/lowcode-tech-principle">低代码平台的技术原理 - 低代码技术 - 葡萄城产品文档中心</a></li><li><a href="https://zhuanlan.zhihu.com/p/451340998">从实现原理看低代码</a></li><li><a href="https://www.mendix.com/zh-CN/%E4%BD%8E%E4%BB%A3%E7%A0%81%E6%8C%87%E5%8D%97/">什么是低代码开发？| Mendix</a></li></ul></blockquote><h1 id="核心概念与技术原理"><a href="#核心概念与技术原理" class="headerlink" title="核心概念与技术原理"></a>核心概念与技术原理</h1><h2 id="何为低代码平台"><a href="#何为低代码平台" class="headerlink" title="何为低代码平台"></a>何为低代码平台</h2><p>低代码平台是一种可视化软件开发方法，提供拖拽式组件、模型驱动逻辑和少量脚本，旨在最小化手写代码的需求，加速应用交付。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364800087EByXb7hZeo5Eaxxa6V3ctMObnXh.png" alt="1749364800087EByXb7hZeo5Eaxxa6V3ctMObnXh.png"></p><p>低代码是高级语言开发技术发展到一定阶段的产物，以覆盖软件全生命周期的可视化为主要特征。其核心原理是将开发者的可视化设计保存为对应的元数据，通过解析元数据，形成可运行的软件。元数据通常隐藏在可视化开发环境和服务器运行时之下，低代码平台的使用者可不必关心其技术细节，能将更多精力聚焦在业务逻辑的实现和技术创新落地上。</p><h2 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h2><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>在系统架构上，低代码开发平台可以分为两层：设计器（开发环境）和服务器（运行时）。服务器通常表现为低代码平台定制的 Web 服务器。在设计器方面，部分厂商沿用传统开发的方式，提供桌面端设计器，部分厂商则将以 Web 页面的形式提供在线设计器。前者的优势在于无需联网和更强的性能；后者则大幅节省了开发环境的搭建时间。</p><ol><li><strong>元数据驱动</strong>：平台通过元数据定义 UI 元素、数据模型和业务逻辑，运行时引擎根据这些元数据渲染应用界面与行为，无需手写模板或控制器。</li><li><strong>可视化建模</strong>：利用拖拽画布和属性面板，让用户通过图形化界面定义流程图、表单布局和数据关系，后台自动生成相应的代码或配置。</li><li><strong>模块化扩展</strong>：为满足复杂场景，平台通常支持以插件或脚本方式插入自定义逻辑，例如 JavaScript、Java、C# 等，可在可视化组件之外进行深度定制。</li><li><strong>全生命周期管理</strong>：集成需求管理、版本控制、测试与部署流水线，使低代码项目在从原型到生产的各个阶段均可监控与协作。</li></ol><h4 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h4><p>早期的低代码开发平台大多采用代码生成器的技术方案。低代码平台将可视化操作直接翻译成对应的可执行语言（如 Java）。这种做法开发难度低，曾经一度成为低代码的主流。</p><p>但随着应用的深入，人们发现这种方式存在封装程度低、开发效率提升有效、可维护性弱等技术问题。更重要的是，一旦开发者使用其他开发工具对这些编译后的源代码进行修改后，往往无法再同步回低代码开发平台的可视化开发环境，致使无法持续使用可视化的方式对应用进行开发和维护，让低代码平台成为了“一次性工具”。这显然违背了低代码开发平台的初衷。</p><h4 id="元数据驱动"><a href="#元数据驱动" class="headerlink" title="元数据驱动"></a>元数据驱动</h4><p>目前主流的低代码平台已经从生成可直接执行的程序代码（如 Java、C#），逐步切换为生成特定格式的元数据（格式为 XML、JSON）。这些元数据无法脱离平台运行，就像 Java 无法脱离 JRE/JDK 一样。</p><blockquote><p>但 JSON 的优点就是它的缺点，因为它的用途是数据交换而不是人工编写，导致基于 JSON 构建 DSL 不方便编辑，会有以下 3 个问题：</p><ul><li>不支持注释</li><li>不支持多行字符串</li><li>语法过于严格，比如不支持单引号，不能在最后多写一个逗号</li></ul></blockquote><p>在开发阶段，平台使用者（即开发者）通过设计器，可视化构建页面、业务逻辑和数据结构，设计器会将这些操作的结果以元数据的形式保存成中间文件（也称 Project、工程文件，通常由大量 json、xml 等描述性语言的文件打包而成）；部署阶段，开发者通过设计器将中间文件进行预处理（包含但不限于有效性检查、压缩、加密等），并打包发布到服务器上。而服务器则充当了运行时（Runtime）的角色，自动解析中间文件里的元数据，最终形成应用，提供给最终用户使用。这个过程可以类比于使用 Visual Studio（开发环境）开发 ASP.NET MVC 应用，编译成程序集后，发布到启用.NET 的 IIS（服务器），以 Web 应用的形式提供给用户使用。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364830851Ajn3b2WMhoFLOTx0aqAcyM6cn4d.png" alt="1749364830851Ajn3b2WMhoFLOTx0aqAcyM6cn4d.png"></p><p>借助元数据驱动的技术方案，平台厂商将更多能力封装成开发者能在可视化设计器中使用的元数据类型（也成平台元数据），持续扩大低代码平台的应用场景，提升使用者的开发效率。一定程度上讲，低代码内置平台元数据的覆盖范围，决定了该平台可视化开发的能力边界。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>低代码平台的数据建模可分为表结构设计和查询视图设计两部分，使用者在界面上通过可视化的方式，构建出表结构和视图，而平台将其自动转义为对应数据库的 SQL 语句。目前，大多数模型驱动的低代码平台支持可视化的表结构设计，部分平台支持可视化设计查询视图。</p><p>数据建模是可视化开发技术最早的应用场景之一，技术相对成熟。低代码厂商通常会借鉴主流数据库管理软件的操作体验。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364840875PNDfbej74oEUKQxkIZqcPJM8nkh.png" alt="1749364840875PNDfbej74oEUKQxkIZqcPJM8nkh.png"></p><h4 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h4><p>表结构设计的可视化由来已久，从中大型的分布式数据库 Microsoft SQL Server，到小型的单机数据库 Access，都提供有可视化的结构设计和数据编辑能力。绝大多数低代码平台延续了这些数据库软件的做法，以 SQL 语句直接操作数据库，而省略了生成元数据和解析元数据的环节。开发者在设计器上对表结构进行的调整，被翻译成了对应的 SQL 语句，在数据库上执行。与此同时，设计器可以通过数据库提供的结构（Schema）查询能力，实时获取数据库中的表结构，并展示在设计器中。</p><p>在此基础上，面向企业级应用开发的低代码平台则需要将不同厂商、不同版本的数据库设计能力进行统一化，以确保使用低代码开发的应用可以在数据层面和第三方软件无缝集成。这通常意味着低代码平台需要针对各种数据库分别开发数据结构和数据的存取机制，为开发者“抹平”数据库间在数据类型、查询操作等领域的差异。</p><h4 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h4><p>主流数据库通常推荐使用外键约束描述表与表的关联关系，如主从表、业务实体与主数据等。早期的低代码平台也将表关联关系直接翻译成了外键。但是，随着多源数据整合需求的增加，这种在数据库层面为多张表建立“硬链接”的方式，面临了无法建立跨数据库、跨数据源的表关联的挑战。所以，越来越多的 ORM（对象关系映射）框架开始将表关联从数据库提升到业务服务器中，即在业务服务器上，以元数据的形式记录表与表的关联关系。</p><p>于是，部分低代码平台开始迎合这一趋势，在用户建立表关联的时候，设计器不再生成创建外键的 SQL 语句，而是在元数据中描述这一关联，并提供给设计器和运行时使用。如在设计器中可以直接绑定子表或主数据的字段，在运行时实现级联删除等。</p><h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><p>查询视图可以在数据表的基础上封装常用的数据能力。相比于在业务逻辑层做数据处理，运行在数据库上的视图性能更高。视图中新增的字段主要有两种类型：基于当前行中其他字段的值进行计算得出的计算字段，以及基于外键关系，对子表进行统计计算得出的聚合字段。</p><p>值得一提的是，为了降低开发者的工作量，部分低代码开发平台会将查询视图的设计能力整合到表结构设计中，当用户在表结构设计器中创建计算字段或聚合字段时，平台会为该表创建一个查询视图，用户设置的公式会被转义成视图中的查询语句。在业务逻辑层对该表进行查询操作时，平台会自动寻找对应的视图，让开发者可以像读取表中其他字段一样，查询计算字段或聚合字段的值。</p><h3 id="WebAPI-业务逻辑"><a href="#WebAPI-业务逻辑" class="headerlink" title="WebAPI / 业务逻辑"></a>WebAPI / 业务逻辑</h3><p>业务处理逻辑的可视化设计是低代码开发平台的技术难点之一。在传统编码开发中，可视化的应用范围通常不会涉及这一部分。所以，各低代码厂商在业务逻辑的可视化设计领域采用了不同的设计思想，为开发者提供了差异化的设计体验，同样实现了基于可视化设计的结果自动化生成代码的效果。低代码平台通常将可视化设计的业务逻辑存储为 Meta 元数据，常见的形式有 JSON 和 XML。在服务器程序启动时，运行时会读取元数据，在内存中构建业务逻辑的执行路径，监听对应的端口，准备响应来自客户端的 HTTP 请求。</p><h4 id="可视化设计"><a href="#可视化设计" class="headerlink" title="可视化设计"></a>可视化设计</h4><p>在可视化设计层面，低代码平台通常会在“图”和“树”中选择一个实现方案。</p><ul><li><strong>图</strong>：使用流程图的形式描述业务逻辑的历史可以追溯到软件行业诞生之初。直到今天，依然有大量需求方采用 Microsoft Visio 等软件绘制业务处理流程图，并将其提交给开发方作为核心需求文件。所以，在低代码开发平台中提供类似于流程图的设计体验就成了部分低代码厂商的首选方案。在节点较少、判断和循环规则简单的应用场景中，这种开发体验产出的结果更直观，非常适合开发方与需求方基于该结果进行讨论和确认。采用该方案的典型产品有：Mendix、轻流</li><li><strong>树</strong>：树是计算机中最常见的数据结构之一，也是高级语言在集成开发环境中的呈现方式：每一行可执行的语句都是一个叶子节点，而 if 等语句构成的代码块则是父节点。在编写代码时，程序员通过换行、缩进或花括号等符号来表达这种层次关系。执行时，语句会严格按照开发者的要求，从根节点向下，逐层、逐个遍历执行各个节点的语句。这种方式已经广泛应用于绝大多数高级语言中，充分证明了对不同应用场景的适应性。所以，致力于在现有软件开发工具的基础上进一步扩大可视化的覆盖范围，最终实现低代码的厂商，通常会选择树的方式构建业务逻辑设计体验。采用该方案的典型产品有：活字格、爱速搭</li></ul><p>两种方案没有优劣之分，图的方案更适合没受过专业编程训练的人学习和使用；树的方案对编码开发人员向低代码转型更友好。</p><h4 id="用来描述业务处理逻辑的元数据"><a href="#用来描述业务处理逻辑的元数据" class="headerlink" title="用来描述业务处理逻辑的元数据"></a>用来描述业务处理逻辑的元数据</h4><p>首先，低代码平台会根据自身的能力边界和封装粒度，将用来承载业务逻辑的要件（也称业务能力）抽象成元数据定义，如数据库操作、判断、循环、文件处理、钉钉推送等。开发者在设计器上编排和操作对这些要件；设计器将这些要件的顺序、配置信息等保存为元数据；运行时通过加载这些元数据，还原出业务逻辑处理的规则和实现方式，并最终形成可执行的程序。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364849852NCzGbmsjxoreJoxDVqac9FwDnPg.png" alt="1749364849852NCzGbmsjxoreJoxDVqac9FwDnPg.png"></p><p>具体而言，低代码平台用来描述业务逻辑的元数据通常由若干有顺序的“操作”构成，每个操作中包含操作类型、配置参数、输入参数、输出参数等。如从向数据库中特定表插入数据的操作，在元数据中可描述为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string-property property">"$type"</span><span class="token operator">:</span> <span class="token string">"Forguncy.Model.UpdateDataTableCommand, ServerDesignerCommon"</span><span class="token punctuation">,</span>    <span class="token string-property property">"TableName"</span><span class="token operator">:</span> <span class="token string">"表名"</span><span class="token punctuation">,</span>    <span class="token string-property property">"UpdateType"</span><span class="token operator">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span>    <span class="token string-property property">"UpdateValues"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string-property property">"ColumnName"</span><span class="token operator">:</span> <span class="token string">"字段名"</span><span class="token punctuation">,</span>            <span class="token string-property property">"Value"</span><span class="token operator">:</span> <span class="token string">"=arg0"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>不同的低代码平台大多采用类似的技术原理，即使用 JSON/XML 格式的元数据描述前端组件的属性和页面布局。在设计体验上，低代码平台大多在固定布局和栅格布局两种方案中进行选择，少数低代码平台选择融合两者布局方案的网格布局（Grid Layout）。</p><h4 id="从可执行代码到元数据"><a href="#从可执行代码到元数据" class="headerlink" title="从可执行代码到元数据"></a>从可执行代码到元数据</h4><p>页面设计的可视化与数据库可视化设计的历史类似，可以追溯到 1990 年代，随着 Visual Basic 的火热，传统编码开发领域涌现出了大量以拖拽的方式构建程序界面的开发工具。直至今日，很多开发者在提及可视化开发时，第一反应还是那个时代的 Visual Basic、Visual C++、PowerBuilder 等工具。这一阶段的页面设计以固定布局为主，开发者通过拖拽的方式摆放和配置页面元素，开发工具则根据这些信息自动生成可执行的程序代码，包含创建控件等页面元素、设置元素的位置、调整元素的样式等。在程序运行时，这些程序代码会被调用，逐步还原开发者的拖拽操作，最终展示出应用的界面。</p><p>随着技术的进步，标记型语言和解释引擎的技术方案从 Web 页面走向更多终端。除了 Android 和 iOS 两个新的终端类型，Windows 上也出现了采用标记型语言设计页面的 WPF 技术，开发者拖拽生成后的页面，在编译时不再转义为顺序执行的程序语言，而是描述最终显示结果的标记型语言。同样是将可视化设计的结果转换为代码，标记型语言比顺序执行的代码语言更直观地展示页面中元素的层次和样式，开发工具需要处理的复杂度更低，可以给开发者开放更多能力，设计出更丰富的布局和样式，产出的质量也更加稳定；与之对应的代价则是相比于直接执行程序代码，通过解析引擎分析和展示标记型语言会带来额外的性能开销。在终端性能过剩的当下，程序代码方案的优势已经不在。在此背景下，诞生于 2010 年代以后的低代码开发平台绝大多数选择了生成标记型语言的技术方案，生成的格式主要为 XML 和 JSON。与上文中介绍的业务逻辑开发类似，界面交互开发也从生成程序代码走上了生成元数据的道路。</p><h4 id="元数据，不只是-HTML"><a href="#元数据，不只是-HTML" class="headerlink" title="元数据，不只是 HTML"></a>元数据，不只是 HTML</h4><p>绝大多数低代码开发平台都诞生于 2010 年之后，所以，元数据成了他们承载页面设计的不二之选。这导致了低代码平台在页面层的技术原理大同小异。与业务逻辑的可视化开发类似，低代码平台厂商为了帮助提升开发效率，也提供了大量前端交互组件，这些组件基于 HTML，但封装粒度更粗，如部分低代码平台将“表格”作为一个前端组件，开发者在设计器上为页面添加一个表格，就可以得到由大量 HTML 元素和 JavaScript 脚本实现的数据展示、分页、列头过滤器、Excel 数据复制粘贴等功能。这就意味着低代码平台需要定义一套与 HTML 不同的元数据标准，来描述这些封装好的组件。</p><p>开发者在设计器中对这些组件进行的操作，会被设计器保存为页面元数据，包含元素的布局、样式、内容和行为；当页面被浏览器渲染时，低代码平台运行时提供的类库将加载这些元数据，在页面中完成绘制和交互，还原开发者在设计器中构建的页面。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364864091NuxxbmTVZouXHQxx3NAcSroVnwf.png" alt="1749364864091NuxxbmTVZouXHQxx3NAcSroVnwf.png"></p><h2 id="平台分类"><a href="#平台分类" class="headerlink" title="平台分类"></a>平台分类</h2><h3 id="按用户群体"><a href="#按用户群体" class="headerlink" title="按用户群体"></a>按用户群体</h3><ul><li><strong>公民开发者平台</strong>：面向业务分析师与项目经理，强调零代码特性，只需最少脚本即可完成常见应用。</li><li><strong>专业开发者平台</strong>：提供丰富的 API 和 SDK，支持深度定制与集成，适合复杂企业级应用开发。</li></ul><h3 id="按部署模式"><a href="#按部署模式" class="headerlink" title="按部署模式"></a>按部署模式</h3><ul><li><strong>云端 SaaS</strong>：如 Mendix、OutSystems 等，通过云服务模式提供开发与运维托管，便于快速上线与自动扩展。</li><li><strong>企业私有部署</strong>：适用于对数据安全与合规要求较高的行业，可在本地或私有云中安装低代码平台。</li></ul><h3 id="按技术栈"><a href="#按技术栈" class="headerlink" title="按技术栈"></a>按技术栈</h3><ul><li><strong>Web 前端驱动</strong>：大多数低代码平台以前端框架（如 React、Vue）为基础，生成富交互单页应用。</li><li><strong>后端无缝集成</strong>：通过内置数据库模型和微服务框架，自动生成 REST/GraphQL 接口，同时支持与第三方系统（ERP、CRM）的接口联动。</li></ul><h2 id="平台功能模块"><a href="#平台功能模块" class="headerlink" title="平台功能模块"></a>平台功能模块</h2><h3 id="可视化开发"><a href="#可视化开发" class="headerlink" title="可视化开发"></a>可视化开发</h3><ul><li>拖拽式表单设计器、流程设计器和仪表盘构建器。</li><li>实时预览功能，提交配置后可立即查看效果。</li></ul><h3 id="数据与模型管理"><a href="#数据与模型管理" class="headerlink" title="数据与模型管理"></a>数据与模型管理</h3><ul><li>元数据建模：通过图形化或 DSL 定义实体、属性与关系。</li><li>自动生成数据库表、API 接口和数据验证规则。</li></ul><h3 id="业务流程引擎"><a href="#业务流程引擎" class="headerlink" title="业务流程引擎"></a>业务流程引擎</h3><ul><li>提供 BPEL/RBAC 流程引擎，支持审批流、定时任务与分支逻辑。</li><li>支持多租户和权限精细化控制。</li></ul><h3 id="部署与运维"><a href="#部署与运维" class="headerlink" title="部署与运维"></a>部署与运维</h3><ul><li>一键发布至测试、预生产与生产环境。</li><li>集成 CI/CD、日志监控和性能分析，保障应用稳定运行。</li></ul><h2 id="主流低代码平台对比"><a href="#主流低代码平台对比" class="headerlink" title="主流低代码平台对比"></a>主流低代码平台对比</h2><blockquote><ul><li><a href="https://www.nocobase.com/cn/blog/top-15-open-source-low-code-projects-with-the-most-github-Stars">GitHub Star 数量前 15 的开源低代码项目 - NocoBase</a></li></ul></blockquote><h2 id="发展趋势与挑战"><a href="#发展趋势与挑战" class="headerlink" title="发展趋势与挑战"></a>发展趋势与挑战</h2><h3 id="趋势"><a href="#趋势" class="headerlink" title="趋势"></a>趋势</h3><ol><li><strong>AI 辅助开发</strong>：结合 GPT、Copilot 等技术，实现自动生成 UI 布局、业务逻辑建议与代码片段。</li><li><strong>多端统一</strong>：从单页面 Web、移动端到 IoT 设备，低代码平台趋向“一次设计，多端运行”。</li><li><strong>行业化解决方案</strong>：针对金融、制造、医疗等行业推出预置模板与符合行业规范的组件。</li></ol><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><ul><li><strong>可维护性</strong>：平台生成代码的可读性和扩展性常受质疑，需要专业团队保驾护航。</li><li><strong>安全与合规</strong>：如何在自动化生成与迭代中保证代码质量与数据安全，是企业关注重点。</li><li><strong>供应商锁定</strong>：低代码平台生态闭环，定制化开发后难以迁移，需谨慎评估供应商稳定性。</li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>低代码平台通过可视化与元数据驱动技术，极大降低了应用开发门槛，加速了企业数字化转型。不同部署与技术栈的产品满足从公民开发者到专业开发团队的多样需求。未来，随着 AI 辅助与多端一体化的发展，低代码平台将更加智能与灵活，同时也需解决可维护性、安全与供应商锁定等挑战，才能持续赋能各行业的创新与效率提升。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;低代码平台及相关技术介绍&quot;&gt;&lt;a href=&quot;#低代码平台及相关技术介绍&quot; class=&quot;headerlink&quot; title=&quot;低代码平台及相关技术介绍&quot;&gt;&lt;/a&gt;低代码平台及相关技术介绍&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; cla</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-03-微信小程序开发框架详解</title>
    <link href="https://ke-tan.asia/2025/06/03/2025-06-03-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://ke-tan.asia/2025/06/03/2025-06-03-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/</id>
    <published>2025-06-02T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序开发框架详解"><a href="#微信小程序开发框架详解" class="headerlink" title="微信小程序开发框架详解"></a>微信小程序开发框架详解</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://zhaomenghuan.js.org/blog/wechat-miniprogram-principle-analysis.html">微信小程序技术原理分析 | 匠心博客</a></li><li><a href="https://ianwith.github.io/2020/02/12/everything-you-would-like-to-know-about-wechat-mini-program/?utm_source=chatgpt.com">Everything You Would Like to Know About WeChat Mini Program</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/">developers.weixin.qq.com</a></li><li><a href="https://github.com/justjavac/awesome-wechat-weapp?tab=readme-ov-file">GitHub - justjavac/awesome-wechat-weapp: 微信小程序开发资源汇总 </a></li></ul></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>互联网生态演进：超级 APP + 小程序成为「轻应用时代」下的新生态。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364131854QUV7bVLfOoZdmix4JoJcT4utnCb.png" alt="1749364131854QUV7bVLfOoZdmix4JoJcT4utnCb.png"></p><p>小程序方式构建应用是大趋势，被越来越多的企业用户看到其中的优势，构建一个跨多端平台的小程序开发平台是一种思路，帮助企业用户构建一个具备小程序能力的“移动门户”也是一种思路。本文主要调研微信小程序运行时的基本原理，从而构建一个适合我们自己平台的小程序运行框架。</p><p>微信小程序开发可分为<strong>官方原生框架（MINA）与多种第三方跨端开发框架</strong>两大类。官方 MINA 框架提供了 WXML/WXSS/JS 三层模型，以及基于双线程的渲染与逻辑分离机制，适合对微信生态深度依赖的项目；第三方框架则通过封装、编译等手段让 Vue、React、Web 原生等技术栈在小程序中复用，覆盖从单一微信端到多端（小程序 +H5+App）的多种场景。<br>在众多跨端方案中，<strong>uni-app</strong> 与 <strong>Taro</strong> 拥有最活跃的社区和最完善的生态，分别代表 Vue 与 React 技术栈；<strong>Remax</strong> 针对纯 React 而生，适合对 React 语法和生态依赖度极高的团队；<strong>MPVue</strong>、<strong>WePY</strong> 等 Vue 方案已逐步被 uni-app 或 Taro 取代；<strong>Chameleon</strong>、<strong>kbone</strong> 则聚焦于将 Web 应用“原封不动”移植到小程序。下面将从架构原理、技术栈、优缺点、适用场景及选型建议等方面，逐一详解主流框架。</p><hr><h2 id="官方原生框架：MINA"><a href="#官方原生框架：MINA" class="headerlink" title="官方原生框架：MINA"></a>官方原生框架：MINA</h2><p>微信团队自 2016 年推出的 <strong>MINA</strong>（Mobile Instant Application）是小程序的底层运行时与原生开发框架，核心特点包括：</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364140851U8zbbm8B1onhwfxWR7Rc1X2Anvq.png" alt="1749364140851U8zbbm8B1onhwfxWR7Rc1X2Anvq.png"></p><ul><li><strong>双线程模型</strong>：渲染与逻辑各自运行在 WebView 线程和 JsCore 线程，数据同步通过 IPC 方式完成，显著提升 UI 响应。</li><li><strong>四文件结构</strong>：每个小程序由 <code>app.json</code>（全局配置）、<code>app.js</code>（应用逻辑）、<code>app.wxss</code>（全局样式）及若干对应 <code>*.wxml</code>/<code>*.js</code>/<code>*.wxss</code> 的页面文件组成。</li><li><strong>原生 API 丰富</strong>：提供扫码、支付、位置、媒体、网络等数百种接口，适合深度依赖微信生态、追求性能和稳定性的项目。</li><li><strong>数据绑定与事件</strong>：简化视图层与逻辑层交互，开发者可快速上手。</li></ul><p><strong>优点</strong>：官方支持、性能最优、API 齐全<br><strong>缺点</strong>：仅限微信端、不支持跨端复用</p><hr><h2 id="跨端开发框架对比"><a href="#跨端开发框架对比" class="headerlink" title="跨端开发框架对比"></a>跨端开发框架对比</h2><p>主流跨端框架可按技术栈分为 <strong>Vue 系</strong> 与 <strong>React 系</strong>，并包含 Web 应用迁移方案。</p><table><thead><tr><th><strong>框架</strong></th><th><strong>技术栈</strong></th><th><strong>多端支持</strong></th><th><strong>社区活跃度</strong></th><th><strong>状态</strong></th></tr></thead><tbody><tr><td><strong>uni-app</strong></td><td>Vue</td><td>微信/支付宝/百度/字节/QQ/快应用/H5/APP</td><td>⭐⭐⭐⭐ (36.5k Stars)</td><td>维护中</td></tr><tr><td><strong>Taro</strong></td><td>React</td><td>微信/支付宝/百度/字节/QQ/快应用/H5/RN</td><td>⭐⭐⭐⭐ (31k Stars)</td><td>维护中</td></tr><tr><td><strong>Remax</strong></td><td>React</td><td>微信/支付宝/百度等小程序</td><td>⭐⭐⭐ (4.3k Stars)</td><td>维护中</td></tr><tr><td><strong>MPVue</strong></td><td>Vue</td><td>微信/百度等小程序</td><td>⭐⭐⭐ (20k Stars)</td><td>停止维护</td></tr><tr><td><strong>WePY</strong></td><td>Vue</td><td>微信小程序</td><td>⭐ (少量维护)</td><td>alpha, 更新缓慢</td></tr><tr><td><strong>Chameleon</strong></td><td>Vue/React/小程序原生</td><td>微信/支付宝/百度/抖音/快应用</td><td>⭐⭐</td><td>维护中</td></tr><tr><td><strong>kbone</strong></td><td>Web</td><td>将任意 Web 应用”原样”编译到微信小程序</td><td>⭐⭐</td><td>维护中</td></tr></tbody></table><blockquote><p>数据来源：CSDN、GitHub、社区活跃度对比</p></blockquote><h3 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h3><blockquote><ul><li><a href="https://zh.uniapp.dcloud.io/resource.html">uni-app 官网</a></li><li>HBuilderX：<a href="https://www.dcloud.io/hbuilderx.html">官方 IDE 下载地址</a></li></ul></blockquote><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749364151852KAz5bUGAtoOAQ6xv5FscdRFTnph.png" alt="1749364151852KAz5bUGAtoOAQ6xv5FscdRFTnph.png"></p><ul><li><p><strong>核心</strong>：使用 Vue 语法、单文件组件（<code>.vue</code>），通过 HBuilderX 或 CLI 编译到多端。</p></li><li><p><strong>优势</strong>：</p><ul><li>真正“一套代码，多端运行” ；</li><li>丰富插件与 UI 库（如 uView、Vant Weapp）；</li><li>社区活跃，文档完善。</li></ul></li><li><p><strong>劣势</strong>：运行时体积相对较大、对 Vue 特性支持需关注版本兼容。</p></li></ul><h3 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a>Taro</h3><blockquote><ul><li><a href="https://docs.taro.zone/docs/">Taro 介绍 | Taro 文档</a></li><li><a href="https://github.com/NervJS/taro">github.com</a></li><li><a href="https://taro.zone/">Taro | 多端统一开发解决方案</a></li></ul></blockquote><ul><li><p><strong>核心</strong>：使用 React/ 语法，多端编译，支持 React Hooks、TypeScript。</p></li><li><p><strong>优势</strong>：</p><ul><li>React 团队更易上手，编译速度快 ；</li><li>支持多端：小程序、H5、React Native。</li></ul></li><li><p><strong>劣势</strong>：</p><ul><li>部分原生小程序能力需插件或手动配置；</li><li>轻度偏离纯 React 生态，对兼容性需关注。</li></ul></li></ul><h3 id="Remax"><a href="#Remax" class="headerlink" title="Remax"></a>Remax</h3><ul><li><p><strong>核心</strong>：由阿里团队开发，几乎不封装 React API，保持与 React Web 最大一致性 。</p></li><li><p><strong>优势</strong>：</p><ul><li>纯 React 生态，组件迁移成本最低；</li><li>支持 TypeScript。</li></ul></li><li><p><strong>劣势</strong>：</p><ul><li>功能覆盖不如 Taro 全面；</li><li>社区相对小。</li></ul></li></ul><h3 id="MPVue-WePY"><a href="#MPVue-WePY" class="headerlink" title="MPVue & WePY"></a>MPVue &amp; WePY</h3><blockquote><ul><li><a href="http://mpvue.com/mpvue/#-html">使用手册 | mpvue.com</a></li></ul></blockquote><ul><li><strong>MPVue</strong>：Vue 2.x 驱动，早期多端方案，已停止维护。</li><li><strong>WePY</strong>：官方第一代组件化框架，alpha 长期无更新，社区废弃度高。</li></ul><h3 id="Chameleon"><a href="#Chameleon" class="headerlink" title="Chameleon"></a>Chameleon</h3><ul><li><strong>特点</strong>：阿里开源，统一多端 API，组件可复用，支持多种端（微信/支付宝/字节/IOS/Android）。</li><li><strong>关注点</strong>：学习曲线、社区活跃度一般。</li></ul><h3 id="kbone"><a href="#kbone" class="headerlink" title="kbone"></a>kbone</h3><ul><li><strong>特点</strong>：Web 应用快速迁移，模拟 WebView 环境，支持 DOM/BOM，可“零改造”接入热门前端库（Vue/React）。</li><li><strong>使用场景</strong>：已有成熟 Web 产品，希望快速在微信内复用。</li></ul><hr><h2 id="UI-组件库推荐"><a href="#UI-组件库推荐" class="headerlink" title="UI 组件库推荐"></a>UI 组件库推荐</h2><ul><li><strong>WeUI</strong>（官方）</li><li><strong>Vant Weapp</strong>（有赞）</li><li><strong>Wux Weapp</strong></li><li><strong>Color UI</strong>（轻量视觉）</li></ul><hr><h2 id="选型建议"><a href="#选型建议" class="headerlink" title="选型建议"></a>选型建议</h2><ol><li><strong>单微信小程序、无跨端需求</strong> → 推荐使用 <strong>原生 MINA</strong>，直接调用官方 API。</li><li><strong>Vue 团队、多端（含 App/H5）</strong> → <strong>uni-app</strong> 最佳；</li><li><strong>React 团队、多端（含 RN/H5）</strong> → <strong>Taro</strong> 或 <strong>Remax</strong>；</li><li><strong>已有 Web 应用</strong> → <strong>kbone</strong> 零改造迁移；</li><li><strong>轻量化需求</strong> → 可选 <strong>Chameleon</strong>；</li><li><strong>老项目、需维护</strong> → Vue 生态可留用 <strong>MPVue</strong>；React 生态留用 <strong>Remax</strong>。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;微信小程序开发框架详解&quot;&gt;&lt;a href=&quot;#微信小程序开发框架详解&quot; class=&quot;headerlink&quot; title=&quot;微信小程序开发框架详解&quot;&gt;&lt;/a&gt;微信小程序开发框架详解&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-02-数据库的分类和应用</title>
    <link href="https://ke-tan.asia/2025/06/02/2025-06-02-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%BA%94%E7%94%A8/"/>
    <id>https://ke-tan.asia/2025/06/02/2025-06-02-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%88%86%E7%B1%BB%E5%92%8C%E5%BA%94%E7%94%A8/</id>
    <published>2025-06-01T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库的分类和应用"><a href="#数据库的分类和应用" class="headerlink" title="数据库的分类和应用"></a>数据库的分类和应用</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://www.cnblogs.com/zhaojingyu/p/8873991.html?utm_source=chatgpt.com">数据库介绍与分类 - 随心朝阳 - 博客园</a></li><li><a href="https://aws.amazon.com/cn/blogs/china/how-to-choose-among-different-database-categories/?utm_source=chatgpt.com">众多的数据库类型，你该怎么选择？ | Amazon Web Services</a></li><li><a href="https://www.astera.com/zh-CN/type/blog/a-quick-overview-of-different-types-of-databases/?utm_source=chatgpt.com">数据库类型：2025 年需要了解的一切 | Astera</a></li><li><a href="https://blog.csdn.net/m0_72410588/article/details/131230227?utm_source=chatgpt.com">面向对象数据库详解:概念、设计与优化-CSDN 博客</a></li><li><a href="https://blog.csdn.net/ypluo/article/details/104641730?utm_source=chatgpt.com">面向对象数据库解析-CSDN 博客</a></li><li><a href="https://www.cnblogs.com/myshowtime/p/16489514.html">www.cnblogs.com</a></li></ul></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>数据库就是一个存放数据的仓库，这个仓库按照一定的数据结构（数据结构是指数据的组织形式或数据之间的联系）来组织存储的，我们可以通过数据库提供的多种方法来管理数据库里的数据。</p><p>　　我们的程序都是在内存中运行的，一旦程序运行结束或者计算机断电，程序运行中的数据都会丢失,所以我们就需要将一些程序运行的数据持久化到硬盘之中，以确保数据的安全性。说白了，数据库就是存储数据的仓库。</p><blockquote><p>下面是数据库引擎的实时排名网站</p></blockquote><blockquote><ul><li><a href="https://db-engines.com/en/ranking">DB-Engines Ranking</a></li></ul></blockquote><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363632854DIYJbWTVbodBoBxVMgLclkiTnKh.png" alt="1749363632854DIYJbWTVbodBoBxVMgLclkiTnKh.png"></p><h2 id="关系型数据库（RDBMS）"><a href="#关系型数据库（RDBMS）" class="headerlink" title="关系型数据库（RDBMS）"></a>关系型数据库（RDBMS）</h2><p>关系型数据库以<strong>表—行—列</strong>结构存储数据，通过外键管理实体间关联，支持复杂联表和事务处理，是最成熟的数据库类型 。它使用 ANSI SQL 作为标准查询语言，可执行多表 JOIN、子查询和存储过程等操作，满足 OLTP（联机事务处理）场景需求 。</p><h3 id="架构与事务"><a href="#架构与事务" class="headerlink" title="架构与事务"></a>架构与事务</h3><p>主流 RDBMS 如 MySQL（InnoDB 引擎）和 PostgreSQL 采用<strong>多版本并发控制（MVCC）实现高并发读写，同时提供行级锁、两阶段锁等机制保证隔离性 。在分布式部署中，一般通过主从复制</strong>、<strong>读写分离</strong>、<strong>分库分表</strong>或中间件 ShardingSphere 实现水平扩展，解决单机性能瓶颈。</p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li><strong>索引设计</strong>：B+ 树、哈希索引和全文索引，各有取舍；</li><li><strong>查询优化</strong>：执行计划（EXPLAIN）、覆盖索引、分区表减少 I/O；</li><li><strong>缓存机制</strong>：如 MySQL Query Cache（已弃用）与 Buffer Pool；</li><li><strong>物理架构</strong>：SSD 替换 HDD、NUMA 拆分及内存调优 。</li></ul><h3 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h3><ul><li><strong>电商订单系统</strong>：保证库存扣减的强一致性与事务原子性；</li><li><strong>金融支付场景</strong>：对账、清分要求 ACID 特性；</li><li><strong>企业级 CRM/ERP</strong>：多表联动，复杂报表生成 。</li></ul><hr><h2 id="NoSQL-数据库"><a href="#NoSQL-数据库" class="headerlink" title="NoSQL 数据库"></a>NoSQL 数据库</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363644852Vbg5bEP8gorZu8xdFGzcvskhn4e.png" alt="1749363644852Vbg5bEP8gorZu8xdFGzcvskhn4e.png"></p><p>NoSQL 数据库借助灵活的数据模型和可线性扩展架构，应对大数据、高并发与非结构化场景。主要分为以下几类：</p><h3 id="键值存储（Key–Value）"><a href="#键值存储（Key–Value）" class="headerlink" title="键值存储（Key–Value）"></a>键值存储（Key–Value）</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363668852Nb0IbN0C2oIFKqxLYXvcB6uTnvf.png" alt="1749363668852Nb0IbN0C2oIFKqxLYXvcB6uTnvf.png"><br><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363676852HnxhbGx8kofa7uxydEEcpm5Ynrd.png" alt="1749363676852HnxhbGx8kofa7uxydEEcpm5Ynrd.png"></p><p>键值数据库以唯一键（Key）直接定位值（Value），最典型产品是 Redis 与 Memcached 。</p><ul><li><strong>Redis</strong> 支持字符串、列表、集合、有序集合及哈希等多种数据类型，并提供持久化（RDB/AOF）与主从复制功能，可用作缓存、分布式锁、消息队列等 。</li><li><strong>Memcached</strong> 轻量且高性能，专注内存缓存，适合对持久化需求不高的场景 。</li></ul><h3 id="文档存储（Document）"><a href="#文档存储（Document）" class="headerlink" title="文档存储（Document）"></a>文档存储（Document）</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363690852HH52bVf6RoelESxNCobcq4PonBe.png" alt="1749363690852HH52bVf6RoelESxNCobcq4PonBe.png"></p><p>文档数据库以 JSON/BSON 形式存储半结构化数据，Collections 与 Documents 对应 RDBMS 的表与行。</p><ul><li><strong>MongoDB</strong> 提供二级索引、聚合框架与复制集、分片集群，可动态 Schema、轻松存储嵌套对象，常用于内容管理、用户画像和配置中心 。</li><li><strong>Amazon DocumentDB</strong>（兼容 MongoDB）则是托管型服务，简化集群管理 。</li></ul><h3 id="列族存储（Column-Family）"><a href="#列族存储（Column-Family）" class="headerlink" title="列族存储（Column-Family）"></a>列族存储（Column-Family）</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363699853GUOMbxwMAoXTgSxByxRcA69xnpc.png" alt="1749363699853GUOMbxwMAoXTgSxByxRcA69xnpc.png"></p><p>列族数据库以列簇方式存储行数据，适合宽表和稀疏表场景 。</p><ul><li><strong>Apache Cassandra</strong> 采用去中心化 P2P 架构，利用 Gossip 协议和一致性哈希分布数据，支持跨 DC 多活部署；</li><li><strong>Apache HBase</strong> 构建于 HDFS 之上，通过 RegionServer 管理数据分片，擅长大规模时序和日志数据存储 。</li></ul><p>这两者广泛应用于<strong>物联网指标存储</strong>、<strong>用户行为日志</strong>及<strong>大规模特征库</strong>等场景 。</p><h3 id="图数据库（Graph）"><a href="#图数据库（Graph）" class="headerlink" title="图数据库（Graph）"></a>图数据库（Graph）</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363706852RdqubF5YqoW6I7xaDbxcUGmQnug.png" alt="1749363706852RdqubF5YqoW6I7xaDbxcUGmQnug.png"></p><p>图数据库基于<strong>属性图模型</strong>，节点（Node）和边（Edge）存储实体及其关系，擅长多跳遍历与图算法。</p><ul><li><strong>Neo4j</strong> 原生支持 ACID 图事务和 Cypher 查询语言，适合<strong>社交网络</strong>、<strong>知识图谱</strong>及<strong>欺诈检测</strong>场景 。</li><li><strong>JanusGraph</strong> 支持后端 Cassandra、HBase 存储，可结合 Gremlin 实现分布式图计算 。</li></ul><h3 id="面向对象数据库（OODBMS）"><a href="#面向对象数据库（OODBMS）" class="headerlink" title="面向对象数据库（OODBMS）"></a>面向对象数据库（OODBMS）</h3><blockquote><ul><li><a href="https://www.ruanyifeng.com/blog/2019/02/orm-tutorial.html?utm_source=chatgpt.com">ORM 实例教程 - 阮一峰的网络日志</a></li></ul></blockquote><h3 id="ORM-实例"><a href="#ORM-实例" class="headerlink" title="ORM 实例"></a>ORM 实例</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363723088H85CbxxlqoFbC2xvZDxc3roZnXc.png" alt="1749363723088H85CbxxlqoFbC2xvZDxc3roZnXc.png"></p><p><strong>简单说，ORM 就是通过实例对象的语法，完成关系型数据库的操作的技术，是”对象-关系映射”（Object/Relational Mapping） 的缩写。</strong></p><p>ORM 把数据库映射成对象。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363730852LJKCbJUiPoMluPxXMtOcAHb1nQd.png" alt="1749363730852LJKCbJUiPoMluPxXMtOcAHb1nQd.png"></p><p>面向对象数据库将 OOP 对象直接存储于数据库，支持类、继承与方法 。它适用于 <strong>CAD/CAE</strong>、<strong>嵌入式系统</strong>与 <strong>GIS</strong> 等复杂对象场景，避免了 ORM 带来的映射开销。</p><h3 id="层次式与网状数据库"><a href="#层次式与网状数据库" class="headerlink" title="层次式与网状数据库"></a>层次式与网状数据库</h3><ul><li><strong>层次式数据库</strong>（IMS、Windows 注册表）使用父子一对多结构，检索效率高但缺乏灵活性 。</li><li><strong>网状数据库</strong> 允许多对多父子关系，曾用于大型主机系统，如 IDMS，但因查询复杂逐步被关系型数据库取代 。</li></ul><hr><h2 id="NewSQL：ACID-分布式扩展"><a href="#NewSQL：ACID-分布式扩展" class="headerlink" title="NewSQL：ACID + 分布式扩展"></a>NewSQL：ACID + 分布式扩展</h2><p>NewSQL 兼顾了关系型 SQL 事务和 NoSQL 的水平扩展能力，通常基于 Raft、Paxos 或 Google TrueTime 协议实现分布式一致性 。</p><ul><li><strong>TiDB</strong> 通过 PD+TiKV 自动分片、调度，兼容 MySQL 协议，适用于流量大、节点众多的 OLTP 场景 。</li><li><strong>CockroachDB</strong> 利用 Raft 保证多副本强一致，支持多活部署；</li><li><strong>Google Spanner</strong> 则借助硬件时钟同步提供全球一致性 。</li></ul><p>NewSQL 常见于<strong>互联网金融</strong>、<strong>全链路电商订单</strong>等要求强一致且海量扩展的场景 。</p><hr><h2 id="专用型数据库"><a href="#专用型数据库" class="headerlink" title="专用型数据库"></a>专用型数据库</h2><h3 id="时序数据库"><a href="#时序数据库" class="headerlink" title="时序数据库"></a>时序数据库</h3><p>针对<strong>时间序列</strong>做了专门优化，包括写密集、压缩、高效时间窗口查询 。</p><ul><li><strong>InfluxDB</strong> 的 TSM 引擎和 TICK Stack 生态；</li><li><strong>TimescaleDB</strong> 基于 PostgreSQL 分区表实现，兼容 SQL 与生态 。</li></ul><h3 id="地理空间数据库"><a href="#地理空间数据库" class="headerlink" title="地理空间数据库"></a>地理空间数据库</h3><ul><li><strong>PostGIS</strong> 在 PostgreSQL 上提供 GiST 空间索引；</li><li><strong>MongoDB 2dsphere</strong> 支持 GeoJSON 查询 。</li></ul><h3 id="全文搜索与分析引擎"><a href="#全文搜索与分析引擎" class="headerlink" title="全文搜索与分析引擎"></a>全文搜索与分析引擎</h3><ul><li><strong>Elasticsearch</strong> 基于 Lucene，支持倒排索引、聚合分析及 Near Real-Time（NRT）搜索 。</li><li>常与 <strong>Logstash/Beats/Kibana</strong> 构建 ELK 堆栈，用于日志收集、处理与可视化 。</li></ul><hr><h2 id="混合架构与选型指南"><a href="#混合架构与选型指南" class="headerlink" title="混合架构与选型指南"></a>混合架构与选型指南</h2><p>大型系统普遍采用 <strong>Polyglot Persistence</strong>，不同业务模块选用最合适的存储引擎：</p><ul><li><strong>缓存层</strong>：Redis/Memcached 提升读写性能 。</li><li><strong>核心事务</strong>：MySQL/PostgreSQL 或 TiDB/CockroachDB 保证 ACID 。</li><li><strong>流式处理</strong>：Kafka、RabbitMQ 解耦异步；</li><li><strong>实时 BI</strong>：Elasticsearch/ClickHouse 提供快速聚合 。</li></ul><h3 id="选型建议"><a href="#选型建议" class="headerlink" title="选型建议"></a>选型建议</h3><ol><li><strong>强一致事务</strong> → 关系型/NewSQL</li><li><strong>超高并发缓存</strong> → Redis/Memcached</li><li><strong>半结构化文档</strong> → MongoDB/DocumentDB</li><li><strong>宽表稀疏存储</strong> → Cassandra/HBase</li><li><strong>复杂关系分析</strong> → Neo4j/JanusGraph</li><li><strong>时序数据</strong> → InfluxDB/TimescaleDB</li><li><strong>全文检索</strong> → Elasticsearch</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库的分类和应用&quot;&gt;&lt;a href=&quot;#数据库的分类和应用&quot; class=&quot;headerlink&quot; title=&quot;数据库的分类和应用&quot;&gt;&lt;/a&gt;数据库的分类和应用&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-02-IP 地址规划及案例分析</title>
    <link href="https://ke-tan.asia/2025/06/02/2025-06-02-IP%20%E5%9C%B0%E5%9D%80%E8%A7%84%E5%88%92%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://ke-tan.asia/2025/06/02/2025-06-02-IP%20%E5%9C%B0%E5%9D%80%E8%A7%84%E5%88%92%E5%8F%8A%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</id>
    <published>2025-06-01T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IP-地址规划及案例分析"><a href="#IP-地址规划及案例分析" class="headerlink" title="IP 地址规划及案例分析"></a>IP 地址规划及案例分析</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/ready/azure-best-practices/plan-for-ip-addressing?utm_source=chatgpt.com">Plan for IP addressing - Cloud Adoption Framework</a></li><li><a href="https://www.cnblogs.com/zhchoutai/p/6932604.html">www.cnblogs.com</a></li><li><a href="https://github.com/jonsam-ng/image-hosting/tree/master/articles">image-hosting/articles at master · jonsam-ng/image-hosting</a></li></ul></blockquote><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在网络通信中，<strong>MAC 地址</strong>与 <strong>IP 地址</strong>分别位于 OSI 模型的数据链路层和网络层，二者协同完成从局域到广域的可靠互联。MAC 地址由 IEEE 分配的 OUI（组织唯一标识符）和厂商自定义部分构成，对应真实硬件；IP 地址则分为网络号与主机号，用以逻辑上定位主机并实现跨网段路由。</p><p>IP 地址（Internet Protocol Address），缩写为 IP Adress，是一种在 Internet 上的给主机统一编址的地址格式，也称为网络协议（IP 协议）地址。它为互联网上的每一个网络和每一台主机分配一个逻辑地址，常见的 IP 地址，分为 IPv4 与 IPv6 两大类，当前广泛应用的是 IPv4，目前 IPv4 几乎耗尽，下一阶段必然会进行版本升级到 IPv6；如无特别注明，一般我们讲的的 IP 地址所指的是 IPv4。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363873852HlvKbpXGzoKjxBxn7Zoclw6Knjf.png" alt="1749363873852HlvKbpXGzoKjxBxn7Zoclw6Knjf.png"></p><h2 id="进制转换回顾"><a href="#进制转换回顾" class="headerlink" title="进制转换回顾"></a>进制转换回顾</h2><p>在理解 IP 地址（二进制）与点分十进制表示之前，必须熟练掌握二进制与十进制互转。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363883851MwwKbhLFVoIeQzxsXQUcS9TSnjh.png" alt="1749363883851MwwKbhLFVoIeQzxsXQUcS9TSnjh.png"></p><ul><li><strong>二进制权值</strong>：第 n 位表示 2ⁿ。八位二进制可表示 0–255，共 2⁸ 种状态。</li><li><strong>示例</strong>：<code>11010010₂ = 1·2⁷ +1·2⁶+0·2⁵+1·2⁴+0·2³+0·2²+1·2¹+0·2⁰ = 128+64+16+2 = 210</code>。<br>掌握“相邻位权值相差两倍”规律，可快速记忆 2⁰–2⁷ 的所有幂值。</li></ul><h2 id="MAC-地址（数据链路层）"><a href="#MAC-地址（数据链路层）" class="headerlink" title="MAC 地址（数据链路层）"></a>MAC 地址（数据链路层）</h2><h3 id="组成与格式"><a href="#组成与格式" class="headerlink" title="组成与格式"></a>组成与格式</h3><ul><li><strong>长度</strong>：48 位（二进制），通常写作 6 个字节的十六进制，用冒号或中划线分隔，如 <code>AC:DE:48:23:45:67</code>。</li><li><strong>结构</strong>：前 24 位为 OUI（Organizationally Unique Identifier），由 IEEE 分配，标识厂家；后 24 位是厂商自行分配的扩展标识符，用以唯一定位网卡。</li><li><strong>示例</strong>：OUI <code>AC-DE-48</code> 可能对应某厂商生产的设备，其余 24 位由该厂商自由定义。</li></ul><h3 id="功能与用途"><a href="#功能与用途" class="headerlink" title="功能与用途"></a>功能与用途</h3><ul><li><strong>帧转发</strong>：交换机根据数据帧头部的目标 MAC 地址在 CAM 表中查找对应端口，实现二层转发。</li><li><strong>设备识别</strong>：在安全和取证场景，可通过 OUI 识别厂商及设备类型。</li></ul><h2 id="IP-地址（网络层）"><a href="#IP-地址（网络层）" class="headerlink" title="IP 地址（网络层）"></a>IP 地址（网络层）</h2><h3 id="IPv4-格式与点分十进制"><a href="#IPv4-格式与点分十进制" class="headerlink" title="IPv4 格式与点分十进制"></a>IPv4 格式与点分十进制</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363894091BwTFbPQc1oFOhKxYbGwcq5RmnGf.png" alt="1749363894091BwTFbPQc1oFOhKxYbGwcq5RmnGf.png"></p><ul><li><strong>32 位地址</strong>由四段 8 位二进制组成，每段转换为 0–255 的十进制，使用“点”分隔，如 <code>192.168.1.1</code>。</li><li><strong>网/主分界</strong>：通过子网掩码（如 <code>255.255.255.0</code> 或 <code>/24</code>）区分网络号与主机号。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363900852GyfsbRbmGojzzwxUYr9ca4OVnEg.png" alt="1749363900852GyfsbRbmGojzzwxUYr9ca4OVnEg.png"></p><h3 id="IP-与-MAC-的协作"><a href="#IP-与-MAC-的协作" class="headerlink" title="IP 与 MAC 的协作"></a>IP 与 MAC 的协作</h3><ul><li><strong>ARP</strong> 协议：主机先判断目标 IP 是否与自身在同一子网；若不同，则将下一跳路由器的 MAC 用于帧封装；若相同，则直接将目标主机 MAC 用于帧封装。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363908852I8SCbAE7WoWf71xo1sBcUdNGndf.png" alt="1749363908852I8SCbAE7WoWf71xo1sBcUdNGndf.png"></p><ul><li><strong>过程</strong>：<ol><li>网络层生成包含源/目标 IP 的数据包；</li><li>数据链路层封装源/目标 MAC，并在局域内通信；</li><li>路由器根据 IP 决定下一跳，MAC 则由 ARP 动态解析。</li></ol></li></ul><hr><h2 id="IPv4-地址分类"><a href="#IPv4-地址分类" class="headerlink" title="IPv4 地址分类"></a>IPv4 地址分类</h2><p>IPv4 按首字节前缀分为五类：A/B/C 类用于主机寻址，D 类用于多播，E 类保留。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363916852LDaWb0dWrojXS8xdRK0cMcQOnNb.png" alt="1749363916852LDaWb0dWrojXS8xdRK0cMcQOnNb.png"></p><ul><li><strong>网络地址</strong>：主机 ID 全 0（如 <code>192.168.1.0</code>）。</li><li><strong>广播地址</strong>：主机 ID 全 1（如 <code>192.168.1.255</code>）。</li><li><strong>环回地址</strong>：<code>127.0.0.1</code>，测试本机网络堆栈。</li><li><strong>自动私有 IP</strong>：<code>169.254.0.0–169.254.255.255</code>，DHCP 失败时自动生成。</li><li><strong>全 0/全 1</strong>：<code>0.0.0.0</code>、<code>255.255.255.255</code> 用于内部通信及本地广播。</li></ul><h3 id="A-类地址"><a href="#A-类地址" class="headerlink" title="A 类地址"></a>A 类地址</h3><p>A 类地址的网络号（net-id）占 8 位，且其二进制第一位固定为 <code>0</code>，因此 A 类网络的网络号范围为 0 至 127，共计 128 个网络。</p><ul><li><strong>网络号 0</strong>（地址范围 <code>0.0.0.0</code> ~ <code>0.255.255.255</code>）被保留，用于表示“本网络”。</li><li><strong>网络号 127</strong>（地址范围 <code>127.0.0.0</code> ~ <code>127.255.255.255</code>）被保留，用作环回测试地址。</li><li><strong>网络号 10</strong>（地址范围 <code>10.0.0.0</code> ~ <code>10.255.255.255</code>）被指定为私有地址，用于内部网络。</li></ul><p>除去这些特殊用途的网络，实际可公开分配的 A 类网络共有 125 个（从网络号 1 到 126，再除去网络号 10）。每一个 A 类网络的主机号（host-id）占 24 位，理论上可分配 <code>2^24</code> 个主机地址。但由于主机号全为 <code>0</code> 的地址代表网络本身，全为 <code>1</code> 的地址代表网络广播地址，这两个地址需被保留，因此每个 A 类网络实际可用的主机数量为 <code>2^24 - 2 = 16,777,214</code> 个。</p><h3 id="B-类地址"><a href="#B-类地址" class="headerlink" title="B 类地址"></a>B 类地址</h3><p>B 类地址的网络号占 16 位，且其二进制前两位固定为 <code>10</code>，这使得 B 类网络的数量为 <code>2^(16-2) = 2^14 = 16,384</code> 个。B 类地址的主机号同样占 16 位，因此每个 B 类网络理论上可拥有 <code>2^16 = 65,536</code> 个主机地址。同样，除去代表网络本身（主机号全 <code>0</code>）和广播（主机号全 <code>1</code>）的两个保留地址，每个 B 类网络实际可分配的主机数量为 <code>65,536 - 2 = 65,534</code> 个。</p><h3 id="C-类地址"><a href="#C-类地址" class="headerlink" title="C 类地址"></a>C 类地址</h3><p>C 类地址的网络号占 24 位，其二进制前三位固定为 <code>110</code>，因此可用的 C 类网络总数高达 <code>2^(24-3) = 2^21 = 2,097,152</code> 个。C 类地址的主机号仅占 8 位，每个网络最多可容纳 <code>2^8 = 256</code> 个主机地址。在扣除用于网络标识和广播的两个保留地址后，每个 C 类网络实际上允许分配的主机数量为 <code>256 - 2 = 254</code> 个。</p><h3 id="特殊地址形式"><a href="#特殊地址形式" class="headerlink" title="特殊地址形式"></a>特殊地址形式</h3><p>特殊的 IP 地址主要包括以下几种：</p><ul><li><strong>直接广播地址 (Directed Broadcast)</strong></li></ul><p>直接广播地址是指主机号（host-id）部分全为 1 的地址。它用于向特定远程网络上的所有主机发送广播数据包。例如，若要向网络 201.161.20.0 上的所有主机广播，发送方需要将数据包的目的地址设置为该网络的直接广播地址 201.161.20.255。路由器在接收到此数据包后，会将其转发到目标网络进行广播。</p><ul><li><strong>受限广播地址 (Limited Broadcast)</strong></li></ul><p>受限广播地址是一个固定的地址 255.255.255.255。它用于向主机所在的本地物理网络（即同一广播域内）的所有设备发送广播。与直接广播不同，路由器绝不会转发目的地址为 255.255.255.255 的数据包，从而将广播范围严格限制在本地网段内。</p><ul><li><strong>“本网络上的特定主机”地址</strong></li></ul><p>这是一个网络号（net-id）部分全为 0 的地址，格式为 0.0.0.x。这种地址格式用于指代“本网络”上的某个特定主机。它通常在设备的启动阶段（如使用 BOOTP 或 DHCP 协议获取 IP 地址时）被使用，此时设备可能还不知道自己所在网络的网络号，但需要与本地网络上的某个服务器（如 DHCP 服务器）进行通信。</p><ul><li><strong>回环地址 (Loopback Address)</strong></li></ul><p>A 类网络中的 127.0.0.0/8 网段被保留为回环地址。这类地址主要用于网络软件的测试以及同一台主机上不同进程间的通信。根据 TCP/IP 协议规定，任何目的地址为 127.0.0.0/8 的数据包都不会被发送到任何网络上，而是在操作系统内核的网络协议栈中被“环回”，直接发送给本机。最常用的回环地址是 127.0.0.1，通常被赋予主机名 localhost。</p><h2 id="专用-ip-地址与内部网络地址规划方法"><a href="#专用-ip-地址与内部网络地址规划方法" class="headerlink" title="**专用 ip 地址与内部网络地址规划方法 **"></a>**专用 ip 地址与内部网络地址规划方法 **</h2><h3 id="全局-IP-地址与专用-IP-地址"><a href="#全局-IP-地址与专用-IP-地址" class="headerlink" title="全局 IP 地址与专用 IP 地址"></a>全局 IP 地址与专用 IP 地址</h3><ul><li>全局 IP 地址与专用 IP 地址的区别：</li></ul><p>（1）使用 IP 地址的网络可以分为两种情况：一种是要将网络之间连到 Internet；另一种是也需要运行 TCP/IP 协议，但是它是内部网络，并不直接连接到 Internet，但网络内部用户访问 Internet 是受到严格控制的。</p><p>（2）使用全局 IP 地址是需要申请的，而专用 IP 地址是不需要申请的。</p><p>（3）全局 IP 地址必须保证在 Internet 上是唯一的；专用 IP 地址在某一个网络内部是唯一 的，但是在 Internet 中并不是唯一的。</p><ul><li>专用 IP 地址(私有地址)</li></ul><p>A 类：<strong>10</strong>.0.0.0～10.255.255.255</p><p>B 类：<strong>172.16</strong>.0.0～<strong>172.31</strong>.255.255</p><p>C 类：<strong>192.168</strong>.0.0～192.168.255.255</p><h2 id="公网-vs-私网"><a href="#公网-vs-私网" class="headerlink" title="公网 vs 私网"></a>公网 vs 私网</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749363931852LjYIbYN3Uo4ED1xRWxGcyqnanQh.png" alt="1749363931852LjYIbYN3Uo4ED1xRWxGcyqnanQh.png"></p><h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><p>RFC 1918 定义三大私有网段，供企业/家庭网络内部使用，不在公网路由表中出现：</p><ul><li>A 类：<code>10.0.0.0/8</code>（16,777,216 主机）</li><li>B 类：<code>172.16.0.0/12</code>（1,048,576 主机）</li><li>C 类：<code>192.168.0.0/16</code>（65,536 主机）</li></ul><h3 id="NAT-与-PAT"><a href="#NAT-与-PAT" class="headerlink" title="NAT 与 PAT"></a>NAT 与 PAT</h3><p>私网访问互联网需通过 <strong>NAT</strong>（网络地址转换）或 <strong>PAT</strong>（端口地址转换）映射到公网 IP，保证内部地址不被外部路由学习 。</p><ul><li><strong>静态 NAT</strong>：一对一映射，适合服务器发布服务。</li><li><strong>动态 PAT</strong>：多对一映射，使用端口区分，适合大量终端访问。</li></ul><h3 id="IPv4-与私有地址"><a href="#IPv4-与私有地址" class="headerlink" title="IPv4 与私有地址"></a>IPv4 与私有地址</h3><p>IPv4 地址由 32 位二进制构成，通常用点分十进制（如 192.168.1.0/24）表示 。</p><p>RFC 1918 规定了三大私有地址块：10.0.0.0/8、172.16.0.0/12、192.168.0.0/16，仅限内部网络使用，不可在互联网上路由。</p><p>在实际规划中，应优先采用私有网段以降低公开地址成本，并在边界路由器或 NAT 设备处做地址转换 。</p><h3 id="IPv6-过渡考虑"><a href="#IPv6-过渡考虑" class="headerlink" title="IPv6 过渡考虑"></a>IPv6 过渡考虑</h3><p>随着地址耗尽问题加剧，IPv6（128 位地址）正在逐步部署。常见做法是在新业务或数据中心网段使用 IPv6，同时保留 IPv4 私网以兼容旧设备 。</p><p>规划 IPv6 前缀（/48、/56）时，也需考虑区域汇总与自治系统号分配，以免碎片化 。</p><hr><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><h3 id="层次化与路由聚合"><a href="#层次化与路由聚合" class="headerlink" title="层次化与路由聚合"></a>层次化与路由聚合</h3><p>将地址空间按 <strong>区域-楼层-部门</strong> 分层划分，确保上层分配连续大块前缀可在骨干路由中做 <strong>supernet</strong> 汇总 。<br>例如：校园网中，可将 10.10.0.0/16 划为 10.10.0.0/18（教学楼）、10.10.64.0/18（宿舍区）等，然后按楼层再细分 /24 子网 。</p><h3 id="可扩展性与预留"><a href="#可扩展性与预留" class="headerlink" title="可扩展性与预留"></a>可扩展性与预留</h3><p>在每个子网中预留至少 <strong>25%–50%</strong> 的地址池用于未来增长或临时接入 。<br>对大型站点，应采用 <strong>VLSM</strong>（可变长子网掩码）精细分配，既节约地址又保持灵活性 。</p><h3 id="易管理与可识别"><a href="#易管理与可识别" class="headerlink" title="易管理与可识别"></a>易管理与可识别</h3><p>子网编号应具有业务含义，如 10.1.10.0/24 代表“1 号楼 10 层”。</p><p>文档化至关重要，建议使用 IPAM 工具记录子网、VLAN、DHCP 范围与分配策略，以便审计与冲突检测 。</p><hr><h2 id="规划方法"><a href="#规划方法" class="headerlink" title="规划方法"></a>规划方法</h2><ol><li>需求调研</li></ol><ul><li>收集各办公区/数据中心/访客网的 <strong>物理位置</strong>、<strong>设备数量</strong>、<strong>未来三年增长</strong>预测和 <strong>服务类型</strong> 。</li><li>按区域汇总并记录到表格，做子网大小初步估算。</li></ul><ol><li>地址池选择</li></ol><ul><li><strong>公网场景</strong>：向 RIR（APNIC/ARIN 等）或云厂商（Azure、AWS）申请适当大小的 IPv4/IPv6 前缀 。</li><li><strong>私网场景</strong>：优先使用 RFC 1918 地址，并在边界 NAT 设备上管理公网出口。</li></ul><ol><li>子网划分</li></ol><ul><li><p>按每个区域/部门所需 <strong>主机数</strong> 选定合适掩码：</p><ul><li>≤ 254 台 → /24，</li><li>≤ 510 台 → /23；</li><li>≥ 1000 台 → /22 或更大。</li></ul></li><li><p>使用 VLSM 将大块地址细分为多级子网，避免过度浪费 。</p></li></ul><ol><li>静态 vs 动态分配</li></ol><ul><li><strong>静态</strong>：核心路由器、交换机管理接口、服务器、链路（/30）等关键设备使用固定 IP 。</li><li><strong>动态</strong>：普通终端、打印机、访客等设备通过 DHCP 自动获取，减少人工配置出错 。</li></ul><ol><li>路由汇总与策略</li></ol><ul><li>在骨干路由器上对区域前缀（如 10.10.0.0/18）做汇总，减少全网路由表项 。</li><li>设置静态或 BGP 聚合路由，避免过细前缀被外部路由器学习。</li></ul><hr><h2 id="IPAM-工具与自动化"><a href="#IPAM-工具与自动化" class="headerlink" title="IPAM 工具与自动化"></a>IPAM 工具与自动化</h2><ol><li>开源 IPAM</li></ol><ul><li><strong>phpIPAM</strong>：内置扫描工具可发现并维持实际分配状态，适合小到中型网络 。</li><li><strong>NetBox</strong>：强调“源自真相”，通过 API 驱动自动化分配，推荐作为“网络源型”工具。</li></ul><ol><li>云厂商托管 IPAM</li></ol><ul><li><strong>Azure IPAM</strong>：集成在 Azure Portal，可跨订阅/区域跟踪私有前缀和公共地址 。</li><li><strong>AWS VPC IPAM</strong>：支持多 VPC 地址池管理、配额警报与自动化调整 。</li></ul><ol><li>审计与报告</li></ol><ul><li>定期使用 IPAM 工具生成地址使用率、冲突检测与过期租约报告，确保地址库健康 。</li></ul><hr><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><h3 id="案例-1：高校园区网划分"><a href="#案例-1：高校园区网划分" class="headerlink" title="案例 1：高校园区网划分"></a>案例 1：高校园区网划分</h3><ul><li><p><strong>需求</strong>：四栋教学楼（共 1200 台设备）、两栋宿舍楼（共 800 台设备）、数据中心及访客 WLAN。</p></li><li><p><strong>方案</strong>：</p><ol><li>整体地址块 10.10.0.0/16；</li><li>教学楼按楼层划分为 10.10.(1–4).0/20，每栋留 4 个 /22 子网；</li><li>宿舍楼 10.10.64.0/21；</li><li>数据中心 10.10.96.0/26；</li><li>访客 WLAN 10.10.96.64/26，专用 DHCP 池每日回收。</li></ol></li><li><p><strong>效果</strong>：大区汇总为 10.10.0.0/16，仅需一条骨干路由 。</p></li></ul><h3 id="案例-2：中型企业-IP-冲突整治"><a href="#案例-2：中型企业-IP-冲突整治" class="headerlink" title="案例 2：中型企业 IP 冲突整治"></a>案例 2：中型企业 IP 冲突整治</h3><ul><li><p><strong>背景</strong>：静态分配与零散 DHCP 池导致频繁冲突，影响办公网络可用性。</p></li><li><p><strong>整改</strong>：</p><ol><li>部署 <strong>中央 DHCP</strong> + 地址保留；</li><li>使用 InterLIR 审计脚本扫描旧表并清理未用地址 ；</li><li>核心/交换管理接口迁移至独立 /29 静态段。</li></ol></li><li><p><strong>结果</strong>：冲突率降至 0，网络可用率提升至 99.99%。</p></li></ul><h3 id="案例-3：政府专网混合使用"><a href="#案例-3：政府专网混合使用" class="headerlink" title="案例 3：政府专网混合使用"></a>案例 3：政府专网混合使用</h3><ul><li><p><strong>需求</strong>：公网地址 59.223.0.0/16 用于骨干与边界，内网使用 10.0.0.0/8。</p></li><li><p><strong>方案</strong>：</p><ol><li>骨干与边界服务：59.223.0.0/24；</li><li>各部门办公：10.1.0.0/16，再细分 10.1.X.0/24；</li><li>预留 3 个 /24 子网，支持未来扩容 。</li></ol></li><li><p><strong>优势</strong>：公网/私网隔离，NAT 配置集中，简化内部路由表并增强安全性。</p></li></ul><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li><strong>进制转换</strong>是理解 IP 表示与子网划分的基础；</li><li><strong>MAC 地址</strong>由 IEEE 分配的 OUI 与厂商自定义部分构成，为二层交换提供通信标识；</li><li><strong>IP 地址</strong>分网络号与主机号，通过子网掩码确定可用主机范围；</li><li><strong>IP 分类</strong>（A/B/C/D/E 类）与<strong>特殊地址</strong>（广播、环回、APIPA）保证了网络分段与管理；</li><li><strong>私网地址</strong>结合 <strong>NAT/PAT</strong> 实现内外网互通，同时保持内部地址安全；</li><li>理解二层 MAC 与三层 IP 的<strong>协作</strong>（ARP 流程）是网络故障排查与优化的关键。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IP-地址规划及案例分析&quot;&gt;&lt;a href=&quot;#IP-地址规划及案例分析&quot; class=&quot;headerlink&quot; title=&quot;IP 地址规划及案例分析&quot;&gt;&lt;/a&gt;IP 地址规划及案例分析&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; cla</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-06-01-Hive 技术及应用介绍</title>
    <link href="https://ke-tan.asia/2025/06/01/2025-06-01-Hive%20%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://ke-tan.asia/2025/06/01/2025-06-01-Hive%20%E6%8A%80%E6%9C%AF%E5%8F%8A%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-05-31T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive-技术及应用介绍"><a href="#Hive-技术及应用介绍" class="headerlink" title="Hive 技术及应用介绍"></a>Hive 技术及应用介绍</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ul><li><a href="https://cshihong.github.io/2018/05/22/Hive%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/">Hive 技术原理</a></li><li><a href="http://xiaqunfeng.cc/2018/10/18/Hive/">Hive 架构及应用介绍</a></li><li><a href="https://www.cnblogs.com/xiaohaigegede/p/17725025.html">Hive - 小海哥哥 de - 博客园</a></li><li><a href="https://cwiki.apache.org/confluence/display/Hive/Home">https://cwiki.apache.org/confluence/display/Hive/Home</a>(官方文档)</li></ul></blockquote><p>Apache Hive 是基于 Hadoop 构建的数据仓库工具，它为海量结构化数据提供类 SQL 的查询能力，并将查询翻译为 MapReduce、Tez 或 Spark 作业执行。Hive 简化了大数据批量分析的使用门槛，让熟悉 SQL 的开发者能够在 Hadoop 生态上轻松进行 ETL、OLAP 和 BI 分析。</p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361719853NEWubQsOsob8hwxG164ce9SWnxe.png" alt="1749361719853NEWubQsOsob8hwxG164ce9SWnxe.png"></p><p>Hive 的执行流程</p><h2 id="Hive-的背景与定位"><a href="#Hive-的背景与定位" class="headerlink" title="Hive 的背景与定位"></a>Hive 的背景与定位</h2><ul><li><strong>背景</strong>：随着大数据时代到来，Hadoop 分布式文件系统（HDFS）与 MapReduce 为存储与计算提供了高吞吐的能力，但原生 MapReduce 编程复杂、开发成本高。</li><li><strong>定位</strong>：Hive 通过 HiveQL（类似 SQL 的查询语言）屏蔽 MapReduce/Tez/Spark 的底层细节，将查询语句编译为执行计划并自动运行，适合批量离线分析，主要面向 ETL、数据聚合与多维分析。</li></ul><h3 id="Hive-在-Hadoop-生态系统中的位置"><a href="#Hive-在-Hadoop-生态系统中的位置" class="headerlink" title="Hive 在 Hadoop 生态系统中的位置"></a>Hive 在 Hadoop 生态系统中的位置</h3><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361730854XD25bKuMWocEPtxmRBQc1JaOn6c.png" alt="1749361730854XD25bKuMWocEPtxmRBQc1JaOn6c.png"></p><p>Hive 的运行深度依赖于 Hadoop 的核心生态，包括其分布式文件系统 HDFS、计算框架 MapReduce 以及资源调度器 YARN，因此可以将 Hive 理解为一种构建在 Hadoop 之上的 “SQL on Hadoop” 应用。其核心工作机制是将用户输入的类 SQL 查询语句转换为底层的 MapReduce 任务来执行，也正是因为多了这一步从 SQL 到 MapReduce 的转化开销，所以在同等条件下，Hive 查询的执行效率通常会低于直接编写原生 MapReduce 程序。</p><h2 id="Hive-体系结构"><a href="#Hive-体系结构" class="headerlink" title="Hive 体系结构"></a>Hive 体系结构</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361740853ZjDRb5l8hozhtExpjCrcgQXFnzd.png" alt="1749361740853ZjDRb5l8hozhtExpjCrcgQXFnzd.png"><br><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361749853Rykybe2KzostXMxQrA2cx8pgnWh.png" alt="1749361749853Rykybe2KzostXMxQrA2cx8pgnWh.png"></p><p>Hive 的核心组件包括：</p><ol><li><p><strong>Hive 客户端（CLI、Beeline、JDBC/ODBC）</strong></p><ul><li>支持交互式提交 HiveQL，或通过 JDBC/ODBC 接入 BI 工具（如 Tableau、Power BI）。</li></ul></li><li><p><strong>Driver</strong></p><ul><li>接收并解析 HiveQL，生成抽象语法树（AST），再进行优化和编译，生成执行计划（Execution Plan）。</li></ul></li><li><p><strong>Compiler / Optimizer</strong></p><ul><li>将 AST 转为逻辑计划，应用谓词下推、列裁剪等优化，再生成物理计划，拆分为一个或多个 MapReduce/Tez/Spark 任务。</li></ul></li><li><p><strong>Execution Engine</strong></p><ul><li>将物理计划提交给底层执行框架（MapReduce、Tez 或 Spark），监控任务状态并返回结果。</li></ul></li><li><p><strong>Metastore</strong></p><ul><li>存储表结构、分区信息、列类型、SerDe、统计信息等元数据，通常使用 MySQL、PostgreSQL 或 Derby。</li></ul></li></ol><h2 id="数据模型与存储格式"><a href="#数据模型与存储格式" class="headerlink" title="数据模型与存储格式"></a>数据模型与存储格式</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361758853Z6E0bN8eQofC9kxqkCmcz14ynBg.png" alt="1749361758853Z6E0bN8eQofC9kxqkCmcz14ynBg.png"></p><ul><li><strong>表与分区</strong><ul><li>Hive 将 HDFS 文件组织为表（Table）、分区（Partition）和桶（Bucket）。分区通常按日期、地域等字段维度存储，减少查询扫描量。</li></ul></li></ul><blockquote><p>数据库：创建表时如果不指定数据库，则默认为 default 数据库。<br>表：物理概念，实际对应 HDFS 上的一个目录。<br>分区：对应所在表所在目录下的一个子目录。<br>桶：对应表或分区所在路径的一个文件</p></blockquote><ul><li><strong>文件格式</strong><ul><li>支持文本（Text）、SequenceFile、ORC、Parquet、Avro 等列式与行式格式。列式格式（ORC、Parquet）通过压缩和列裁剪大幅提升查询性能。</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建按日期分区的 ORC 表</span><span class="token keyword">CREATE</span> EXTERNAL <span class="token keyword">TABLE</span> logs <span class="token punctuation">(</span>  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>  <span class="token keyword">action</span>  STRING<span class="token punctuation">,</span>  ts      <span class="token keyword">TIMESTAMP</span><span class="token punctuation">)</span>PARTITIONED <span class="token keyword">BY</span> <span class="token punctuation">(</span>dt STRING<span class="token punctuation">)</span>STORED <span class="token keyword">AS</span> ORCLOCATION <span class="token string">'/data/logs/'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>SerDe（序列化/反序列化）</strong><ul><li>通过自定义 SerDe，Hive 能解析任意复杂格式（JSON、CSV、XML 等）。</li></ul></li></ul><h2 id="HiveQL-基本用法"><a href="#HiveQL-基本用法" class="headerlink" title="HiveQL 基本用法"></a>HiveQL 基本用法</h2><blockquote><ul><li><a href="https://www.slideshare.net/slideshow/hive-quick-start-tutorial/3555281">www.slideshare.net</a></li></ul></blockquote><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> example<span class="token punctuation">.</span>employee<span class="token punctuation">(</span>Id <span class="token keyword">INT</span> <span class="token keyword">COMMENT</span> <span class="token string">'employeeid'</span><span class="token punctuation">,</span>Company STRING <span class="token keyword">COMMENT</span> <span class="token string">'your company'</span><span class="token punctuation">,</span>Money <span class="token keyword">FLOAT</span> <span class="token keyword">COMMENT</span> <span class="token string">'work money'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">ROW</span> FORMAT DELIMITED <span class="token keyword">FIELDS</span> <span class="token keyword">TERMINATED</span> <span class="token keyword">BY</span> <span class="token string">','</span> STORED <span class="token keyword">AS</span> TEXTFILE<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以发现就是对应的 SQL 语句</p></blockquote><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> employee <span class="token keyword">WHERE</span> salary <span class="token operator">&gt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> department<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employee <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department<span class="token punctuation">;</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> <span class="token keyword">date</span> <span class="token keyword">FROM</span> employee_a <span class="token keyword">UNION</span> <span class="token keyword">ALL</span><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> <span class="token keyword">date</span> <span class="token keyword">FROM</span> employee_b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 加载数据到表（分区）</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> logs <span class="token keyword">ADD</span> <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2025-06-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">LOAD</span> <span class="token keyword">DATA</span> INPATH <span class="token string">'/raw/logs/2025-06-01/*.log'</span><span class="token keyword">INTO</span> <span class="token keyword">TABLE</span> logs <span class="token keyword">PARTITION</span> <span class="token punctuation">(</span>dt<span class="token operator">=</span><span class="token string">'2025-06-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 简单查询</span><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> cnt<span class="token keyword">FROM</span> logs<span class="token keyword">WHERE</span> dt<span class="token operator">=</span><span class="token string">'2025-06-01'</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> cnt <span class="token keyword">DESC</span><span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="窗口函数与高级特性"><a href="#窗口函数与高级特性" class="headerlink" title="窗口函数与高级特性"></a>窗口函数与高级特性</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 统计每个用户每天的前 3 次操作</span><span class="token keyword">SELECT</span> dt<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> <span class="token keyword">action</span><span class="token punctuation">,</span> ts<span class="token punctuation">,</span>  ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">OVER</span> <span class="token punctuation">(</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> dt<span class="token punctuation">,</span> user_id <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ts<span class="token punctuation">)</span> <span class="token keyword">AS</span> rn<span class="token keyword">FROM</span> logs<span class="token keyword">WHERE</span> dt <span class="token operator">&gt;=</span> <span class="token string">'2025-06-01'</span> <span class="token operator">AND</span> dt <span class="token operator">&lt;=</span> <span class="token string">'2025-06-07'</span><span class="token operator">AND</span> rn <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与-Spark-集成"><a href="#与-Spark-集成" class="headerlink" title="与 Spark 集成"></a>与 Spark 集成</h3><p>在 Hive on Spark 模式下，HiveQL 会被提交到 Spark 引擎执行，兼享 Spark 的低延迟与丰富算子。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 启动 Hive 使用 Spark 执行引擎<span class="token builtin class-name">set</span> <span class="token assign-left variable">hive.execution.engine</span><span class="token operator">=</span>spark<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="典型应用场景"><a href="#典型应用场景" class="headerlink" title="典型应用场景"></a>典型应用场景</h2><ol><li><p><strong>ETL 批量处理</strong></p><ul><li>定时从日志系统、关系库导入数据，清洗、聚合后写入 Hive 数据仓库，用于下游 BI 报表。</li></ul></li><li><p><strong>多维 OLAP 分析</strong></p><ul><li>基于 Hive 的 HiveCube 或第三方 OLAP 引擎（如 Apache Kylin）实现大规模多维分析。</li></ul></li><li><p><strong>数据探索与报表</strong></p><ul><li>数据分析师通过 Beeline 或 BI 工具（Tableau、Power BI）直接查询 Hive 表。</li></ul></li><li><p><strong>机器学习特征工程</strong></p><ul><li>使用 HiveQL 快速统计用户行为特征，然后将结果导出到 HDFS，再由 Spark/MLlib 训练模型。</li></ul></li></ol><h2 id="性能优化要点"><a href="#性能优化要点" class="headerlink" title="性能优化要点"></a>性能优化要点</h2><ul><li><p><strong>合理分区</strong></p><ul><li>按查询高频过滤字段分区（如按日期、地域），减少文件扫描。</li></ul></li><li><p><strong>使用列式存储</strong></p><ul><li>ORC/Parquet 格式支持列裁剪、矢量化读取和压缩。</li></ul></li><li><p><strong>开启成本模型优化</strong></p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SET</span> hive<span class="token punctuation">.</span>cbo<span class="token punctuation">.</span><span class="token keyword">enable</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>利用 Tez/Spark</strong></p><ul><li>将执行引擎换为 Tez 或 Spark，降低 MapReduce 的启动开销与 I/O 序列化成本。</li></ul></li><li><p><strong>小文件合并</strong></p><ul><li>小文件过多会导致任务过多，建议合并或使用 HDFS 合并工具。</li></ul></li></ul><h2 id="示例：用户次日留存率统计"><a href="#示例：用户次日留存率统计" class="headerlink" title="示例：用户次日留存率统计"></a>示例：用户次日留存率统计</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 1. 计算用户首次活跃日期</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> user_first <span class="token punctuation">(</span>  user_id <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>  first_dt STRING<span class="token punctuation">)</span>STORED <span class="token keyword">AS</span> ORC<span class="token keyword">AS</span><span class="token keyword">SELECT</span> user_id<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>dt<span class="token punctuation">)</span> <span class="token keyword">AS</span> first_dt<span class="token keyword">FROM</span> logs<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> user_id<span class="token punctuation">;</span><span class="token comment">-- 2. 次日留存：join 当天活跃用户与第一天活跃日期后一天</span><span class="token keyword">SELECT</span> f<span class="token punctuation">.</span>first_dt <span class="token keyword">AS</span> reg_dt<span class="token punctuation">,</span>       l<span class="token punctuation">.</span>dt        <span class="token keyword">AS</span> act_dt<span class="token punctuation">,</span>       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> f<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span>      <span class="token keyword">AS</span> reg_users<span class="token punctuation">,</span>       <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> l<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span>      <span class="token keyword">AS</span> retained_users<span class="token punctuation">,</span>       <span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> l<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> f<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> retention_rate<span class="token keyword">FROM</span> user_first f<span class="token keyword">JOIN</span> logs l  <span class="token keyword">ON</span> f<span class="token punctuation">.</span>user_id <span class="token operator">=</span> l<span class="token punctuation">.</span>user_id <span class="token operator">AND</span> l<span class="token punctuation">.</span>dt <span class="token operator">=</span> date_add<span class="token punctuation">(</span>f<span class="token punctuation">.</span>first_dt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> f<span class="token punctuation">.</span>first_dt<span class="token punctuation">,</span> l<span class="token punctuation">.</span>dt<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> f<span class="token punctuation">.</span>first_dt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361767853GqNBbN8ARo70Ijxlv3dcyQ5rn0v.png" alt="1749361767853GqNBbN8ARo70Ijxlv3dcyQ5rn0v.png"></p><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1749361778853RwFcbEGI7o1p7cxmwTNcbjjdn7c.png" alt="1749361778853RwFcbEGI7o1p7cxmwTNcbjjdn7c.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><strong>Hive</strong> 以 SQL 友好的方式在 Hadoop 集群上实现批量离线分析，适用于 ETL、OLAP、报表和特征工程。</li><li>通过 Metastore 管理元数据，通过多种文件格式和执行引擎（MapReduce/Tez/Spark）兼顾兼容性与性能。</li><li>合理分区、列式存储和成本模型优化可显著提升查询性能。</li><li>Hive 与 Spark、Flink、Presto 等工具生态配合，为大数据平台提供灵活多样的计算选择。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hive-技术及应用介绍&quot;&gt;&lt;a href=&quot;#Hive-技术及应用介绍&quot; class=&quot;headerlink&quot; title=&quot;Hive 技术及应用介绍&quot;&gt;&lt;/a&gt;Hive 技术及应用介绍&lt;/h1&gt;&lt;h1 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; cla</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-05-21-汇编语言键盘输入输出</title>
    <link href="https://ke-tan.asia/2025/05/21/2025-05-21-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>https://ke-tan.asia/2025/05/21/2025-05-21-%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E9%94%AE%E7%9B%98%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2025-05-20T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-05-21-汇编语言键盘输入输出"><a href="#2025-05-21-汇编语言键盘输入输出" class="headerlink" title="2025-05-21-汇编语言键盘输入输出"></a>2025-05-21-汇编语言键盘输入输出</h1><blockquote><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1></blockquote><h1 id="任务-1"><a href="#任务-1" class="headerlink" title="任务 1"></a>任务 1</h1><blockquote><p>把数据段中 1 维数组 AA_1 变量地址中连续 7 个数（1,3,5,7,2,4,6）读出，把每个数加 2 后再存入到数据段中 BB_1 数组开始的标号地址中去，并显示出 BB_1 数组中每个数来（之间用空格分开）</p></blockquote><h1 id="任务-2"><a href="#任务-2" class="headerlink" title="任务 2"></a>任务 2</h1><blockquote><p>从键盘接收一个小写字母，然后找出它的前导字符和后续字符，再按顺序显示这三个字符。</p></blockquote><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">CSEG</span> <span class="token instruction keyword">SEGMENT</span>    <span class="token instruction keyword">ASSUME</span> <span class="token instruction keyword">CS</span>:CSEG    <span class="token instruction keyword">ORG</span> 100H<span class="token instruction keyword">START</span>:      <span class="token comment">; 从键盘接收一个小写字母</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span><span class="token number">1</span>      <span class="token instruction keyword">INT</span> 21H      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span>AL      <span class="token instruction keyword">DEC</span> <span class="token instruction keyword">DL</span>        <span class="token comment">; 设置循环次数</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CX</span><span class="token punctuation">,</span><span class="token number">3</span>       <span class="token comment">; 设置循环次数</span>  LOOP1:      <span class="token comment">; 检查输入是否为小写字母</span>      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span><span class="token char">'a'</span>      <span class="token instruction keyword">JB</span> <span class="token instruction keyword">EXIT</span>        <span class="token comment">; 小于'a'就退出</span>      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span><span class="token char">'z'</span>      <span class="token instruction keyword">JA</span> <span class="token instruction keyword">EXIT</span>        <span class="token comment">; 大于'z'就退出</span>        <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span><span class="token number">2</span>      <span class="token instruction keyword">INT</span> 21H        <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span><span class="token number">1</span>      <span class="token instruction keyword">LOOP</span> LOOP1     <span class="token comment">; CX减1，若不为0则跳转到LOOP1继续循环</span>  <span class="token instruction keyword">EXIT</span>:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span>4CH      <span class="token instruction keyword">INT</span> 21H  <span class="token instruction keyword">CSEG</span> <span class="token instruction keyword">ENDS</span>      <span class="token directive property">END</span> <span class="token instruction keyword">START</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-指令-MOV-AH-02H-中-02H-的含义是？"><a href="#1-指令-MOV-AH-02H-中-02H-的含义是？" class="headerlink" title="(1) 指令 MOV AH, 02H 中 02H 的含义是？"></a>(1) 指令 MOV AH, 02H 中 02H 的含义是？</h2><p>在 x86 汇编中，<code>MOV AH, 02H</code> 指令将立即数 02H 存入 AH 寄存器。在 DOS 中断服务程序中，这个值有特殊含义：<strong>将 AH 设置为 02H 是为了调用 DOS 的 2 号功能 - 显示字符输出功能</strong>。</p><p>当执行 <code>INT 21H</code> 中断调用时，系统会根据 AH 中的值来确定要执行的 DOS 功能。02H 功能会将 DL 寄存器中的 ASCII 字符显示到标准输出设备（通常是屏幕）上。</p><h2 id="2-指令-ADD-DL-30H-的作用是什么？"><a href="#2-指令-ADD-DL-30H-的作用是什么？" class="headerlink" title="(2) 指令 ADD DL, 30H 的作用是什么？"></a>(2) 指令 ADD DL, 30H 的作用是什么？</h2><p>指令 <code>ADD DL, 30H</code> 的作用是<strong>将 DL 寄存器中的数值转换为对应的 ASCII 码字符</strong>。</p><p>具体来说：</p><ul><li>30H 是 ASCII 码中数字’0’的十六进制表示</li><li>当 DL 中存储的是一个 0-9 的数值时，加上 30H 后会变成对应数字的 ASCII 码</li><li>例如：DL=3，执行 ADD DL,30H 后，DL=33H，这是数字’3’的 ASCII 码</li></ul><p>在这个程序中，由于 BB_1 数组中存储的是加 2 后的数值（3,5,7,9,4,6,8），需要将这些数值转换为 ASCII 码才能正确显示，否则会显示为不可见的控制字符。</p><blockquote><p>注意：这种转换方法只适用于单个十进制数字（0-9）。对于大于 9 的数字，这种简单的加 30H 方法会产生错误的字符。</p></blockquote><h2 id="3-除了参考程序中用的访问方式，还可以用什么方式访问-AA-1-数组里的元素？"><a href="#3-除了参考程序中用的访问方式，还可以用什么方式访问-AA-1-数组里的元素？" class="headerlink" title="(3) 除了参考程序中用的访问方式，还可以用什么方式访问 AA_1 数组里的元素？"></a>(3) 除了参考程序中用的访问方式，还可以用什么方式访问 AA_1 数组里的元素？</h2><p>参考程序中使用的是基于寄存器间接寻址方式（使用 SI 作为指针）来访问 AA_1 数组元素。除此之外，还可以使用以下方式：</p><ol><li><strong>直接寻址</strong>：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> AA_1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment">; 访问第一个元素</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> AA_1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment">; 访问第二个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><strong>基址寻址</strong>：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span> OFFSET AA_1<span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token punctuation">]</span>       <span class="token comment">; 访问第一个元素</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>     <span class="token comment">; 访问第二个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><strong>变址寻址</strong>：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> AA_1<span class="token punctuation">[</span>SI<span class="token punctuation">]</span>   <span class="token comment">; 访问第一个元素</span><span class="token instruction keyword">INC</span> <span class="token instruction keyword">SI</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> AA_1<span class="token punctuation">[</span>SI<span class="token punctuation">]</span>   <span class="token comment">; 访问第二个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>基址加变址寻址</strong>：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span> OFFSET AA_1<span class="token instruction keyword">MOV</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token punctuation">]</span>    <span class="token comment">; 访问第一个元素</span><span class="token instruction keyword">INC</span> <span class="token instruction keyword">SI</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token punctuation">]</span>    <span class="token comment">; 访问第二个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>基址加变址加位移寻址</strong>：</li></ol><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span> OFFSET AA_1<span class="token instruction keyword">MOV</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">; 访问第一个元素</span><span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token punctuation">]</span>    <span class="token comment">; 访问第二个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="任务-3"><a href="#任务-3" class="headerlink" title="任务 3"></a>任务 3</h1><blockquote><p>已知 DATAX 和 DATAY 单元各存放一个带符号字节数据，从键盘上接收加（＋）、减（－）、乘（*）或除（/）符号，然后完成相应运算，把结果显示在屏幕上。</p></blockquote><h2 id="求绝对值-基础模块"><a href="#求绝对值-基础模块" class="headerlink" title="求绝对值(基础模块)"></a>求绝对值(基础模块)</h2><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token directive property">DATA</span> <span class="token instruction keyword">SEGMENT</span>    num <span class="token instruction keyword">DB</span> <span class="token operator">-</span><span class="token number">6</span>         _<span class="token comment">; 8位有符号数_</span>    buf <span class="token instruction keyword">DB</span> <span class="token number">4</span> <span class="token instruction keyword">DUP</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span>   _<span class="token comment">; 最多3位+1_</span><span class="token directive property">DATA</span> <span class="token instruction keyword">ENDS</span><span class="token directive property">CODE</span> <span class="token instruction keyword">SEGMENT</span>    <span class="token instruction keyword">ASSUME</span> <span class="token instruction keyword">CS</span>:<span class="token directive property">CODE</span><span class="token punctuation">,</span> DS:<span class="token directive property">DATA</span><span class="token instruction keyword">START</span>:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> <span class="token directive property">DATA</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DS</span><span class="token punctuation">,</span> AX    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> num       _<span class="token comment">; 取数_</span>    <span class="token instruction keyword">CBW</span>               _<span class="token comment">; 符号扩展到AX_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> PRINT_DEC     _<span class="token comment">; 如果是正数，直接打印_</span>    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>            _<span class="token comment">; 取绝对值_</span>    <span class="token instruction keyword">CBW</span>PRINT_DEC:    _<span class="token comment">; AX中为正数，转十进制_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span> <span class="token number">10</span>CONV_LOOP:    <span class="token instruction keyword">XOR</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> DX    <span class="token instruction keyword">DIV</span> <span class="token instruction keyword">BX</span>            _<span class="token comment">; AX / 10, 商-&gt;AX, 余数-&gt;DX_</span>    <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>    <span class="token instruction keyword">MOV</span> buf<span class="token punctuation">[</span>SI<span class="token punctuation">]</span><span class="token punctuation">,</span> DL    <span class="token instruction keyword">INC</span> <span class="token instruction keyword">SI</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JNZ</span> CONV_LOOPPRINT_LOOP:    <span class="token instruction keyword">DEC</span> <span class="token instruction keyword">SI</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> buf<span class="token punctuation">[</span>SI<span class="token punctuation">]</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> <span class="token number">2</span>    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JNZ</span> PRINT_LOOP    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 4CH    <span class="token instruction keyword">INT</span> 21H<span class="token directive property">CODE</span> <span class="token instruction keyword">ENDS</span>    <span class="token directive property">END</span> <span class="token instruction keyword">START</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token directive property">DATA</span> <span class="token instruction keyword">SEGMENT</span>    <span class="token instruction keyword">DATAX</span> <span class="token instruction keyword">DB</span> <span class="token number">6</span>      _<span class="token comment">; 带符号字节数据，负数_</span>    <span class="token instruction keyword">DATAY</span> <span class="token instruction keyword">DB</span> <span class="token operator">-</span><span class="token number">2</span>      _<span class="token comment">; 带符号字节数据，正数_</span>    <span class="token instruction keyword">RESULT</span> <span class="token instruction keyword">DB</span> <span class="token number">0</span>    <span class="token instruction keyword">BUF</span> <span class="token instruction keyword">DB</span> <span class="token number">4</span> <span class="token instruction keyword">DUP</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token directive property">DATA</span> <span class="token instruction keyword">ENDS</span><span class="token instruction keyword">CSEG</span> <span class="token instruction keyword">SEGMENT</span>    <span class="token instruction keyword">ASSUME</span> <span class="token instruction keyword">CS</span>:CSEG<span class="token punctuation">,</span>DS:<span class="token directive property">DATA</span><span class="token instruction keyword">START</span>:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span><span class="token directive property">DATA</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DS</span><span class="token punctuation">,</span>AX      _<span class="token comment">;从键盘接收+,-,*,/_</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span><span class="token number">1</span>      <span class="token instruction keyword">INT</span> 21H      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span><span class="token char">'+'</span>      <span class="token instruction keyword">JE</span> ADD_OP      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span><span class="token char">'-'</span>      <span class="token instruction keyword">JE</span> SUB_OP      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span><span class="token char">'*'</span>      <span class="token instruction keyword">JE</span> MUL_OP      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span><span class="token char">'/'</span>      <span class="token instruction keyword">JE</span> DIV_OPADD_OP:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>DATAX      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span>DATAY      <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>BL      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">RESULT</span><span class="token punctuation">,</span>AL      <span class="token instruction keyword">JMP</span> SHOW_RESULT    SUB_OP:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>DATAX      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span>DATAY      <span class="token instruction keyword">SUB</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>BL      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">RESULT</span><span class="token punctuation">,</span>AL      <span class="token instruction keyword">JMP</span> SHOW_RESULT  MUL_OP:_<span class="token comment">; 字节乘法： _</span>_<span class="token comment">; （AL）*（OPS8）→AX_</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>DATAX      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span>DATAY      <span class="token instruction keyword">IMUL</span> <span class="token instruction keyword">BL</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">RESULT</span><span class="token punctuation">,</span>AL      <span class="token instruction keyword">JMP</span> SHOW_RESULT  DIV_OP:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span>DATAX      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span>DATAY      <span class="token instruction keyword">CBW</span> _<span class="token comment">;将AL符号扩展到AX_</span>      <span class="token instruction keyword">IDIV</span> <span class="token instruction keyword">BL</span>      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">RESULT</span><span class="token punctuation">,</span>AL      <span class="token instruction keyword">JMP</span> SHOW_RESULT  _<span class="token comment">;难点在打印,将每次除以10,把余数入栈,然后出栈,打印_</span>SHOW_RESULT:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> RESULT    <span class="token instruction keyword">CBW</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> <span class="token instruction keyword">SHOW</span>    <span class="token instruction keyword">PUSH</span> <span class="token instruction keyword">AX</span>           _<span class="token comment">; 保存原始AL_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> <span class="token char">'-'</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> <span class="token number">2</span>    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">POP</span> <span class="token instruction keyword">AX</span>            _<span class="token comment">; 恢复AL_</span>    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>    <span class="token instruction keyword">CBW</span><span class="token instruction keyword">SHOW</span>:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span><span class="token number">0</span>            _<span class="token comment">; SI为BUF索引_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span><span class="token number">10</span>CONV_LOOP:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token instruction keyword">DIV</span> <span class="token instruction keyword">BX</span>    <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span><span class="token char">'0'</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BUF</span><span class="token punctuation">[</span>SI<span class="token punctuation">]</span><span class="token punctuation">,</span>DL    <span class="token instruction keyword">INC</span> <span class="token instruction keyword">SI</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token instruction keyword">JNZ</span> CONV_LOOPPRINT_LOOP:    <span class="token instruction keyword">DEC</span> <span class="token instruction keyword">SI</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span>BUF<span class="token punctuation">[</span>SI<span class="token punctuation">]</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span><span class="token number">2</span>    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">SI</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token instruction keyword">JNZ</span> PRINT_LOOP    <span class="token instruction keyword">JMP</span> <span class="token instruction keyword">EXIT</span><span class="token instruction keyword">EXIT</span>:      <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span>4CH      <span class="token instruction keyword">INT</span> 21H  <span class="token instruction keyword">CSEG</span> <span class="token instruction keyword">ENDS</span>      <span class="token directive property">END</span> <span class="token instruction keyword">START</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="程序逻辑流程图"><a href="#程序逻辑流程图" class="headerlink" title="程序逻辑流程图"></a>程序逻辑流程图</h2><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/17478844701641747884469368.png" alt="17478844701641747884469368.png"></p><blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></blockquote><ul><li>当 RESULT 为负数时,我在打印结果的时候我们需要先打印’-’号,INT 21H 会把 AL 的值重新设置</li><li>使用 IDIV BX 命令前需要我们将 AX 使用 CBW 命令将 AL 扩展为 AX</li></ul><h2 id="进一步的修改"><a href="#进一步的修改" class="headerlink" title="进一步的修改"></a>进一步的修改</h2><pre class="line-numbers language-armasm" data-language="armasm"><code class="language-armasm"><span class="token comment">; 简单计算器程序 - 对DATAX和DATAY中的有符号字节数据进行四则运算_</span><span class="token comment">; 支持加(+)、减(-)、乘(*)、除(/)四种运算符_</span>.MODEL SMALL.STACK 100H.<span class="token directive property">DATA</span><span class="token instruction keyword">DATAX</span>   <span class="token instruction keyword">DB</span>  <span class="token operator">?</span>           _<span class="token comment">; 第一个操作数_</span><span class="token instruction keyword">DATAY</span>   <span class="token instruction keyword">DB</span>  <span class="token operator">?</span>           _<span class="token comment">; 第二个操作数_</span>MSG1    DB  'Input first number: $'MSG2    DB  0DH<span class="token punctuation">,</span> 0AH<span class="token punctuation">,</span> 'Input second number: $'MSG3    DB  0DH<span class="token punctuation">,</span> 0AH<span class="token punctuation">,</span> 'Input operator <span class="token punctuation">(</span><span class="token operator">+</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span>: $'MSG4    DB  0DH<span class="token punctuation">,</span> 0AH<span class="token punctuation">,</span> 'Result: $'MSG5    DB  0DH<span class="token punctuation">,</span> 0AH<span class="token punctuation">,</span> 'Division by zero<span class="token operator">!</span> $'<span class="token instruction keyword">TEMP</span>    <span class="token instruction keyword">DW</span>  <span class="token operator">?</span>           _<span class="token comment">; 临时存储乘法或除法结果_</span>NEG_FLAG DB  <span class="token number">0</span>           _<span class="token comment">; 负数标志 (1表示结果为负)_</span><span class="token instruction keyword">BUF</span>     <span class="token instruction keyword">DB</span>  <span class="token number">6</span> <span class="token instruction keyword">DUP</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">)</span>    _<span class="token comment">; 用于存储结果字符串_</span>NEG_INPUT DB <span class="token number">0</span>          _<span class="token comment">; 输入负号标志_</span><span class="token instruction keyword">VALUE</span>     <span class="token instruction keyword">DB</span> <span class="token number">0</span>          _<span class="token comment">; 输入值_</span>.<span class="token directive property">CODE</span><span class="token instruction keyword">MAIN</span> <span class="token directive property">PROC</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> @<span class="token directive property">DATA</span>       _<span class="token comment">; 初始化数据段_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DS</span><span class="token punctuation">,</span> AX    _<span class="token comment">; 显示第一条提示消息_</span>    <span class="token instruction keyword">LEA</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> MSG1    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 09H    <span class="token instruction keyword">INT</span> 21H    _<span class="token comment">; 输入第一个数字_</span>    <span class="token instruction keyword">CALL</span> INPUT_SIGNED_BYTE    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DATAX</span><span class="token punctuation">,</span> AL    _<span class="token comment">; 显示第二条提示消息_</span>    <span class="token instruction keyword">LEA</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> MSG2    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 09H    <span class="token instruction keyword">INT</span> 21H    _<span class="token comment">; 输入第二个数字_</span>    <span class="token instruction keyword">CALL</span> INPUT_SIGNED_BYTE    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DATAY</span><span class="token punctuation">,</span> AL    _<span class="token comment">; 显示操作符提示消息_</span>    <span class="token instruction keyword">LEA</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> MSG3    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 09H    <span class="token instruction keyword">INT</span> 21H    _<span class="token comment">; 输入操作符_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 01H    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> AL          _<span class="token comment">; 保存操作符在BL中_</span>    _<span class="token comment">; 显示结果提示消息_</span>    <span class="token instruction keyword">LEA</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> MSG4    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 09H    <span class="token instruction keyword">INT</span> 21H    _<span class="token comment">; 根据操作符执行相应运算_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token char">'+'</span>         _<span class="token comment">; 检查是否为加法_</span>    <span class="token instruction keyword">JE</span>  DO_ADD    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token char">'-'</span>         _<span class="token comment">; 检查是否为减法_</span>    <span class="token instruction keyword">JE</span>  DO_SUB    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token char">'*'</span>         _<span class="token comment">; 检查是否为乘法_</span>    <span class="token instruction keyword">JE</span>  DO_MUL    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token char">'/'</span>         _<span class="token comment">; 检查是否为除法_</span>    <span class="token instruction keyword">JE</span>  DO_DIV    <span class="token instruction keyword">JMP</span> <span class="token instruction keyword">EXIT</span>            _<span class="token comment">; 如果不是有效操作符，直接退出_</span>DO_ADD:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAX       _<span class="token comment">; 加法运算_</span>    <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAY    <span class="token instruction keyword">JMP</span> DISPLAY_RESULTDO_SUB:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAX       _<span class="token comment">; 减法运算_</span>    <span class="token instruction keyword">SUB</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAY    <span class="token instruction keyword">JMP</span> DISPLAY_RESULTDO_MUL:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAX       _<span class="token comment">; 乘法运算_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> DATAY    <span class="token instruction keyword">CALL</span> SIGNED_MUL    <span class="token instruction keyword">JMP</span> DISPLAY_AXDO_DIV:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> DATAX       _<span class="token comment">; 除法运算_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> DATAY    <span class="token instruction keyword">CALL</span> SIGNED_DIV    <span class="token instruction keyword">JMP</span> DISPLAY_AXDISPLAY_RESULT:    _<span class="token comment">; 结果在AL中，转换为字符串并显示_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零AH，结果扩展到AX_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> <span class="token instruction keyword">POSITIVE</span>    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>              _<span class="token comment">; 如果为负，取绝对值_</span>    <span class="token instruction keyword">MOV</span> NEG_FLAG<span class="token punctuation">,</span> <span class="token number">1</span>     _<span class="token comment">; 设置负数标志_</span>    <span class="token instruction keyword">JMP</span> <span class="token instruction keyword">CONTINUE</span><span class="token instruction keyword">POSITIVE</span>:    <span class="token instruction keyword">MOV</span> NEG_FLAG<span class="token punctuation">,</span> <span class="token number">0</span>     _<span class="token comment">; 清除负数标志_</span><span class="token instruction keyword">CONTINUE</span>:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> AX          _<span class="token comment">; AX中现在是结果的绝对值_</span>DISPLAY_AX:    _<span class="token comment">; 显示AX中的有符号结果_</span>    <span class="token instruction keyword">CALL</span> DISPLAY_SIGNED_NUM  <span class="token instruction keyword">EXIT</span>:    _<span class="token comment">; 程序结束_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 4CH    <span class="token instruction keyword">INT</span> 21H<span class="token instruction keyword">MAIN</span> <span class="token directive property">ENDP</span>_<span class="token comment">; 输入有符号字节的过程_</span>INPUT_SIGNED_BYTE <span class="token directive property">PROC</span>    _<span class="token comment">; 检查第一个字符是否为负号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 01H    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'-'</span>    <span class="token instruction keyword">JNE</span> CHECK_DIGIT1    <span class="token instruction keyword">MOV</span> NEG_INPUT<span class="token punctuation">,</span> <span class="token number">1</span>    _<span class="token comment">; 设置负号标志_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 01H         _<span class="token comment">; 再次读取一个字符_</span>    <span class="token instruction keyword">INT</span> 21H  CHECK_DIGIT1:    _<span class="token comment">; 检查输入字符是否为数字_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>    <span class="token instruction keyword">JL</span> EXIT_INPUT       _<span class="token comment">; 如果小于'0'，不是数字_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'9'</span>    <span class="token instruction keyword">JG</span> EXIT_INPUT       _<span class="token comment">; 如果大于'9'，不是数字_</span>      _<span class="token comment">; 转换为数值并保存_</span>    <span class="token instruction keyword">SUB</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">VALUE</span><span class="token punctuation">,</span> AL      _<span class="token comment">; 读取可能存在的第二个数字_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 01H    <span class="token instruction keyword">INT</span> 21H      _<span class="token comment">; 检查第二个字符是否为数字_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>    <span class="token instruction keyword">JL</span> EXIT_INPUT2      _<span class="token comment">; 如果小于'0'，不是数字_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'9'</span>    <span class="token instruction keyword">JG</span> EXIT_INPUT2      _<span class="token comment">; 如果大于'9'，不是数字_</span>      _<span class="token comment">; 处理第二个数字_</span>    <span class="token instruction keyword">SUB</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> VALUE       _<span class="token comment">; 将第一个数字移到BL_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零BH_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CX</span><span class="token punctuation">,</span> <span class="token number">10</span>    <span class="token instruction keyword">MUL</span> <span class="token instruction keyword">CX</span>              _<span class="token comment">; 将BX乘以10_</span>    <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> AL          _<span class="token comment">; 加上第二个数字_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">VALUE</span><span class="token punctuation">,</span> BL    <span class="token instruction keyword">JMP</span> EXIT_INPUT  EXIT_INPUT2:    _<span class="token comment">; 如果第二个字符不是数字，将它放回缓冲区(模拟未读取)_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> AL    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 02H    <span class="token instruction keyword">INT</span> 21H  EXIT_INPUT:    _<span class="token comment">; 返回结果_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> VALUE    <span class="token instruction keyword">CMP</span> NEG_INPUT<span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token instruction keyword">JNE</span> RETURN_INPUT    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>              _<span class="token comment">; 如果有负号标志，取负值_</span>  RETURN_INPUT:    <span class="token instruction keyword">RET</span>INPUT_SIGNED_BYTE <span class="token directive property">ENDP</span>_<span class="token comment">; 有符号乘法过程 - 结果在AX中_</span>SIGNED_MUL <span class="token directive property">PROC</span>    _<span class="token comment">; 保存符号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CL</span><span class="token punctuation">,</span> AL          _<span class="token comment">; 保存第一个操作数_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CH</span><span class="token punctuation">,</span> BL          _<span class="token comment">; 保存第二个操作数_</span>      _<span class="token comment">; 取绝对值_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> ABS1_DONE    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>ABS1_DONE:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> ABS2_DONE    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">BL</span>ABS2_DONE:      _<span class="token comment">; 执行无符号乘法_</span>    <span class="token instruction keyword">MUL</span> <span class="token instruction keyword">BL</span>              _<span class="token comment">; AX = AL * BL_</span>      _<span class="token comment">; 确定结果符号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零BH_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 假设结果为正_</span>      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">CL</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 检查第一个操作数符号_</span>    <span class="token instruction keyword">JGE</span> CHECK_OP2_MUL    <span class="token instruction keyword">XOR</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 翻转符号位_</span>  CHECK_OP2_MUL:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">CH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 检查第二个操作数符号_</span>    <span class="token instruction keyword">JGE</span> APPLY_SIGN_MUL    <span class="token instruction keyword">XOR</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 翻转符号位_</span>  APPLY_SIGN_MUL:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 检查是否需要取负_</span>    <span class="token instruction keyword">JNE</span> RETURN_MUL    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AX</span>              _<span class="token comment">; 对结果取负_</span>  RETURN_MUL:    <span class="token instruction keyword">RET</span>SIGNED_MUL <span class="token directive property">ENDP</span>_<span class="token comment">; 有符号除法过程 - 结果在AX中_</span>SIGNED_DIV <span class="token directive property">PROC</span>    _<span class="token comment">; 检查除数是否为零_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JNE</span> NOT_ZERO_DIV      _<span class="token comment">; 除数为零处理_</span>    <span class="token instruction keyword">LEA</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> MSG5        _<span class="token comment">; 显示除零错误消息_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 09H    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 返回0_</span>    <span class="token instruction keyword">RET</span>  NOT_ZERO_DIV:    _<span class="token comment">; 保存符号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CL</span><span class="token punctuation">,</span> AL          _<span class="token comment">; 保存第一个操作数_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CH</span><span class="token punctuation">,</span> BL          _<span class="token comment">; 保存第二个操作数_</span>      _<span class="token comment">; 取绝对值_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> ABS1_DIV_DONE    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AL</span>ABS1_DIV_DONE:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> ABS2_DIV_DONE    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">BL</span>ABS2_DIV_DONE:      _<span class="token comment">; 执行无符号除法_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 扩展AL到AX_</span>    <span class="token instruction keyword">DIV</span> <span class="token instruction keyword">BL</span>              _<span class="token comment">; AL = AX / BL, AH = AX % BL_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零AH(我们只关心商)_</span>      _<span class="token comment">; 确定结果符号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零BH_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 假设结果为正_</span>      <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">CL</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 检查第一个操作数符号_</span>    <span class="token instruction keyword">JGE</span> CHECK_OP2_DIV    <span class="token instruction keyword">XOR</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 翻转符号位_</span>  CHECK_OP2_DIV:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">CH</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 检查第二个操作数符号_</span>    <span class="token instruction keyword">JGE</span> APPLY_SIGN_DIV    <span class="token instruction keyword">XOR</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 翻转符号位_</span>  APPLY_SIGN_DIV:    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">BL</span><span class="token punctuation">,</span> <span class="token number">1</span>           _<span class="token comment">; 检查是否需要取负_</span>    <span class="token instruction keyword">JNE</span> RETURN_DIV    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AX</span>              _<span class="token comment">; 对结果取负_</span>  RETURN_DIV:    <span class="token instruction keyword">RET</span>SIGNED_DIV <span class="token directive property">ENDP</span>_<span class="token comment">; 显示有符号数字_</span>DISPLAY_SIGNED_NUM <span class="token directive property">PROC</span>    _<span class="token comment">; 检查符号_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token instruction keyword">JGE</span> POS_NUM      _<span class="token comment">; 显示负号_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> <span class="token char">'-'</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 02H    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">NEG</span> <span class="token instruction keyword">AX</span>              _<span class="token comment">; 取绝对值_</span>  POS_NUM:    _<span class="token comment">; 将数字转换为字符串并显示_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">CX</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 初始化计数器_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">BX</span><span class="token punctuation">,</span> <span class="token number">10</span>          _<span class="token comment">; 基数(十进制)_</span>      _<span class="token comment">; 将数字转换为字符串(逆序)_</span>CONVERT_LOOP:    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">DX</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 清零DX_</span>    <span class="token instruction keyword">DIV</span> <span class="token instruction keyword">BX</span>              _<span class="token comment">; AX / 10, 商在AX，余数在DX_</span>    <span class="token instruction keyword">PUSH</span> <span class="token instruction keyword">DX</span>             _<span class="token comment">; 保存余数_</span>    <span class="token instruction keyword">INC</span> <span class="token instruction keyword">CX</span>              _<span class="token comment">; 增加计数器_</span>    <span class="token instruction keyword">CMP</span> <span class="token instruction keyword">AX</span><span class="token punctuation">,</span> <span class="token number">0</span>           _<span class="token comment">; 检查商是否为0_</span>    <span class="token instruction keyword">JNE</span> CONVERT_LOOP    _<span class="token comment">; 如果不是0，继续转换_</span>      _<span class="token comment">; 显示字符串(正序)_</span>DISPLAY_LOOP:    <span class="token instruction keyword">POP</span> <span class="token instruction keyword">DX</span>              _<span class="token comment">; 取出一个数字_</span>    <span class="token instruction keyword">ADD</span> <span class="token instruction keyword">DL</span><span class="token punctuation">,</span> <span class="token char">'0'</span>         _<span class="token comment">; 转换为ASCII_</span>    <span class="token instruction keyword">MOV</span> <span class="token instruction keyword">AH</span><span class="token punctuation">,</span> 02H         _<span class="token comment">; 显示字符功能_</span>    <span class="token instruction keyword">INT</span> 21H    <span class="token instruction keyword">LOOP</span> DISPLAY_LOOP   _<span class="token comment">; 循环直到所有数字显示完毕_</span>      <span class="token instruction keyword">RET</span>DISPLAY_SIGNED_NUM <span class="token directive property">ENDP</span><span class="token directive property">END</span> <span class="token instruction keyword">MAIN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-05-21-汇编语言键盘输入输出&quot;&gt;&lt;a href=&quot;#2025-05-21-汇编语言键盘输入输出&quot; class=&quot;headerlink&quot; title=&quot;2025-05-21-汇编语言键盘输入输出&quot;&gt;&lt;/a&gt;2025-05-21-汇编语言键盘输入输出&lt;/</summary>
      
    
    
    
    
    <category term="课程学习" scheme="https://ke-tan.asia/tags/course/"/>
    
  </entry>
  
  <entry>
    <title>2025-05-17-scBridge</title>
    <link href="https://ke-tan.asia/2025/05/17/2025-05-17-scBridge%20embraces%20cell%20heterogeneity%20in%20single-cell%20RNA-seq%20and%20ATAC-seq%20data%20integration/"/>
    <id>https://ke-tan.asia/2025/05/17/2025-05-17-scBridge%20embraces%20cell%20heterogeneity%20in%20single-cell%20RNA-seq%20and%20ATAC-seq%20data%20integration/</id>
    <published>2025-05-16T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2025-05-17-scBridge-embraces-cell-heterogeneity-in-single-cell-RNA-seq-and-ATAC-seq-data-integration"><a href="#2025-05-17-scBridge-embraces-cell-heterogeneity-in-single-cell-RNA-seq-and-ATAC-seq-data-integration" class="headerlink" title="2025-05-17-scBridge embraces cell heterogeneity in single-cell RNA-seq and ATAC-seq data integration"></a>2025-05-17-scBridge embraces cell heterogeneity in single-cell RNA-seq and ATAC-seq data integration</h1><blockquote><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><a href="https://www.nature.com/articles/s41467-023-41795-5">https://www.nature.com/articles/s41467-023-41795-5</a></p><p><a href="https://pubmed.ncbi.nlm.nih.gov/37770437/">scBridge embraces cell heterogeneity in single-cell RNA-seq and ATAC-seq data integration - PubMed</a></p><p><a href="https://github.com/XLearning-SCU/scBridge">scBridge 的 Github 仓库</a></p></blockquote><p><a href="https://github.com/GreenleafLab/MPAL-Single-Cell-2019">https://github.com/GreenleafLab/MPAL-Single-Cell-2019</a></p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation:"></a>Motivation:</h1><blockquote><p>概述:<br>scBridge 是一套面向单细胞多组学数据（scRNA-seq 与 scATAC-seq）整合的半监督异构迁移学习框架。它的核心策略是：先用标注的 scRNA-seq 数据“热身”（warm-up）一个深度编码器和分类器，然后根据每个 scATAC-seq 细胞与 RNA 原型的相似度和分类置信度，评估其在组学整合中的“可靠性”，再借助可靠的 ATAC 细胞对齐 RNA 原型；如此迭代，从“易”到“难”逐步缩小 RNA/ATAC 之间的调制差距。大量 benchmark 测试表明，scBridge 在嵌入质量、标签转移准确性和对注释稀缺、技术噪声的鲁棒性方面，均显著优于六种代表性方法（Harmony、Seurat、scJoint、Portal、GLUE、Conos）(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</p></blockquote><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1747738599339BegjbomkVoa7Hpx1yEScx3mRn8f.png" alt="1747738599339BegjbomkVoa7Hpx1yEScx3mRn8f.png"></p><h2 id="单细胞多组学整合的必要性"><a href="#单细胞多组学整合的必要性" class="headerlink" title="单细胞多组学整合的必要性"></a>单细胞多组学整合的必要性</h2><ul><li>单细胞 RNA 测序（scRNA-seq）可描绘基因表达全景，揭示细胞类型与状态的多样性；而单细胞 ATAC 测序（scATAC-seq）则刻画染色质可及性，用以探究基因调控机制(<a href="https://www.frontiersin.org/journals/genetics/articles/10.3389/fgene.2023.1199087/full?utm_source=chatgpt.com">Frontiers</a>)。</li><li>将两种组学 unpaired（非配对）数据整合，可从表达与调控层面构建更全面的细胞图谱，但它们在分布、稀疏性、噪声水平上差异巨大，给算法带来挑战(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li></ul><h2 id="现有整合方法"><a href="#现有整合方法" class="headerlink" title="现有整合方法"></a>现有整合方法</h2><ul><li><strong>Harmony</strong>：通过批次校正，将不同数据集投影到同一低维空间，突出细胞类型聚类而非实验条件(<a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC6884693/?utm_source=chatgpt.com">PMC</a>)。</li><li><strong>Seurat</strong>：基于互为最近邻的锚点（MNN）和标签转移（Transfer Anchors）实现多模态共嵌入(<a href="https://satijalab.org/seurat/articles/multimodal_vignette?utm_source=chatgpt.com">Satija Lab</a>)。</li><li><strong>scJoint</strong>：半监督框架并行训练标注（scRNA）与未标注（scATAC）数据，完成标签转移和联合可视化(<a href="https://pmc.ncbi.nlm.nih.gov/articles/PMC9186323/?utm_source=chatgpt.com">PMC</a>)。</li><li><strong>GLUE</strong>：图模型理念，显式建模不同组学之间的调控网络，构建统一嵌入(<a href="https://www.nature.com/articles/s41587-022-01284-4?utm_source=chatgpt.com">Nature</a>)。</li><li><strong>Conos</strong>：通过全局图结构将多样本 scRNA 数据联通，突出细胞类型一致性传播(<a href="https://github.com/kharchenkolab/conos?utm_source=chatgpt.com">GitHub</a>)。</li><li><strong>Portal</strong>：基于对抗学习的半监督多组学整合管线（本文略）。</li></ul><p>这些方法多对所有细胞“一视同仁”地整合，未利用组学内部的“异质性”信息来引导模型从“易”到“难”分层对齐。</p><h1 id="Method"><a href="#Method" class="headerlink" title="Method:"></a>Method:</h1><h2 id="异构迁移学习框架概览"><a href="#异构迁移学习框架概览" class="headerlink" title="异构迁移学习框架概览"></a>异构迁移学习框架概览</h2><p>scBridge 将标注的 scRNA-seq 与未标注的 scATAC-seq 数据看作源域与目标域，通过迭代的迁移学习流程逐步对齐两种组学的嵌入表示(Nature)。</p><ol><li><strong>Warm-up（热身）</strong><br>使用带标签的 scRNA-seq 数据训练一个深度编码器 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container> 和分类器 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="1.079ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 477 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>，并计算出初始的 RNA 嵌入及原型（每种细胞类型的平均嵌入）(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>可靠性建模</strong><br>对每个 scATAC-seq 细胞，计算其嵌入与 RNA 原型的欧氏距离（可辨识度）及分类器损失（置信度），并用高斯混合模型估计每个细胞的“可靠性”(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>原型对齐</strong><br>根据可靠性加权平均选出同类型 ATAC 细胞，构建 ATAC 原型，并将其与对应的 RNA 原型对齐（例如最小化原型间距离）(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>迭代融合</strong><br>将本轮最“可靠”的 ATAC 细胞加入标注集中，附带当前预测标签，重复上述热身 → 建模 → 对齐过程，直至所有细胞被整合完毕(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li></ol><h1 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h1><h2 id="黄金-benchmark-验证"><a href="#黄金-benchmark-验证" class="headerlink" title="黄金 benchmark 验证"></a>黄金 benchmark 验证</h2><ul><li>在三组“金标准”配对数据集（SNARE-seq 脑皮层、SHARE-seq 骨髓、10x Multiome 肾脏）上，虽然未使用配对信息，仅作验证，但 scBridge 在嵌入质量和标签转移上均领先六种基线方法(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li></ul><h2 id="与主流方法对比"><a href="#与主流方法对比" class="headerlink" title="与主流方法对比"></a>与主流方法对比</h2><ul><li><strong>标签转移准确率</strong>：在 PBMC 数据集上，scBridge 平均比第二名 scJoint 提高约 5% 的准确率（p ≤ 1e−3）(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>鲁棒性测试</strong>：在稀缺注释（25%、50%、75%）和不同 dropout 强度下，scBridge 均表现出更稳健的 F1 分数和轮廓系数(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>可扩展性</strong>：由于仅需小批量优化，算法在细胞数量线性增长时占用常数内存，可轻松处理百万级别数据集(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li></ul><h2 id="创新"><a href="#创新" class="headerlink" title="创新"></a>创新</h2><ul><li><strong>细胞异质性利用</strong>：首次将组学内部的“易整合”细胞作为“桥梁”，显著提升跨模态对齐效果(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>从易到难的分层融合</strong>：通过迭代引入可靠细胞，降低了一次性对齐带来的误差累积，可有效应对噪声与注释不足问题(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>通用性强</strong>：框架输入只需保证行（细胞）一致，列（基因、蛋白等）需对齐，可推广到其他单细胞多组学场景(<a href="https://www.nature.com/articles/s41467-023-41795-5">Nature</a>)。</li><li><strong>开源可复现</strong>：论文随文附带代码与数据，方便社区复现与扩展(<a href="https://www.semanticscholar.org/paper/scBridge-embraces-cell-heterogeneity-in-single-cell-Li-Zhang/a9d3933a9902c9e710823df4284a7bf7ab024177?utm_source=chatgpt.com">Semantic Scholar</a>)。</li></ul><h2 id="未来展望"><a href="#未来展望" class="headerlink" title="未来展望"></a>未来展望</h2><ul><li><strong>更多模态融合</strong>：可直接应用于蛋白质组、表观组等其他单细胞组学，构建更全面的细胞图谱。</li><li><strong>与自动注释工具结合</strong>：可将任何组学注释数据纳入 heterogenous learning 流程，进一步提升新型细胞类型发现能力。</li><li><strong>下游分析拓展</strong>：整合后嵌入可无缝接入细胞谱系追踪、调控网络推断等多种后续分析管线，为生物学研究提供新范式。</li></ul><h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment:"></a><strong>Experiment:</strong></h1><h2 id="我完成的任务与收获"><a href="#我完成的任务与收获" class="headerlink" title="我完成的任务与收获"></a>我完成的任务与收获</h2><ul><li>重装服务器的 conda 环境</li></ul><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><h3 id="umap-PBMC-Reliability"><a href="#umap-PBMC-Reliability" class="headerlink" title="umap_PBMC_Reliability"></a>umap_PBMC_Reliability</h3><p><img src="/static/KgrdbEYNSoTVI1xchbYccC0WnYb.png"><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1747738616339KgrdbEYNSoTVI1xchbYccC0WnYb.png" alt="1747738616339KgrdbEYNSoTVI1xchbYccC0WnYb.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2025-05-17-scBridge-embraces-cell-heterogeneity-in-single-cell-RNA-seq-and-ATAC-seq-data-integration&quot;&gt;&lt;a href=&quot;#2025-05-17-scBridge-</summary>
      
    
    
    
    
    <category term="论文阅读" scheme="https://ke-tan.asia/tags/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>2025-05-12-虚函数</title>
    <link href="https://ke-tan.asia/2025/05/12/2025-05-12-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
    <id>https://ke-tan.asia/2025/05/12/2025-05-12-%E8%99%9A%E5%87%BD%E6%95%B0/</id>
    <published>2025-05-11T16:00:00.000Z</published>
    <updated>2025-10-15T01:37:08.940Z</updated>
    
    <content type="html"><![CDATA[<p>2025-05-12-虚函数</p><blockquote><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p><a href="https://zhuanlan.zhihu.com/p/629281871">对 C++ 虚函数不了解？看完这篇文章掌握虚函数的原理和作用</a></p><p><a href="https://www.bilibili.com/video/BV1QV4y1U73z/">4-虚函数_哔哩哔哩_bilibili</a></p><p><a href="https://www.runoob.com/w3cnote/cpp-virtual-functions.html">C++ 虚函数和纯虚函数的区别</a></p><p><a href="https://blog.csdn.net/i_chaoren/article/details/77281785">C++ 多态–虚函数 virtual 及 override_虚函数 override-CSDN 博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/54145222">C++ 虚函数</a></p></blockquote><p>虚函数是在父类中定义的一种特殊类型的函数，允许子类重写该函数以适应其自身需求。虚函数的调用取决于对象的实际类型，而不是指针或引用类型。通过将函数声明为虚函数，可以使继承层次结构中的每个子类都能够使用其自己的实现，从而提高代码的可扩展性和灵活性。在 C++ 中，使用关键字”virtual”来定义虚函数。</p><ul><li>虚函数不代表函数为不被实现的函数。</li><li>为了允许用基类的指针来调用子类的这个函数。</li><li>定义一个函数为纯虚函数，才代表函数没有被实现。</li><li>纯虚函数是为了实现一个接口，起到一个规范的作用，规范继承这个类的程序员必须实现这个函数。</li></ul><p>虚函数虚在所谓”推迟联编”或者”动态联编”上，一个类函数的调用并不是在编译时刻被确定的，而是在运行时刻被确定的。由于编写代码的时候并不能确定被调用的是基类的函数还是哪个派生类的函数，所以被成为”虚”函数。</p><h1 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h1><p>虚函数可以让子类对象在运行时动态地继承和修改父类的成员函数，使得代码更加灵活、可重用，并且可以实现多态性和<a href="https://zhida.zhihu.com/search?content_id=227971983&content_type=Article&match_order=1&q=%E6%8A%BD%E8%B1%A1%E7%B1%BB&zhida_source=entity">抽象类</a>等高级特性。</p><ol><li>通过虚函数，可以实现多态性（Polymorphism），即同一个函数名可以在不同的子类中表现出不同的行为，这样可以提高代码的可重用性和灵活性。</li><li>避免静态绑定，在使用父类指针或引用调用子类对象的成员函数时，如果没有使用虚函数，则会进行静态绑定（Static Binding），即只能调用父类的成员函数，无法调用子类特有的成员函数。</li><li>虚函数的调用是<a href="https://zhida.zhihu.com/search?content_id=227971983&content_type=Article&match_order=1&q=%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A&zhida_source=entity">动态绑定</a>（Dynamic Binding）的，即在运行时根据指针或引用所指向的对象类型来选择调用哪个函数，从而实现动态多态性。</li><li>抽象类是一种不能直接实例化的类，只能被其他类继承并实现其虚函数。通过定义<a href="https://zhida.zhihu.com/search?content_id=227971983&content_type=Article&match_order=1&q=%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0&zhida_source=entity">纯虚函数</a>（Pure Virtual Function），可以使得一个类成为抽象类，强制其子类必须实现该函数。</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 形状基类，定义了计算面积和周长的虚函数</span><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 计算面积的虚函数，提供默认实</span>   <span class="token comment">// 使用virtual关键字，允许派生类重写</span>   <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// 基类提供默认实现</span>   <span class="token punctuation">}</span>   <span class="token comment">// 计算周长的虚函数，提供默认实现</span>   <span class="token comment">// 使用virtual关键字，允许派生类重写</span>   <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">calculatePerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token comment">// 基类提供默认实现</span>   <span class="token punctuation">}</span>   <span class="token comment">// 虚析构函数，确保派生类对象正确释放</span>   <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Shape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 虚析构函数</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 矩形类，继承自Shape基类</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token comment">// 矩形的私有成员：宽和高</span>   <span class="token keyword">double</span> width<span class="token punctuation">;</span>   <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 构造函数，初始化矩形的宽和高</span>   <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">width</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 重写基类的calculateArea虚函数</span>   <span class="token comment">// override关键字确保正确重写基类虚函数</span>   <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span> <span class="token comment">// 矩形面积计算</span>   <span class="token punctuation">}</span>   <span class="token comment">// 重写基类的calculatePerimeter虚函数</span>   <span class="token keyword">double</span> <span class="token function">calculatePerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>width <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 矩形周长计算</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 圆形类，继承自Shape基类</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token comment">// 圆形的私有成员：半径</span>   <span class="token keyword">double</span> radius<span class="token punctuation">;</span>   <span class="token comment">// 圆周率常量</span>   <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 构造函数，初始化圆形的半径</span>   <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">radius</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">// 重写基类的calculateArea虚函数</span>   <span class="token comment">// override关键字确保正确重写基类虚函数</span>   <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span> <span class="token comment">// 圆形面积计算</span>   <span class="token punctuation">}</span>   <span class="token comment">// 重写基类的calculatePerimeter虚函数</span>   <span class="token keyword">double</span> <span class="token function">calculatePerimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> PI <span class="token operator">*</span> radius<span class="token punctuation">;</span> <span class="token comment">// 圆形周长计算</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h1><p><strong>虚函数只能借助于指针或者引用来达到多态的效果。</strong></p><blockquote><p><strong>多态</strong>的本质是“同一个函数调用，能够根据不同对象表现出不同的行为</p></blockquote><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1747056760477QGSmb9FB5obI4CxbD3RcFRIynCe.png" alt="1747056760477QGSmb9FB5obI4CxbD3RcFRIynCe.png"></p><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="虚函数声明"><a href="#虚函数声明" class="headerlink" title="虚函数声明"></a>虚函数声明</h2><p>从简单的例子开始</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"动物叫了一声\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Animal</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"喵喵喵\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li>代码通过 <code>Animal</code> 基类定义了一个虚函数 <code>shout()</code>，为派生类提供了一个默认实现。</li><li><code>Cat</code> 类继承自 <code>Animal</code>，使用 <code>override</code> 关键字重写了 <code>shout()</code> 方法，展示了虚函数允许派生类提供自己的特定实现。</li><li>这个示例体现了 C++ 多态性的基本原理：基类定义一个通用接口，派生类可以根据自身特性灵活地实现具体行为。</li></ul><blockquote><p>需要注意的是，在子类中重写虚函数时，其访问权限不能更严格（即不能由 public 变为 private 或 protected），否则编译器会报错。</p></blockquote><h2 id="纯虚函数与抽象类"><a href="#纯虚函数与抽象类" class="headerlink" title="纯虚函数与抽象类"></a>纯虚函数与抽象类</h2><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>纯虚函数是指在基类中定义的没有实现的虚函数。使用纯虚函数可以使该函数只有函数原型，而没有具体的实现。注：这里的“=0”表示该函数为纯虚函数。</p><p>纯虚函数的作用是让子类必须实现该函数，并且不能直接创建该类对象（即该类为抽象类）。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 纯虚函数，没有默认实现</span>   <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">// 包含纯虚函数的类成为抽象类</span>   <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 必须实现基类的纯虚函数</span>   <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>       <span class="token comment">// 绘制矩形的具体实现</span>   <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token keyword">double</span> width<span class="token punctuation">;</span>   <span class="token keyword">double</span> height<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li>代码通过 <code>Shape</code> 基类定义了两个纯虚函数 <code>calculateArea()</code> 和 <code>draw()</code>，使 <code>Shape</code> 成为一个抽象类。</li><li>纯虚函数（<code>= 0</code>）没有默认实现，强制派生类必须提供具体实现。</li><li><code>Rectangle</code> 类继承自 <code>Shape</code>，必须实现所有纯虚函数，否则仍将是抽象类。</li><li>这个示例展示了纯虚函数作为接口的设计模式，确保派生类提供必要的具体行为。</li></ul><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类是包含纯虚函数的类，它们不能被实例化，只能被继承。抽象类只能用作其他类的基类。如果一个类继承了抽象类，则必须实现所有的纯虚函数，否则该类也会成为抽象类。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Shape</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>_    <span class="token comment">// 纯虚函数_</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>_<span class="token comment">// 继承自抽象类Shape_</span><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token operator">*</span><span class="token operator">*</span>width<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token operator">*</span><span class="token operator">*</span>height<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token operator">*</span>width<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span>height<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>_<span class="token comment">// 继承自抽象类Shape_</span><span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> <span class="token operator">*</span><span class="token operator">*</span>radius<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">3.14</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span>radius<span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span>radius<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Shape 为抽象类，其中包含纯虚函数 getArea()，Rectangle 和 Circle 均继承自 Shape，并且实现了 getArea()函数的具体内容。</p><h3 id="多重继承中的虚函数"><a href="#多重继承中的虚函数" class="headerlink" title="多重继承中的虚函数"></a>多重继承中的虚函数</h3><p>在多重继承中，如果一个类同时继承了多个基类，而这些基类中都有同名的虚函数，那么子类必须对这些虚函数进行重写并实现。此时，需要使用作用域限定符来指明重写的是哪个基类的虚函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base1</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base1::func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Base2</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base2::func()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Base2</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Base1</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Base2</span><span class="token double-colon punctuation">::</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类 Derived 同时继承了 Base1 和 Base2，这两个基类中都有名为 func 的虚函数。在 Derived 中，我们通过使用作用域限定符 Base1::和 Base2::，分别调用了两个基类中的虚函数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><p>优点：</p><ul><li>实现多态性：通过虚函数，可以在不知道对象具体类型的情况下，调用特定对象的方法。</li><li>代码灵活性：虚函数允许子类覆盖父类的方法，并且不需要改变基类的代码。</li><li>代码可维护性：虚函数使得代码易于维护和扩展，因为子类可以通过重载虚函数来实现自己的行为。</li></ul></li><li><p>缺点：</p><ul><li>额外的开销：虚函数需要额外的开销来支持运行时的动态绑定和查找虚表。这可能会影响程序的性能。</li><li>可能会引起混淆：由于虚函数的存在，同名的函数可能会被不同的类定义。如果没有正确的使用虚函数，可能会导致混淆和错误的结果。</li><li>不适合于小型应用：虚函数对于小型应用来说可能过于复杂和冗余。在这种情况下，使用虚函数可能会导致更多的开销而不是提高效率。</li></ul></li></ul><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span><span class="token comment">// 基类Entity，定义了一个虚函数GetName()</span><span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 虚函数，返回一个默认的实体名称</span>   <span class="token comment">// 使用virtual关键字，允许派生类重写</span>   <span class="token keyword">virtual</span> std<span class="token double-colon punctuation">::</span>string <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Entity"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 派生类Player，继承自Entity</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Entity</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>   <span class="token comment">// 私有成员，存储玩家名称</span>   std<span class="token double-colon punctuation">::</span>string m_Name<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>   <span class="token comment">// 构造函数，使用传入的名称初始化玩家</span>   <span class="token function">Player</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">m_Name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 重写基类的GetName()虚函数</span>   <span class="token comment">// override关键字确保正确重写基类虚函数</span>   std<span class="token double-colon punctuation">::</span>string <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_Name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">// 设置玩家名称的成员函数</span>   <span class="token keyword">void</span> <span class="token function">SetName</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span> m_Name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 打印实体名称的函数</span><span class="token comment">// 接受一个Entity指针作为参数，体现了多态性</span><span class="token keyword">void</span> <span class="token function">PrintName</span><span class="token punctuation">(</span>Entity<span class="token operator">*</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 调用虚函数GetName()，实际执行的是对象的具体实现</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> entity<span class="token operator">-&gt;</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 创建一个基类Entity对象的指针</span>   Entity<span class="token operator">*</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用PrintName()，将打印"Entity"</span>   <span class="token function">PrintName</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建一个Player对象，名称为"tanke"</span>   Player<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string">"tanke"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用PrintName()，将打印"tanke"</span>   <span class="token function">PrintName</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 修改Player对象的名称为"wangjie"</span>   p<span class="token operator">-&gt;</span><span class="token function">SetName</span><span class="token punctuation">(</span><span class="token string">"wangjie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 将Player指针赋值给基类指针，体现了多态性</span>   Entity<span class="token operator">*</span> e1 <span class="token operator">=</span> p<span class="token punctuation">;</span>   <span class="token comment">// 调用PrintName()，将打印"wangjie"</span>   <span class="token function">PrintName</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 等待用户输入，保持窗口打开</span>   std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释：</strong></p><ul><li>代码通过 <code>Entity</code> 基类定义了一个虚函数 <code>GetName()</code>，为派生类提供了一个默认实现。</li><li><code>Player</code> 类继承自 <code>Entity</code>，并使用 <code>override</code> 关键字重写了 <code>GetName()</code> 方法。</li><li><code>PrintName()</code> 函数接受一个 <code>Entity</code> 指针，展示了 C++ 多态性的关键特征 - 可以通过基类指针调用派生类的具体实现。</li></ul><p><img src="https://tk-pichost-1325224430.cos.ap-chengdu.myqcloud.com/blog/1747056796676Ue1zbj8hco94t9xuRBRcd0jWnXg.png" alt="1747056796676Ue1zbj8hco94t9xuRBRcd0jWnXg.png"></p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ol><li>虚函数应用于继承层次结构中的多态性，即通过基类指针或引用调用派生类对象的成员函数。</li><li>可以将虚函数作为接口定义，让不同的派生类实现自己的版本，以满足各自的需求。</li><li>避免在构造函数和析构函数中调用虚函数，因为此时对象还未完全构造或已经被销毁。</li><li>虚函数的声明应该在公共部分（例如基类），而不是在私有部分（例如派生类）中声明。</li><li>将虚函数的实现定义为 inline 可以提高程序的执行效率。</li><li>在使用纯虚函数时，需要给出其具体实现。可以在派生类中实现，也可以在基类中实现。</li><li>避免过度使用虚函数，因为虚函数会增加程序的开销。在没有必要的情况下，可以使用普通成员函数代替虚函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2025-05-12-虚函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;h1 id=&quot;参考资源&quot;&gt;&lt;a href=&quot;#参考资源&quot; class=&quot;headerlink&quot; title=&quot;参考资源&quot;&gt;&lt;/a&gt;参考资源&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.z</summary>
      
    
    
    
    
    <category term="程序开发" scheme="https://ke-tan.asia/tags/development/"/>
    
  </entry>
  
</feed>
